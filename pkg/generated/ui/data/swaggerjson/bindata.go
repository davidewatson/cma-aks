// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdb\x46\x12\x7f\xf7\x5f\x31\xe0\x1d\x70\x29\x90\x58\x69\xee\xe5\xe0\xa7\x33\x6c\xa0\x15\x5c\xf7\x82\x53\xda\x3c\x1c\x02\x61\xb4\x1c\x91\x5b\x91\xbb\xcc\xee\x52\xae\x72\xf0\xff\x5e\xec\x92\x94\xf8\x29\xd1\x94\x63\x33\x8e\xfa\x12\xd7\xdc\xdd\xf9\xdc\xdf\x7c\x70\xe8\xff\x9f\x01\x78\xfa\x0e\x83\x80\x94\x77\x01\xde\xbb\xf3\xb7\xde\x6b\xfb\x3b\x2e\x96\xd2\xbb\x00\xfb\x1c\xc0\x33\xdc\x44\x64\x9f\x5f\x45\xa9\x36\xa4\xe0\x16\x05\x06\xa4\xe0\xf2\x66\x06\x3f\x53\x94\xd8\x1f\xdf\x4f\xdd\x56\x00\x6f\x4d\x4a\x73\x29\xec\x86\xf5\xdb\xf3\x1f\xf3\x33\x01\x3c\x26\x85\x41\x66\xb6\x07\x03\x78\x02\x63\x77\xf2\x2d\x67\x21\x52\x04\xbf\x93\xa0\x2f\x1c\xf3\x1d\x00\x5e\xaa\x22\xfb\x3c\x34\x26\xd1\x17\x93\x49\xc0\x4d\x98\x2e\xce\x99\x8c\x27\x1a\x63\x9d\x8a\xe0\x0d\x13\xcc\x4c\x58\x8c\x6f\x70\xa5\x77\xfb\x28\x46\xee\x76\xc6\xeb\xec\xc8\x7f\x07\xf6\x37\x76\xa7\xe7\xd6\xdc\x9f\x01\xdc\x3b\x61\x35\x0b\x29\x26\xed\x5d\xc0\xff\x32\x3e\x1d\xb1\x82\x69\xfb\x3f\x76\xc7\x27\xb7\x96\x49\xa1\xd3\xca\x62\x4c\x92\x88\x33\x34\x5c\x8a\xc9\x1f\x5a\x8a\xdd\xda\x44\x49\x3f\x65\x3d\xd7\xa2\x09\xf5\x4e\xe3\x13\x4c\xf8\x64\xfd\xe3\x84\x65\x0a\x2f\x6b\x2c\xa0\xb2\x02\x2d\xfb\x69\x1c\xa3\xda\x58\x59\x3f\xf2\x28\x02\x45\x46\x71\x5a\x13\x98\x90\x40\x1b\x34\xa9\x06\xb9\x04\x84\xfc\x30\x40\xe1\x03\x37\x1a\x56\xe9\x82\x98\x14\x4b\x1e\xc0\x52\x2a\x60\x52\x08\x62\x86\xaf\xb9\xd9\x6c\xf5\x08\xe0\xc9\x84\x94\x63\x79\xea\x5b\x1a\x3f\x91\xc9\xdd\xa0\xbc\x48\x91\x4e\xa4\xd0\xa4\x2b\xbc\x01\x78\xef\xde\xbe\xad\xfd\x0a\xc0\xf3\x49\x33\xc5\x13\x93\x7b\x49\xe9\xa0\x4c\x22\x6b\x10\x6c\x6c\x03\xf0\xfe\xae\x68\x69\x77\xfc\x6d\xe2\xd3\x92\x0b\x6e\x4f\xd0\xd6\xf8\xb8\xd2\x3b\xc6\xfe\x4b\x49\xb4\xf1\x2a\x7b\xef\xcf\xda\x7e\xbe\x2f\x49\x90\xa0\xc2\x98\x0c\xa9\x9d\xbd\xb2\xff\x6a\xbc\x17\x1e\xeb\xfe\x7d\xbd\x57\xae\x5f\x31\x26\xab\x7a\x6b\x88\x42\xf9\x46\xc2\x82\x20\x92\x72\x45\x3e\xa4\xc9\x79\xfd\x08\xee\x76\x7e\x4e\x49\x6d\xea\x8f\x14\x7d\x4e\xb9\x22\x6b\x85\x25\x46\x9a\x6a\x8f\xcd\x26\x71\x8c\x69\xa3\xb8\x08\xca\xe2\xdf\xbf\x3e\x2c\x0e\x53\xe4\x93\x30\x1c\x23\x7d\x8e\x49\x32\xe7\xfe\x01\xe1\x3e\x84\x04\x97\x49\x32\xf5\x9d\xf3\x5c\xbe\x9f\xc2\x25\x63\xa4\xf5\x28\x25\x32\x24\x50\x98\x1e\x12\x7d\x70\x0b\xb7\x22\xe1\x78\x45\x4a\x50\xeb\x3b\xa9\xfa\x98\xe9\x7d\xbe\xf4\x5b\x10\x4b\xa7\x8b\x2d\xff\xfd\x9c\x70\x56\xda\xf1\x2c\x12\x6e\x7f\xfe\x54\x82\x13\x83\x41\x1d\x48\x8a\xf0\xb9\xdb\xfc\xe9\xac\xa6\x24\xcf\xa7\x88\x0c\xed\x07\xf8\x6c\xcd\x0e\xd0\xf7\x80\xf5\xb5\x5b\x3a\x4e\xbc\xae\xf0\x36\x16\xc8\xfe\x18\xa2\x01\xae\xcb\x90\xfd\x0f\x0d\x76\xa3\x45\x6e\x9f\xb4\x51\x72\x33\xca\x8b\x73\x02\xed\x6f\x00\xdd\x4e\xa0\xfd\x12\x41\x3b\x49\x0f\xa4\xe4\x89\x92\x6b\x6e\x6b\xa2\x5e\xa0\x7d\xa5\x08\xc7\x0a\xda\x15\xde\x9e\x04\xb4\x17\xd2\x6f\x98\x3d\xf3\x88\xb6\x27\x25\x87\x30\x2a\xad\xfb\xc3\x23\xc8\x7c\xab\x83\x3e\x12\x0f\xf7\xaa\xb3\x92\xc2\xea\x75\xe0\x24\xe2\xda\x0c\x2b\x06\x11\xec\x5e\x5b\x8d\xe4\x67\xe9\x5e\x35\xde\x2f\x96\xe0\xb8\x5c\xb0\xca\xdc\x93\xf8\xe0\x29\xce\x9e\xe2\xec\x18\xc4\xfa\x3e\xe3\xec\x5e\x44\xd4\x0c\x23\x1a\x06\x89\x42\xfa\x04\x4c\xa6\x15\xdf\xef\x86\xc2\x5f\xa5\x4f\x57\xf5\xd5\xa3\xc2\xc3\x2d\x87\x63\xa9\xa6\x4e\x0d\xb0\xb1\x48\x74\xc2\xf8\x13\xc6\x8f\x19\xe3\xfb\xd7\x52\x0e\xf0\x77\x75\x94\xee\x07\xe3\x33\xbb\x6b\x9c\x25\x55\x99\xb5\xef\xa4\xa2\x2a\x8b\xfc\xbc\x05\x55\x9a\x04\x0a\xfd\x81\x09\x04\xae\x91\x47\xb8\x88\x08\xf2\x63\xaa\x2f\xda\x7a\x65\x15\xbf\xe5\x3b\x47\xe6\x94\x4d\x06\x4f\x39\xc5\x29\xa7\x38\xe5\x14\xa7\x9c\xe2\x25\xe6\x14\x39\x7c\xf7\x82\xee\x1c\x0f\xc7\x99\x4b\x54\x99\xfb\x4e\xb2\x89\xaa\xd0\xcf\x93\x4f\xec\x66\x9e\x1e\x94\x47\xa4\x4a\x40\xbe\x15\xb8\x58\x4a\x15\x3b\x4f\x03\x5c\xc8\xd4\x00\x26\x1c\x34\xa9\xf5\xa1\x54\xe2\xf7\xec\x84\xe9\xee\x80\x91\xb9\xe5\x8e\xc7\x41\x2e\x39\xc4\x3e\xdb\xe9\xae\x12\x37\xbb\xf9\xaa\x4a\x4b\xff\xf2\x66\x36\x4b\x88\x5d\xde\xcc\xa6\x42\x1b\x14\x8c\x7e\x52\x32\x4d\xca\xb6\x2c\x80\x4a\x2e\xfe\x20\xb6\x0b\x79\x5e\xa2\xac\x35\x0c\xaf\x29\xb7\xb8\x1c\x15\x75\xd7\xc0\xee\x75\xe5\x59\x31\x61\x67\xb1\x57\x94\x32\x9c\xc0\x71\xd2\xae\x95\xec\xbc\x87\xd3\x28\xa4\x04\xbb\x1a\x5e\xcd\x0c\x0a\x1f\x95\x3f\xbf\x7e\x37\x5f\xbf\x7b\x0d\x64\xd8\xf9\x0f\xed\x24\x63\x2e\xe6\x9f\x53\x14\x86\x9b\x4d\x17\x69\x2e\x0c\x05\x15\x8f\x05\xf0\x32\xc7\xcc\x1f\xff\xf3\x5d\x07\x63\xb7\x5c\xf0\x38\x8d\x41\xa4\xf1\x82\x94\x55\x01\xcf\x59\xd5\xf0\xca\xa7\x25\xa6\x91\xd1\x36\xd9\xfb\x42\x4a\x96\x59\x6c\x20\x7e\x53\x56\xa7\x48\x0d\xce\x1b\x2c\xd0\x3b\xd9\x51\xf8\x6d\xc4\xbc\xca\x15\x6f\xf3\x95\x0f\x99\x47\x0e\xf6\x8f\x15\x75\xea\x6f\xbf\x7b\x60\x00\x76\x6f\xab\x75\xd6\x18\xa5\x03\xbd\x0e\x03\xc8\x76\xf7\xd1\xa9\x15\x1e\x50\x65\x8e\x3a\x71\xfb\x20\x41\xae\x34\x98\x10\x0d\x90\x70\x25\xd1\x46\xa6\xd6\x54\x0c\x0d\x05\x52\xf1\x2f\x04\x8a\xb4\x4c\x95\x35\xa6\xd5\xfb\x9a\xd3\x1d\x30\x29\xb4\x8c\xb8\x8f\x86\x7c\x58\xf0\x28\xda\xa6\x01\x85\xf6\x6b\xd0\xd1\x02\x75\x47\x98\x21\xe0\x66\xde\x44\xee\x07\xe8\x2d\x24\x30\x18\x80\x14\xd9\x65\xe5\x06\x14\x25\x52\x73\x23\x55\x87\x91\x2c\x49\x26\xe3\x98\x9b\xc1\x14\x43\xd4\xe1\x16\x1f\xb8\x81\xfc\xb8\x4e\x72\x46\x11\xcd\xb5\x41\x33\xcc\x39\x3e\x86\x64\x42\x7b\x43\x14\x08\x69\x1c\x55\x7b\x22\xdc\xa1\x06\x16\x11\x0a\xb8\x0b\x49\xc0\x22\xe5\x51\x07\x13\xf6\x91\x3f\xf7\x87\x32\x70\x8d\xc6\xe1\xa1\x3b\xa6\x43\x4c\x79\x94\x1d\x73\xaf\xb2\x44\x02\x09\xa9\x26\xdf\xb9\xae\x8c\x13\x1e\x51\x3b\xc5\xfc\xa1\x1a\x44\xef\x2a\xdf\xec\x48\xb5\x9f\x9f\x44\x68\xac\x8f\x0f\x3a\xff\x7d\xbe\x19\xb8\xc9\xcc\x94\xd1\xcb\x6a\x95\x09\xa8\x54\x08\x2e\xac\xdb\xb6\xdc\xf7\xca\xed\xcb\xc2\xf7\xe5\x97\x54\x15\x00\x38\x23\xb5\xe6\x8c\x2e\x59\xd6\x71\x3b\xe2\xf2\xb1\x88\x93\x30\xb6\x1c\x19\x7a\x11\xae\xdc\x09\x53\x1f\x5e\xe1\x0a\x2f\x5c\xe1\x7c\xdd\x11\xb9\x72\x62\x9a\x98\xa2\xe1\x37\x2f\x23\x38\x73\x87\xe4\x44\x8b\x8a\xb1\x5f\x38\xb2\x97\x07\x33\xd5\x65\x6e\xb6\xd8\xd4\x1b\x19\xcc\x85\x1b\x40\xab\xf3\x12\x64\xbe\xa2\x3f\x2f\x20\x92\xe8\xc3\x02\x23\x1b\xa5\xd4\x0f\x5e\xa7\xa9\x76\xa5\xdf\x31\x06\xca\x3b\x16\x43\x95\xd5\xd6\xc7\xe8\xc8\x64\xb2\x46\xc2\x50\x42\xad\xed\x85\x8e\x5b\x55\xd4\xf7\x43\x69\x75\x54\xfd\xed\xd4\xea\x65\xf7\x50\xa2\x7b\x8a\xf1\x7e\x01\xdb\x7a\xd8\xce\x27\xac\x97\xa5\x9a\xb2\xa1\x7f\xeb\x6d\x16\x0b\x4a\x5e\xd8\xe6\x57\xf9\xed\xbf\x26\x83\x3c\x9a\x1a\x8a\x8f\x71\xac\x81\xaa\x98\x5e\xd7\xfa\x7e\xed\x5a\x1f\x9c\x7b\xb7\x74\x16\x3b\xec\xea\x3e\xaa\x18\x18\x4c\x77\xf3\xa5\xbb\x6f\x33\x0e\x52\xdc\x7d\xaa\x71\x34\xd5\xd2\x57\x1f\x2e\xc6\xb9\x8f\x3e\xec\x8f\xed\x4c\xec\x09\x0b\xb9\x4f\x9c\xbc\xe1\x49\xbc\x61\x9f\x21\x5a\x2a\x94\x63\x2c\x12\x49\x56\x4f\xad\xfb\xcb\xe4\xa0\xdf\x05\xaf\x6b\x34\x08\x57\x24\x3a\x35\xc7\x5a\xe3\x14\x1c\xea\x26\x34\x62\x5c\x47\x92\x55\x45\x3c\x97\x3d\x1e\xb6\x66\xfe\xb0\x99\xdf\xf4\x64\xab\x35\x4b\xea\x60\x30\x0f\xfa\x3a\x5b\x5c\x4d\x0c\xec\x85\xc4\x68\x65\xff\xcd\x52\x01\x97\x00\x6c\xe1\xba\x2d\x13\xa8\x8b\x52\xd4\xb3\xf3\xac\xf6\xed\xb2\x26\x2a\x85\xd5\x3e\x9d\xc7\x0d\xc5\xf5\xf5\x9d\xd2\xf7\xea\xa5\x94\x0e\xba\x3f\xd0\x95\xc8\xb9\x6d\xcf\x14\xaa\x75\xf7\x57\x97\xc3\xd5\xf9\x87\x79\xaf\x2e\xeb\x7d\x55\x6f\x75\xf0\x2c\x4d\xa6\xee\x57\x68\xdb\x41\xe5\xce\xb2\xc4\x2e\xf0\x9b\x65\x4f\xef\xf9\xd9\xf7\xf9\x01\x0e\xa3\xba\x11\xa4\xa0\x03\x3a\x21\xc6\x97\xf9\x47\x93\x03\x74\x5c\xa1\xf7\x1c\xca\x2e\x63\xfc\x56\xaa\x37\x10\xf1\x15\x01\xae\x3a\xfc\x7c\xf5\x2f\x7d\x74\x63\x62\xbd\x2b\x6a\x6f\xd2\x05\x29\x41\x86\x3a\xc8\x39\x84\x19\x6c\xd2\x22\xe2\xec\x89\x07\x37\xb3\x4e\x43\x96\xd8\x08\x79\x10\xce\xf3\x97\xea\x3c\xda\xd3\x63\x5c\x48\x19\x11\x8a\xae\x1e\x63\xeb\xe3\x7d\xfd\x8c\xe2\x12\x70\x0d\x3f\x5f\x76\xe4\x11\x64\xee\xa4\x5a\xcd\x97\xb8\x50\x9c\x0d\x36\x4a\xb6\x3d\xbf\x6d\xb5\xea\xbf\xaf\x4b\x67\x3d\xf4\x23\x7c\x59\xae\x9e\x5a\xb1\x77\xa8\xcb\xd8\x92\x95\xbd\x5c\x83\xa2\xcf\x29\xe9\x8e\xb6\x51\xf3\xe3\xe7\xc3\x7e\x59\x4a\x49\xbb\x8d\xe0\xbb\x2a\xa6\x9e\x6b\x15\xcc\x40\xf1\xc2\xa4\x9f\x69\x5a\x3e\x63\x1b\x9f\x69\xae\x64\x5a\x4d\x7e\xac\xfb\xe5\x5f\xb3\x75\x41\xfd\x11\x79\xed\xac\x92\xcb\x36\x8d\xbc\x47\x9d\x6d\xd3\xfd\xe3\xd3\xe7\x54\x57\x71\x23\xeb\xff\xea\x8d\xb6\x8e\xb7\xcf\x99\xbf\x5a\xf6\xd2\xf4\xff\xc3\x69\xcb\x2f\xf5\x2f\x42\x1e\x68\xa1\xda\xbc\xf1\x4b\x30\xd3\xe0\x30\xef\x3a\x7b\xdb\x79\x30\x37\x93\x98\x48\x19\xb9\x77\x24\x5d\x1d\xe4\x96\x02\xe3\x11\xde\xa2\x7d\x68\x72\x92\x91\x6a\x5a\xb7\xd9\x2a\x72\x96\x84\x3b\x6e\xc2\x3d\x67\x74\xf9\xc3\xcb\x71\x83\xe1\xa1\xa7\xd4\x21\x7b\xe0\x6d\xaa\x0e\xda\xbd\x04\x2d\x16\x53\x91\x5f\x17\xf3\x72\xbd\xf5\x29\xd3\xc2\xb6\x99\xcd\xe1\xf7\xa2\x7a\x42\xc3\xae\x95\x91\x87\x11\xda\x73\x09\xdb\x51\x12\x97\xa0\xfd\xe7\xa6\xe3\xbd\x72\x26\xc7\x9c\xb7\xbe\x74\xdd\x63\x9f\xc3\xef\x6e\xf7\xbf\x8e\x2b\xaf\xec\x6f\xa4\xa5\x54\xdb\xda\xa7\x92\x7a\x54\x0d\x54\x9f\x41\x7e\xce\x42\x7c\x7f\x47\xea\x29\xbb\x64\x9a\x50\xb1\x10\x74\xfd\x8d\x43\x4b\x8a\x50\x8e\x9a\xd2\xa7\xb9\x0d\x77\x83\xb4\x50\xcc\xbb\x6c\x83\xe6\xd3\xc6\x4b\x23\x0d\x46\x36\x19\xe6\x8a\x7c\xc7\x44\xcf\x44\xa8\x39\xb8\x3f\xbe\x4b\x7e\x17\x12\xee\x2b\xca\xdc\xd7\x14\xa3\x2a\x00\x7e\x6b\x4e\xe4\x3f\x54\x97\xfd\x3a\x27\x7d\x10\xa5\x81\xf5\x05\xb2\xb4\x21\x4a\x75\x0e\xf1\x11\xfa\xf0\xa3\xe9\x8f\x1f\x36\xd7\x48\x80\xb4\xd9\xd1\xcc\xed\xf6\x88\xed\xcc\xaa\xc4\x4f\xd0\xcf\xdc\x43\xf0\xd4\xd0\x7c\xa4\x86\x66\xfb\xdd\x1d\xd6\xd1\xec\x6d\xca\xb1\x06\x8d\x03\x8d\xbc\x02\x0a\xbf\xed\x26\xde\x76\x40\x98\xfe\x34\xa4\x04\x46\xd7\x92\x95\x26\x84\x6b\x73\xd0\xb7\x52\x51\x3e\x95\xdd\xef\x8f\x60\x3e\xf0\xef\x56\x5a\x6e\xce\xee\xcf\xfe\x0a\x00\x00\xff\xff\x96\xe6\x9f\xe5\x91\x53\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 21393, mode: os.FileMode(420), modTime: time.Unix(1537462971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
