// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x18\xa8\x05\xba\x07\xe4\xe2\xbd\xf4\xa5\xc8\x53\x8d\x04\xd8\x33\x72\x69\x83\x7a\x71\xfb\x50\x2c\x8c\x31\x35\x96\x79\x96\x48\x2d\x39\x72\xd6\x5b\xe4\xbb\x17\xa4\x24\x5b\x92\x25\x5b\x91\xbb\xbb\xbe\x6b\xf6\x25\x5e\x93\xc3\xf9\xcb\xdf\xcc\x90\xf4\x7f\x2e\x00\x02\xfb\x84\x51\x44\x26\xb8\x81\xe0\xfa\xea\x6d\x70\xe9\xbe\x93\x6a\xa1\x83\x1b\x70\xe3\x00\x01\x4b\x8e\xc9\x8d\xdf\xc6\x99\x65\x32\xf0\x80\x0a\x23\x32\x30\xbe\x9f\xc2\xcf\x14\xa7\xee\xe3\xe3\xc4\x93\x02\x04\x6b\x32\x56\x6a\xe5\x08\xd6\x6f\xaf\x7e\x2a\xd6\x04\x08\x84\x56\x8c\x82\xb7\x0b\x03\x04\x0a\x13\xbf\xf2\x83\x14\x4b\xa4\x18\x7e\x25\x45\x5f\x24\x16\x14\x00\x41\x66\x62\x37\xbe\x64\x4e\xed\xcd\x68\x14\x49\x5e\x66\xf3\x2b\xa1\x93\x91\xc5\xc4\x66\x2a\xfa\x51\x28\xc1\x23\x91\xe0\x8f\xb8\xb2\x3b\x3a\x4a\x50\x7a\xca\x64\x9d\x2f\xf9\xf7\xc8\x7d\xe3\x28\x03\x3f\xe7\xf9\x02\xe0\xd9\x2b\x6b\xc5\x92\x12\xb2\xc1\x0d\xfc\x3b\x97\xd3\x33\x2b\x85\x76\xff\x71\x14\x1f\xfd\x5c\xa1\x95\xcd\x6a\x93\x31\x4d\x63\x29\x90\xa5\x56\xa3\xdf\xac\x56\xbb\xb9\xa9\xd1\x61\x26\x7a\xce\x45\x5e\xda\x9d\xc5\x47\x98\xca\xd1\xfa\xa7\x91\xc8\x0d\x5e\xb5\x58\x44\x55\x03\x3a\xf1\xb3\x24\x41\xb3\x71\xba\x7e\x90\x71\x0c\x86\xd8\x48\x5a\x13\xf0\x92\xc0\x32\x72\x66\x41\x2f\x00\xa1\x58\x0c\x50\x85\x20\xd9\xc2\x2a\x9b\x93\xd0\x6a\x21\x23\x58\x68\x03\x42\x2b\x45\x82\xe5\x5a\xf2\x66\x6b\x47\x80\x40\xa7\x64\xbc\xc8\x93\xd0\xf1\x78\x47\x5c\x84\x41\x75\x92\x21\x9b\x6a\x65\xc9\xd6\x64\x03\x08\xae\xdf\xbe\x6d\x7c\x05\x10\x84\x64\x85\x91\x29\x17\x51\x52\x59\x28\xd7\xc8\x39\x04\xf7\xc8\x00\x82\x3f\x1b\x5a\x38\x8a\x3f\x8d\x42\x5a\x48\x25\xdd\x0a\xd6\x39\x1f\x57\x76\x27\xd8\xbf\x28\x8d\x37\x41\x8d\xf6\xf9\xa2\xed\xf3\x73\x45\x83\x14\x0d\x26\xc4\x64\x76\xfe\xca\xff\x35\x64\x2f\x23\xd6\xff\xbd\x3c\xa8\xd7\x3f\x30\x21\x67\x7a\xe7\x88\xd2\xf8\xac\x61\x4e\x10\x6b\xbd\xa2\x10\xb2\xf4\xaa\xb9\x84\xf4\x94\x9f\x32\x32\x9b\xe6\x90\xa1\x4f\x99\x34\xe4\xbc\xb0\xc0\xd8\x52\x63\x98\x37\xa9\x17\xcc\xb2\x91\x2a\xaa\xaa\xff\x7c\x79\x5c\x1d\x61\x28\x24\xc5\x12\x63\x7b\x85\x69\x3a\x93\xe1\x11\xe5\xde\x2f\x09\xc6\x69\x3a\x09\x7d\xf0\x8c\x1f\x27\x30\x16\x82\xac\x3d\x4b\x8d\x98\x14\x2a\xee\xa1\xd1\x7b\x3f\x71\xab\x12\x9e\xaf\x4a\x29\x5a\xfb\xa4\x4d\x1f\x37\x3d\x16\x53\x7f\x0f\x6a\xd9\x6c\xbe\x95\xbf\x5f\x10\x4e\x2b\x14\xdf\x45\xc3\xed\xe7\x8f\x15\x38\x61\x8c\x9a\x40\x52\xa6\xcf\x1d\xf1\xc7\x8b\x86\x91\x82\x90\x62\x62\x3a\x0c\xf0\xf9\x9c\x1d\xa0\x1f\x00\xeb\x3b\x3f\xf5\x3c\xf1\xba\x26\xdb\xb9\x40\xf6\x87\x25\x32\x48\x5b\x85\xec\xbf\x58\x70\x84\x0e\xb9\x43\xb2\x6c\xf4\xe6\x2c\x37\xce\x2b\x68\xff\x0e\xd0\xed\x15\xb4\xff\x88\xa0\x9d\x66\x47\x4a\xf2\xd4\xe8\xb5\x74\x3d\x51\x2f\xd0\xbe\x35\x84\xe7\x0a\xda\x35\xd9\xbe\x09\x68\xcf\x75\xb8\xe7\xf6\x3c\x22\xda\x46\x2a\x01\xc1\x26\x6b\xc6\xc3\xff\x40\xe7\x07\x1b\xf5\xd1\x78\x78\x54\x5d\x54\x0c\xd6\xec\x03\x47\xb1\xb4\x3c\xac\x19\x44\x70\xb4\xae\x1b\x29\xd6\xb2\xbd\x7a\xbc\x5f\x1c\xc3\xf3\x0a\xc1\xba\x70\xdf\x24\x06\x5f\xf3\xec\x6b\x9e\x3d\x07\xb5\xfe\x3f\xf3\x6c\x2b\x22\xee\x0e\x19\x5f\x04\x86\x99\x51\x50\x90\x82\x54\x0b\x6d\x12\x0f\x7b\x80\x73\x9d\x31\x60\x2a\xc1\x92\x59\x1f\x4c\xcf\xef\x88\x7f\xcd\x57\x98\xec\x16\x38\x3f\x8c\x2c\x64\x1c\x84\x8f\x43\xfc\xb3\x3d\x4e\xad\x48\xb3\x3b\xd0\xac\xe5\xd0\xf1\xfd\x74\x9a\x92\x18\xdf\x4f\x27\xca\x32\x2a\x41\xef\x8c\xce\xd2\xaa\x2f\xcb\x88\xd2\xf3\xdf\x48\xec\xb0\x29\x48\x8d\xf3\x06\xcb\x86\x71\xcb\xdd\x52\x33\x77\x23\x2a\x2f\x6b\x63\xe5\x91\xb6\xdb\x24\xaa\x72\x4e\x17\x79\x49\xda\xad\x92\xaf\xf7\x72\x1e\xa5\x96\xe0\x66\xc3\x9b\x29\xa3\x0a\xd1\x84\xb3\xbb\xeb\xd9\xfa\xfa\x12\x88\xc5\xd5\x0f\xed\x2c\x13\xa9\x66\x9f\x32\x54\x2c\x79\xd3\xc5\x5a\x2a\xa6\xa8\x16\xb1\x00\x41\x1e\x98\xc5\xf0\x5f\xaf\x3b\x04\x7b\x90\x4a\x26\x59\x02\x2a\x4b\xe6\x64\x9c\x09\x64\x21\xaa\x85\x37\x21\x2d\x30\x8b\xd9\xba\xc6\xf7\x0b\x19\xdd\x25\x22\x7e\xfe\xaa\x22\xe2\xe7\x61\x22\xee\x55\xe9\xfb\xee\xf0\xbe\xb6\xe0\x03\xd6\x55\x48\xde\x3d\xa8\xc2\x36\x66\x41\x0d\x85\xda\xc2\xf9\x7d\xbe\x69\x06\x87\xf0\x8a\x3a\xed\x77\x38\x82\x31\x02\x47\xdb\xea\x9d\x35\xc6\xd9\xc0\x8d\x81\x11\xe4\xd4\x7d\x6c\xea\x94\x07\x34\xf9\x5e\x1a\x79\x3a\x48\x51\x1a\x0b\xbc\x44\x06\x52\x38\x8f\x09\x36\x3a\x73\xae\x12\xc8\x14\x69\x23\xbf\x10\x18\xb2\x3a\x33\xce\x99\xce\xee\x6b\x49\x4f\x20\xb4\xb2\x3a\x96\x21\x32\x85\x30\x97\x71\xbc\x4d\x29\xa5\xf5\x1b\xe8\xd6\x82\xc6\x27\xb8\x21\x92\x3c\xdb\x4f\x2e\x2f\xb0\xdb\x92\x80\x31\x02\xad\x72\x3c\x91\x0c\x86\x52\x6d\x25\x6b\xd3\xe1\x24\xc7\x52\xe8\x24\x91\x3c\x98\xe3\x12\xed\x72\x0b\x61\x92\xa1\x58\xae\x93\x1d\x1b\xa2\x99\x65\xe4\x61\xc1\xf1\x61\x49\xbc\x74\x3b\xc4\x80\xd2\xec\xb9\xba\x15\xe1\x09\x2d\x88\x98\x50\xc1\xd3\x92\x14\xcc\x33\x19\x77\x08\xe1\x86\xc2\x59\x38\x54\x80\x3b\x64\x0f\xd9\x7e\x99\x0e\x35\xf5\x49\x7e\x2c\xa2\xca\x31\x89\x34\x64\x96\x42\x1f\xba\x3a\x49\x65\x4c\xed\x1c\x8b\x41\x33\x88\xdf\x6d\x41\xec\x59\xb5\xaf\x9f\xc6\xc8\x2e\xc6\x07\xad\xff\x58\x10\x83\xe4\xdc\x4d\x39\xbf\xbc\xee\x1d\x81\xc9\x94\x92\xca\x85\x6d\xcb\x7e\xaf\xed\xbe\xbc\xc2\x18\x7f\xc9\x4c\x09\x80\x53\x32\x6b\x29\x68\x2c\x84\xce\x14\x9f\xb2\xf9\x44\x2c\x49\xb1\x2b\x6d\x87\x6e\x84\x5b\xbf\xc2\x24\x84\x37\xb8\xc2\x1b\xdf\x84\xdd\x75\x64\xae\x82\x99\x25\x61\x68\xf8\xce\xcb\x19\x4e\xfd\x22\x05\xd3\xb2\xfb\xe8\x97\x8e\xdc\xe6\xc1\xdc\x74\x79\x98\xcd\x37\xcd\x1b\x43\xe1\xd3\x0d\xa0\xb3\x79\x05\x32\xdf\xd0\xe7\x1b\x88\x35\x86\x30\xc7\xd8\x65\x29\xf3\x43\xd0\xe9\xaa\x5d\x1b\x71\x8a\x83\x8a\xee\x77\xa8\xb1\xda\x7a\xe2\x8e\x62\x2b\x6f\x4a\x87\x32\x6a\x6d\x55\x3b\x76\x55\xd9\x2b\x0e\xe5\xd5\xd1\x41\xb6\x73\x6b\xb6\x70\x43\x99\x1e\x68\xec\xfa\x25\x6c\x17\x61\xbb\x98\x70\x51\x96\x59\xca\x1f\x02\xb8\x68\x73\x58\x50\x89\xc2\xb6\xb8\x2a\x76\xff\x1d\x31\xca\x78\xc2\x94\x9c\x12\x58\x03\x4d\x31\xb9\x6b\x5c\xb0\xb7\x5b\x7d\x70\x7b\xd0\x72\x85\xdf\xe1\x57\xff\xd0\x62\x60\x32\xdd\xdd\x39\xed\xde\x6b\x1c\xe5\xb8\x7b\xbe\x71\x32\xd7\xca\x4b\x10\x9f\xe3\xfc\x43\x10\xf7\xb1\x5d\x88\x03\x69\xa1\x88\x89\xd7\x68\xf8\x26\xd1\x70\xc8\x11\x2d\x1d\xca\x29\x1e\x89\xb5\x68\x96\xd6\xfd\x75\xf2\xd0\xef\x93\xd7\x1d\x32\xc2\x2d\xa9\x4e\xcb\x89\xd6\x3c\x05\xc7\x0e\x3c\xf6\x72\x5c\x47\x91\x55\x47\x3c\x5f\x3d\x1e\xf7\x66\x31\xb8\x5f\xdf\xf4\x14\xab\xb5\x4a\xea\x10\xb0\x48\xfa\x36\x9f\x5c\x2f\x0c\xdc\x86\xc4\x78\xe5\xfe\xe6\xa5\x80\x2f\x00\xb6\x70\xdd\x56\x09\x34\x55\x29\xfb\xd9\x59\xde\xfb\x76\x79\x13\x8d\xc1\xfa\x21\x60\x20\x99\x92\xe6\xfc\x4e\xed\x7b\x1d\xf7\x54\x16\x7a\x3e\x72\x70\x52\x48\xdb\x5e\x29\xd4\xfb\xee\xaf\xae\x87\xef\xf3\x8f\xcb\x5e\x9f\xd6\x7b\xab\x3e\xd8\xe8\xbb\x9c\x83\x75\xbf\x55\xdb\x5e\x5e\x76\xb6\x25\x6e\x42\xb8\xdf\xf6\xf4\xbe\x53\x7b\x2c\x16\xf0\x18\xd5\x8d\x20\x25\x1f\xb0\x29\x09\xb9\x28\x1e\x52\x0e\xb0\x71\x8d\xdf\xf7\x30\x76\x15\xe3\xb7\x5a\xfd\x08\xb1\x5c\x11\xe0\xaa\x23\xce\x57\x7f\xb3\x27\x1f\x4c\xac\x77\x4d\xed\x7d\x36\x27\xa3\x88\xa9\x83\x9d\x47\x98\xc1\x2e\x2d\x33\xce\x81\x7c\x70\x3f\xed\x74\x64\x45\x8c\xa5\x8c\x96\x33\x5c\xa3\x8c\x71\x2e\xe3\x03\x67\x8c\x73\xad\x63\x42\xd5\x75\xc6\xd8\x3a\x7c\xe8\x3c\xa3\xdc\x04\xd2\xc2\xcf\xe3\x8e\x3a\x82\xf8\x49\x9b\xd5\x6c\x81\x73\x23\xc5\x60\xa7\xe4\xe4\xc5\x6e\x6b\x74\xff\x7d\x43\x3a\x3f\xe6\x3f\x21\x96\xf5\xea\x5b\x1b\xf6\x09\x6d\x15\x5b\xf2\xb6\x57\x5a\x30\xf4\x29\x23\xdb\x71\x6c\xb4\xff\x20\xfa\x78\x5c\x56\x4a\xd2\x6e\x27\x84\xbe\x8b\x69\xd6\x5a\xa5\x30\x50\xde\xe9\xf4\x73\x4d\xcb\xd3\xb6\xf3\x73\xcd\xad\xce\xea\xc5\x8f\x0b\xbf\xe2\x85\x5b\x17\xd4\x9f\x50\xd7\x4e\x6b\xb5\xec\xbe\x93\x0f\x98\xb3\xed\xc6\xff\xfc\xec\x39\xb1\x75\xdc\xc8\xcf\x7f\xed\xc6\xba\xc0\x3b\x14\xcc\x5f\xad\x7a\xd9\x8f\xff\xe3\x65\xcb\x2f\xcd\x57\x22\x2f\xf4\xd0\x1f\xce\x3b\x03\xa0\xa6\x72\x22\xd2\xd7\x7a\xb5\xdb\xda\x33\xb4\xde\x02\xb6\xb7\xe0\x1e\xb8\xff\x79\xdf\x71\xdf\x94\xeb\x31\x93\xad\x97\x31\x07\x0c\x78\xfc\x4e\xe7\xf0\x31\x7d\x75\xe6\xbe\xd1\xf7\xcf\xbf\x3c\x17\x7f\xdc\x55\xd6\x44\x35\x48\xda\x5d\x67\xd3\x67\x26\xa3\x30\xbe\xd3\xa2\x72\x9f\xdd\xb8\xb5\x7f\xd0\x86\x8a\x37\x04\xfd\x7e\x23\xf5\xc2\x9f\x35\x39\x69\x2e\x9e\x2f\xfe\x1b\x00\x00\xff\xff\x22\xd5\x04\x95\xb0\x35\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 13744, mode: os.FileMode(420), modTime: time.Unix(1536604713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
