// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x73\xdb\x36\x12\x7f\xcf\xa7\xd8\xe1\xdd\xcc\xa5\x33\x8e\x9d\xe6\x5e\x6e\xfc\x74\x1a\xdb\x97\x6a\xd2\x38\x1e\xcb\x69\x1f\xae\x1d\xcd\x8a\x5c\x49\xa8\x41\x80\x05\x40\x39\xca\x8d\xbf\xfb\x0d\x00\x52\x22\x29\x92\xa2\xe9\xc4\x66\x13\xf5\xa1\x91\x48\x60\xb1\xff\xf0\xc3\xee\x02\x90\xff\xf7\x02\x20\xd0\x77\xb8\x58\x90\x0a\x4e\x21\x78\x73\xfc\x3a\x38\xb2\xcf\x98\x98\xcb\xe0\x14\xec\x7b\x80\xc0\x30\xc3\xc9\xbe\x3f\xe3\xa9\x36\xa4\xe0\x3d\x0a\x5c\x90\x82\xd1\xbb\x09\xfc\x44\x3c\xb1\x1f\xaf\xc6\xae\x2b\x40\xb0\x22\xa5\x99\x14\xb6\xc3\xea\xf5\xf1\x8f\x19\x4d\x80\x20\x94\xc2\x60\x68\x36\x84\x01\x02\x81\xb1\xa3\xfc\x9e\x85\x4b\x24\x0e\xbf\x90\xa0\xcf\x0c\xb3\x1e\x00\x41\xaa\xb8\x7d\xbf\x34\x26\xd1\xa7\x27\x27\x0b\x66\x96\xe9\xec\x38\x94\xf1\x89\xc6\x58\xa7\x62\xf1\x2a\x14\xa1\x39\x09\x63\x7c\x85\xb7\x7a\xdb\x8f\x62\x64\xae\x67\xbc\xf2\x24\xff\xbd\xb0\x4f\x6c\xcf\xc0\xb5\xb9\x7f\x01\x70\xef\x84\xd5\xe1\x92\x62\xd2\xc1\x29\xfc\xd7\xf3\xe9\x06\xcb\x99\xb6\x5f\x6c\x8f\xdf\x5d\xdb\x50\x0a\x9d\x96\x1a\x63\x92\x70\x16\xa2\x61\x52\x9c\xfc\xa1\xa5\xd8\xb6\x4d\x94\x8c\xd2\xb0\x63\x5b\x34\x4b\xbd\xd5\xf8\x09\x26\xec\x64\xf5\xe3\x49\xe8\x15\x5e\xd4\xd8\x82\x8a\x0a\xb4\xec\xa7\x71\x8c\x6a\x6d\x65\xfd\x95\x71\x0e\x8a\x8c\x62\xb4\x22\x30\x4b\x02\x6d\xd0\xa4\x1a\xe4\x1c\x10\x32\x62\x80\x22\x02\x66\x34\xdc\xa6\x33\x0a\xa5\x98\xb3\x05\xcc\xa5\x82\x50\x0a\x41\xa1\x61\x2b\x66\xd6\x1b\x3d\x02\x04\x32\x21\xe5\x58\x1e\x47\x76\x8c\xb7\x64\x32\x37\x28\x36\x52\xa4\x13\x29\x34\xe9\x12\x6f\x00\xc1\x9b\xd7\xaf\x2b\x8f\x00\x82\x88\x74\xa8\x58\x62\x32\x2f\x29\x10\xf2\x12\x59\x83\xe0\x4e\x37\x80\xe0\xef\x8a\xe6\xb6\xc7\xdf\x4e\x22\x9a\x33\xc1\x2c\x05\x6d\x8d\x8f\xb7\x7a\xcb\xd8\x35\x25\x7c\x1d\x94\xfa\xde\xbf\xa8\xfb\x7c\x5f\x90\x20\x41\x85\x31\x19\x52\x5b\x7b\xf9\xff\x2a\xbc\xe7\x1e\xeb\xfe\x3d\x6a\x95\xeb\x12\x63\xb2\xaa\xb7\x86\xc8\x95\x6f\x24\xcc\x08\xb8\x94\xb7\x14\x41\x9a\x1c\x57\x49\x30\xd7\xf3\xcf\x94\xd4\xba\xfa\x4a\xd1\x9f\x29\x53\x64\xad\x30\x47\xae\xa9\xf2\xda\xac\x13\xc7\x98\x36\x8a\x89\x45\x51\xfc\xfb\xa3\xfd\xe2\x84\x8a\x22\x12\x86\x21\xd7\xc7\x98\x24\x53\x16\xed\x11\xee\x66\x49\x30\x4a\x92\x71\xe4\x9c\x67\x74\x35\x86\x51\x18\x92\xd6\x83\x94\xc8\x90\x40\x61\x3a\x48\x74\xe3\x1a\x6e\x44\xc2\xe1\x8a\x94\xa0\xd6\x77\x52\x75\x31\xd3\x55\xd6\xf4\xaf\x20\x96\x4e\x67\x1b\xfe\xbb\x39\xe1\xa4\xd0\xe3\x59\x24\xdc\x7c\xfe\xbd\x00\x27\x06\x17\x55\x20\xc9\x97\xcf\x6d\xe7\xdf\x5f\x54\x94\x14\x44\xc4\xc9\x50\x3b\xc0\xfb\x36\x5b\x40\x6f\x01\xeb\x73\xd7\x74\x98\x78\x5d\xe2\x6d\x28\x90\xfd\xeb\x12\x0d\x30\x5d\x84\xec\x7f\x68\xb0\x1d\x2d\x72\x47\xa4\x8d\x92\xeb\x41\x4e\x9c\x03\x68\xff\x05\xd0\xed\x00\xda\xdf\x22\x68\x27\xe9\x9e\x90\x3c\x51\x72\xc5\x6c\x4e\xd4\x09\xb4\xcf\x14\xe1\x50\x41\xbb\xc4\xdb\x93\x80\xf6\x4c\x46\x3b\x66\xf7\x1e\x51\xf7\xa6\xe0\x10\x46\xa5\x55\x7f\xf8\x02\x32\xbf\xd7\x8b\x2e\x12\xf7\xf7\xaa\x17\x05\x85\x55\xf3\xc0\x13\x4c\x8d\xd4\x21\x72\xeb\xcd\x85\x9c\x70\xaf\x03\x92\xc0\x19\xdf\x26\x21\x45\x32\xcd\x7e\x78\xe1\x3a\x65\x9c\x8e\xea\xbb\x0c\xc0\x25\x9b\xd8\xfc\x4e\xbc\xb3\x49\xfc\xe7\x75\x54\xce\xb4\xe9\x57\xb5\x40\xb0\x7d\x6d\xda\x9c\xd1\xd2\x9d\x8a\x11\x3f\xdb\x01\x87\xe5\x98\x65\xe6\x9e\xc4\x1d\x0f\x01\xe1\x21\x20\x1c\x82\x58\xdf\x67\x40\xd8\x8a\x88\x16\x96\xa9\x1f\x24\x0a\x19\x11\x84\x32\x2d\xf9\x7e\x33\x14\x5e\xca\x88\xce\xaa\xad\x07\x85\x87\x1b\x0e\x87\x92\xf6\x1f\x2a\xb5\x43\x91\xe8\x80\xf1\x07\x8c\x1f\x32\xc6\x77\x4f\xfa\x1d\xe0\x6f\x13\x7e\xdd\x0d\xc6\x27\xb6\xd7\x30\x73\xff\x22\x6b\xdf\x49\x72\x55\x14\xf9\x79\x13\xaa\x34\x59\x28\x8c\x7a\x06\x10\xb8\x42\xc6\x5d\x05\x20\x23\x53\xde\x11\xee\x14\x55\x7c\xcc\x7a\x0e\xcc\x29\x77\x19\x3c\xc4\x14\x87\x98\xe2\x10\x53\x1c\x62\x8a\x6f\x31\xa6\xc8\xe0\xbb\x13\x74\x67\x78\x38\xcc\x58\xa2\xcc\xdc\x77\x12\x4d\x94\x85\x7e\x9e\x78\x62\x7b\x38\xef\x41\x71\x44\xaa\x04\x64\x5d\x81\x89\xb9\x54\xb1\xf3\x34\xc0\x99\x4c\x0d\x60\xc2\x40\x93\x5a\xed\x0b\x25\x7e\xf1\x14\xc6\x5b\x02\x03\x73\xcb\x2d\x8f\xbd\x5c\xb2\x8f\x7d\x36\xc7\x10\x0b\xdc\x6c\x0f\x02\x96\xf6\x9e\x46\xef\x26\x93\x84\xc2\xd1\xbb\xc9\x58\x68\x83\x22\xa4\xb7\x4a\xa6\x49\xd1\x96\x39\x50\xc9\xd9\x1f\x14\x6e\x97\xbc\x20\x51\xd6\x1a\x86\x55\x94\x9b\x4f\x8e\x92\xba\x2b\x60\x77\x54\x7a\x97\x1f\x05\xb5\xd8\x2b\x0a\x11\xce\xc2\x71\x52\xaf\x15\x4f\xef\xe1\x63\xe4\x52\x82\x6d\x0d\x2f\x27\x06\x45\x84\x2a\x9a\x9e\xbf\x99\xae\xde\x1c\x01\x99\xf0\xf8\x87\xfa\x21\x63\x26\xa6\x7f\xa6\x28\x0c\x33\xeb\xa6\xa1\x99\x30\xb4\x28\x79\x2c\x40\xe0\x1d\x33\x7b\xfd\xcf\x37\x0d\x8c\xbd\x67\x82\xc5\x69\x0c\x22\x8d\x67\xa4\xac\x0a\x58\xc6\xaa\x86\x97\x11\xcd\x31\xe5\x46\xdb\x60\xef\x33\x29\x59\x64\x71\x07\xf1\x77\x65\x75\x8a\xd4\xe0\xbc\xc1\x02\xbd\x93\x1d\x45\x54\x37\x58\x50\x9a\xe2\x75\xbe\x72\xe3\x3d\xb2\xb7\x7f\xdc\x52\xa3\xfe\xda\xdd\x03\x17\x60\xfb\xd6\x5a\x67\x85\x3c\xed\xe9\x75\xb8\x00\xdf\xbb\x8b\x4e\xad\xf0\x80\xca\x3b\xea\x89\xeb\x07\x09\x32\xa5\xc1\x2c\xd1\xe4\x9b\xa2\x6b\x99\x5a\x53\x85\x68\x68\x21\x15\xfb\x4c\xa0\x48\xcb\x54\x59\x63\x5a\xbd\xaf\x18\xdd\x41\x28\x85\x96\x9c\x45\x68\x28\x82\x19\xe3\x7c\x13\x06\xe4\xda\x6f\xd9\x87\x1b\x7d\x4e\x15\x15\x1e\x5d\xca\xe8\x19\x67\x6e\x9e\x97\xb8\x72\x44\xcb\xb4\x7d\xf2\x39\x64\x19\xd2\x2e\x86\x2b\xee\x4f\xd7\xf3\x86\x9f\xbe\x2a\x6f\xf8\xe9\x81\xbc\xd5\xae\xb9\x95\xd5\xa4\x66\xf5\x7b\x84\xfd\x17\xcc\x4c\x77\x17\xf3\xee\x6e\x60\x01\xdc\xe0\x02\xa4\xf0\xf8\xcd\x0c\x28\x4a\xa4\x66\x46\xaa\x86\x79\x6b\x87\x0c\x65\x1c\x33\xd3\x7b\xc4\x25\xea\xe5\x66\xc9\x60\x06\x32\x72\x8d\xc3\x19\x45\x34\xd5\x06\x4d\x3f\x5f\xff\x75\x49\x66\x69\x2d\xa8\x40\x48\xe3\x46\xb5\x14\xe1\x0e\x35\x84\x9c\x50\xc0\xdd\x92\x04\xcc\x52\xc6\x1b\x98\xb0\xaf\xa2\x69\xd4\x97\x81\x73\x34\x6e\xb2\x39\x32\x0d\x62\xca\x47\xd9\x31\xf3\x2a\x3b\xc8\x42\x42\xaa\x29\x72\x68\x26\xe3\x84\x71\xaa\x1f\x31\x7b\xa9\x7a\x8d\x77\x96\x75\x76\x43\xd5\xd3\x4f\x38\x1a\xeb\xe3\xbd\xe8\x5f\x65\x9d\x81\x19\x6f\x26\x3f\x9e\x4f\x5f\x4f\x40\xa5\x42\x30\x61\xdd\x76\xdf\xec\xf3\x11\x9d\xc3\xde\x0c\x95\x27\xa4\x56\x2c\xa4\x51\xe8\x8b\xb0\x8f\x98\x7c\x21\x67\x24\x8c\xcd\x50\xfb\x4e\x84\x33\x47\x61\x1c\xc1\x4b\xbc\xc5\x53\x57\x4b\x39\x6f\x08\x66\xb2\xc1\x34\x85\x8a\xfa\xcf\x3c\x3f\xe0\xc4\x11\xc9\x06\xcd\x8b\x08\xdd\x22\x14\x3b\x79\xd0\xab\xce\xbb\xd9\x6c\x5d\xad\x6d\x85\x2e\x02\x01\xb4\x3a\x2f\xac\xa2\x2f\xe9\xd3\x29\x70\x89\x11\xcc\x90\xdb\xc0\x45\xfd\x10\x34\x9a\x6a\x5b\x0d\x78\x8c\x81\xb2\x22\x56\x5f\x65\xd5\x95\xb6\x1a\x82\x5b\x5f\x5b\xea\x3b\x50\x6d\xc5\xa9\x61\x56\xe5\x25\x9f\xbe\x63\x35\x14\x82\xea\x47\xab\x56\x62\xfa\x0e\xda\x52\x9f\xe9\x16\xc3\x59\x0f\xdb\xfa\x84\xf5\xb2\x54\x93\xbf\xb0\x64\xbd\xcd\x62\x41\xc1\x0b\xeb\xfc\x2a\x9b\xfd\xe7\x64\x90\xf1\xb1\xa1\xf8\x31\x8e\xd5\x53\x15\xe3\xf3\x4a\x29\xb8\x5e\xeb\x8f\x0e\xea\xf6\x8e\xe0\x2f\x84\x4d\x63\xd2\x1a\x17\xfd\xc6\x1a\x45\x91\x4b\x53\x91\xd7\x94\x02\xca\x97\xce\xf6\xb2\xb3\xbd\x83\xd6\x73\x7d\xdf\x1e\xd7\x2f\x5c\x67\x73\x0b\xa0\xbb\xcd\x66\x3f\x76\xd4\x49\x95\x81\xd6\x23\xa1\xd9\x82\xe2\x3b\x36\x7b\xff\x3e\x4d\xb4\x2c\x5c\xd9\x10\x07\x7f\x1d\x94\xbf\x0e\xd9\x55\x26\x55\xde\x9a\xd4\x13\x90\x48\xe3\x52\x9d\x2a\x98\xdc\x8c\x6e\x3e\x4e\xa6\x1f\x2f\x27\x57\x17\x67\xe3\xff\x8c\x2f\xce\x8b\x95\xb9\xab\xeb\x0f\xbf\x8c\x27\xe3\x0f\x97\xe3\xcb\xb7\xc5\xe7\xd7\x1f\x2f\x77\x1e\x5d\x9c\x7d\xb8\x3c\x1b\xff\x5c\x79\x3c\xb9\xf9\x70\x75\x55\x79\x76\x71\x7d\xfd\xe1\xba\xf8\xe0\xfc\xe2\xed\xf5\xe8\xfc\xe2\x3c\x97\x7a\x53\xfa\x0c\xb2\x9a\x8a\xdb\x20\x6f\xe6\x74\xab\xd0\x57\xb0\xdb\xec\x14\x2e\xa5\x01\x4d\xe6\x37\x01\xaf\xa0\x28\xd2\x29\xb8\xe5\xb1\xf0\xc4\x59\x83\x80\x89\x88\x85\x68\xa8\x74\x1f\xc8\xe2\xcd\x8c\xec\xba\xe3\xc3\x9d\xe8\xd8\x11\xcc\x74\xe1\x69\x65\x5f\x5a\xc9\x2c\xd1\xd2\x21\x91\x93\xf1\xf7\x72\x35\xcc\x53\xce\xd7\x90\x6a\x9c\x71\xca\x48\x6f\x75\x9a\x91\xdf\x3e\xa8\x19\x02\x0d\x68\x19\x13\xdc\x49\x75\x6b\x09\x62\x68\xd8\x8a\xf8\x3a\xe3\x3a\x92\x82\xf2\xac\x2f\xe3\xe5\x08\x74\x1a\x2e\x01\x75\xb6\xc1\x90\x2f\xaa\x31\x3a\x4e\x5d\xf6\x14\x11\x68\x39\x37\x77\xa8\x32\xae\x72\x93\x7a\x96\xf2\x6f\xdd\x34\xe7\xaf\xb0\x45\x8e\x8e\x73\x03\x4f\xc4\x7d\x6c\xa5\x10\xa3\x15\x03\x52\xe1\xf5\xe3\x08\xe4\x6e\xe3\x69\xe4\xdf\x5a\xc9\x64\xd5\x7d\x6d\x63\x09\xe5\x14\x64\x15\x22\x6d\xcc\x6a\xa4\x22\x67\x03\x98\xa7\x22\xf4\xb8\xc1\xcc\xba\x36\xb0\xa8\x29\xb8\x3d\x06\xab\xb9\x0c\xab\x65\x81\xee\x28\xe7\xc2\x56\x17\x78\x9f\xa3\x41\x38\x23\xd1\x08\x62\x61\x6d\x8c\xbd\x17\xc9\x76\xe2\xf3\x86\x04\xb1\x1c\xad\xb9\xcc\x77\x3f\xb0\x66\x2f\x77\x73\xb3\x8e\x6c\xd5\x66\x78\x0d\x0c\x66\x4e\xa0\x7d\xe3\x72\x52\x63\xe3\x05\xe4\xb7\xf6\x5f\x9f\xc6\xb8\xe4\x65\x13\x6a\xd6\x65\x31\x55\x51\xf2\xf2\xec\xd4\x97\x72\x9b\xac\x89\x4a\x61\x79\xdb\x29\x60\x86\xe2\x6a\xfb\x46\xe9\x3b\x6d\x0d\x14\x08\xdd\xef\x29\xb2\x67\xdc\xd6\x67\x39\xe5\x32\xf2\x57\x97\xc3\x95\xad\xf7\xf3\x5e\x6e\xd6\xba\x44\x56\xef\xf0\x3c\x67\xe5\x75\xf7\x44\xc8\xe6\x82\x58\x63\x49\xc5\x36\x88\x76\x4b\x36\x9d\xef\x2d\x5d\x65\x04\x1c\x46\x35\x23\x48\x3e\x0e\xe8\x84\x42\x36\xcf\x7e\xac\xa2\x87\x8e\x4b\xe3\x3d\x87\xb2\x8b\xa9\xc1\x46\xaa\x57\xc0\xd9\x2d\x01\xde\x36\xf8\xf9\xed\xbf\xf4\xa3\x8b\xaa\xab\x6d\x41\xee\x5d\x3a\x23\x25\xc8\x50\xc3\x70\x0e\x61\x7a\x9b\x34\x5f\x71\x5a\xd6\x83\x77\x93\x46\x43\x16\xd8\x58\xb2\xc5\x72\x9a\x9d\x11\x63\xbc\xa5\xa4\x3e\x93\x92\x13\x8a\xa6\x92\x7a\xed\xeb\xb6\x5a\x6c\x21\x2e\xf8\x69\xd4\x90\x61\x90\xb1\x71\xcc\x74\x8e\x33\xc5\xc2\xde\x46\xf1\xdd\xb3\xd9\x56\xa9\x5c\x76\x75\x69\xbf\x25\xfc\x08\x5f\x96\xb7\x4f\xad\xd8\x3b\xd4\x45\x6c\xf1\x25\x3b\xa6\x5d\xfc\x43\xba\xa1\xe4\xbd\xfb\xa3\x33\xfb\xfd\xb2\x90\xac\x36\x1b\x21\x72\x15\x98\x6a\x8e\x93\x33\x03\xf9\xfe\x7f\x37\xd3\xd4\xfc\x7c\xc0\xf0\x4c\x73\x26\xd3\x72\xf0\x63\xdd\x2f\xfb\x15\x81\x26\xa8\xff\x2e\x32\xde\x49\x89\x81\x5d\x77\x6c\x31\x7c\xdb\x85\xc7\x81\xac\xea\x0d\x50\x26\x23\xfa\xba\x21\x61\xaf\x3d\xe8\xfd\x61\xd6\x5b\x7f\x24\xc1\x86\xc4\x51\x54\xdc\x00\x05\x29\x7e\x13\x67\xa9\x52\x24\x0c\x5f\x83\x14\xee\x7f\x54\xd8\x5a\x76\xf9\x27\xe7\xf2\x8e\x22\x60\xc2\x2e\x48\x47\x70\xc7\x38\xf7\xc9\xe9\x1d\x33\x4b\x88\x6d\xc2\x65\x96\x28\xe0\x47\x20\x61\xd4\x1a\x38\x0e\x23\x75\xf1\x65\xea\x87\xd7\x63\xda\x6f\x24\x0f\x0f\xa5\x2a\x0b\x48\xcd\x2d\x71\xb7\x90\xf8\xf3\x12\x6d\x8b\x48\x8b\x4e\xea\x2e\xc3\x0e\x4f\x13\xe3\x4a\xbd\xc2\x57\x49\xf4\x5a\xdb\x85\xad\x6d\xb1\xfc\x6a\x53\x7a\x77\x7d\xdd\x3f\x5f\x7f\xae\x5e\xa0\x7e\xa0\x85\x2a\xd7\xf3\xbe\x05\x33\xf5\x46\x77\xb7\xeb\xb9\xb9\x3e\xe1\x80\x2d\x91\x92\xbb\x23\x45\x4d\xbb\xeb\x35\x05\x8c\x2f\x70\x28\xe5\x66\x97\x13\x3f\xd4\xae\x75\x77\x0b\xa2\xce\x92\x1e\x6f\x9b\x69\x34\xf9\xc3\xb7\xe3\x06\xfd\x43\xdb\xc2\xee\xe1\x03\x67\x53\xf9\x5e\xca\xb7\xa0\xc5\xfc\x12\xd1\xd7\xc5\xbc\x4c\x6f\x5d\xca\x40\xcb\xba\x2b\x4e\xfd\xe7\x45\x99\xc2\x8e\x5d\x4b\x27\x84\x07\x68\xcf\x39\x6c\x4e\x5e\xbb\x75\xfb\xc3\xbb\x86\x63\x98\x5e\x8e\x29\xab\x3d\x90\xd6\x62\x9f\xfd\xe7\xda\xea\x39\xcb\x8f\x2a\x15\x5b\x76\x37\xd2\x5c\xaa\x4d\x6d\xa5\x14\x7a\x94\x0d\x54\xbd\xb2\xf7\x9c\x29\x41\x7b\xc5\xfb\x29\x43\x59\x4d\xa8\xc2\x25\xe8\xea\x69\x8c\x9a\x10\xa1\x92\xb1\x4c\xed\x72\xd7\x4b\x0b\xa2\x78\xd0\xd4\x51\x79\xd2\xf5\xd2\x48\x83\xdc\x26\xdb\x4c\x51\xe4\x0f\x70\x76\x83\xee\xdd\x7b\xae\xc3\x9b\xe4\x77\x4b\xc2\xb6\xa2\x8f\xbb\x7c\xdc\x5a\x60\x18\x50\x46\xff\x71\xf7\x6e\xeb\x43\xd5\xdc\xad\x68\xdb\x05\x6c\x76\x96\x81\x1c\x74\xea\xc0\xa6\x7c\xa3\xe7\x0b\x6c\x01\x0e\x66\x6b\x6e\xbf\xb9\x06\x82\xb1\xbb\x9b\x29\x99\xdd\xbe\xe0\x4e\x4a\x59\xe2\x27\xd8\x4a\x69\x19\xf0\xb0\x97\xf2\x85\xf6\x52\xea\xe7\x6e\xbf\xcd\x94\xce\xa6\x1c\xea\x7a\xb2\x67\x0f\x21\x87\xc2\xbf\xf6\xfe\xc1\xe6\xaa\x1d\x7d\x32\xa4\x04\xf2\x73\x19\x16\xee\xda\x55\x6e\x14\xbe\x97\x8a\xb2\x92\x79\xb7\xbf\x7b\xf0\xc0\x3f\x55\x60\xb9\x79\x71\xff\xe2\xff\x01\x00\x00\xff\xff\x8c\x1c\x43\xad\x84\x61\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 24964, mode: os.FileMode(420), modTime: time.Unix(1539384372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
