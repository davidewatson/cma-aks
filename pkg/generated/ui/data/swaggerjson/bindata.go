// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x6f\xdb\x38\xf2\x7f\xcf\x5f\x31\xd0\xf7\x0b\x5c\x17\x68\xe3\x6e\xee\xe5\x90\xa7\x0b\x12\x60\xd7\xc8\x66\x2f\x38\x77\xb7\x0f\x87\xc2\x18\x53\x63\x89\x6b\x89\x54\x49\xca\x59\xf7\x90\xff\xfd\x40\x4a\xb2\x25\x59\x92\x15\x39\x4d\x95\xae\xfb\x12\x37\x22\xe7\x37\x3f\x9c\x19\x8d\xf3\xdf\x33\x00\x4f\x3f\x60\x10\x90\xf2\x2e\xc1\xbb\x38\x7f\xef\xbd\xb5\xbf\xe3\x62\x29\xbd\x4b\xb0\xcf\x01\x3c\xc3\x4d\x44\xf6\xf9\x75\x94\x6a\x43\x0a\xee\x50\x60\x40\x0a\xae\x6e\x67\xf0\x33\x45\x89\xfd\x78\x3f\x75\x5b\x01\xbc\x35\x29\xcd\xa5\xb0\x1b\xd6\xef\xcf\x7f\xcc\x69\x02\x78\x4c\x0a\x83\xcc\x6c\x09\x03\x78\x02\x63\x47\xf9\x8e\xb3\x10\x29\x82\xdf\x49\xd0\x17\x8e\xf9\x0e\x00\x2f\x55\x91\x7d\x1e\x1a\x93\xe8\xcb\xc9\x24\xe0\x26\x4c\x17\xe7\x4c\xc6\x13\x8d\xb1\x4e\x45\xf0\x8e\x09\x66\x26\x2c\xc6\x77\xb8\xd2\xbb\x7d\x14\x23\x77\x3b\xe3\x75\x46\xf2\x9f\x81\xfd\x8d\xdd\xe9\xb9\x35\x8f\x67\x00\x8f\x4e\x59\xcd\x42\x8a\x49\x7b\x97\xf0\x9f\x4c\x4e\xc7\xac\x10\xda\xfe\xc7\xee\xf8\xe4\xd6\x32\x29\x74\x5a\x59\x8c\x49\x12\x71\x86\x86\x4b\x31\xf9\x43\x4b\xb1\x5b\x9b\x28\xe9\xa7\xac\xe7\x5a\x34\xa1\xde\x59\x7c\x82\x09\x9f\xac\x7f\x9c\xb0\xcc\xe0\x65\x8b\x05\x54\x36\xa0\x15\x3f\x8d\x63\x54\x1b\xab\xeb\x47\x1e\x45\xa0\xc8\x28\x4e\x6b\x02\x13\x12\x68\x83\x26\xd5\x20\x97\x80\x90\x13\x03\x14\x3e\x70\xa3\x61\x95\x2e\x88\x49\xb1\xe4\x01\x2c\xa5\x02\x26\x85\x20\x66\xf8\x9a\x9b\xcd\xd6\x8e\x00\x9e\x4c\x48\x39\x91\xa7\xbe\xe5\xf1\x13\x99\x3c\x0c\xca\x8b\x14\xe9\x44\x0a\x4d\xba\x22\x1b\x80\x77\xf1\xfe\x7d\xed\x57\x00\x9e\x4f\x9a\x29\x9e\x98\x3c\x4a\x4a\x84\x32\x8d\xac\x43\x70\x6f\x1b\x80\xf7\xff\x8a\x96\x76\xc7\xff\x4d\x7c\x5a\x72\xc1\x2d\x05\x6d\x9d\x8f\x2b\xbd\x13\xec\xdf\x94\x44\x1b\xaf\xb2\xf7\xf1\xac\xe9\xf3\x63\x49\x83\x04\x15\xc6\x64\x48\xed\xfc\x95\xfd\xab\xc9\x5e\x44\xac\xfb\xf9\xb6\x53\xaf\x5f\x31\x26\x6b\x7a\xeb\x88\xc2\xf8\x46\xc2\x82\x20\x92\x72\x45\x3e\xa4\xc9\x79\x9d\x04\x77\x3b\x3f\xa7\xa4\x36\xf5\x47\x8a\x3e\xa7\x5c\x91\xf5\xc2\x12\x23\x4d\xb5\xc7\x66\x93\x38\xc1\xb4\x51\x5c\x04\x65\xf5\x1f\xdf\x1e\x56\x87\x29\xf2\x49\x18\x8e\x91\x3e\xc7\x24\x99\x73\xff\x80\x72\x1f\x42\x82\xab\x24\x99\xfa\x2e\x78\xae\xee\xa7\x70\xc5\x18\x69\x3d\x4a\x8d\x0c\x09\x14\xa6\x87\x46\x1f\xdc\xc2\xad\x4a\x38\x5e\x95\x12\xd4\xfa\x41\xaa\x3e\x6e\xba\xcf\x97\xbe\x06\xb5\x74\xba\xd8\xca\xdf\x2f\x08\x67\xa5\x1d\xdf\x44\xc3\xed\xe7\x4f\x25\x38\x31\x18\xd4\x81\xa4\xb8\x3e\x77\x9b\x3f\x9d\xd5\x8c\xe4\xf9\x14\x91\xa1\x6e\x80\xcf\xd6\xec\x00\xbd\x03\xac\x6f\xdc\xd2\x71\xe2\x75\x45\xb6\xb1\x40\xf6\xc7\x10\x0d\x70\x5d\x86\xec\xbf\x69\xb0\x1b\x2d\x72\xfb\xa4\x8d\x92\x9b\x51\x1e\x9c\x13\x68\xbf\x02\x74\x3b\x81\xf6\xf7\x08\xda\x49\x7a\x20\x25\x4f\x94\x5c\x73\x5b\x13\xf5\x02\xed\x6b\x45\x38\x56\xd0\xae\xc8\xf6\x22\xa0\xbd\x90\xfe\x9e\xdb\xb3\x88\x68\x7a\x52\x0a\x08\xa3\xd2\x7a\x3c\x3c\x83\xce\x77\x3a\xe8\xa3\xf1\xf0\xa8\x3a\x2b\x19\xac\x5e\x07\x4e\x22\xae\xcd\xb0\x62\x10\xc1\xee\xb5\xd5\x48\x4e\x4b\xf7\xaa\xf1\x7e\xb1\x0c\xc7\x15\x82\x55\xe1\x5e\x24\x06\x4f\xf7\xec\xe9\x9e\x1d\x83\x5a\x7f\xcd\x7b\xb6\x13\x11\x35\xc3\x88\x86\x41\xa2\x90\x3e\x01\x93\x69\x25\xf6\xdb\xa1\xf0\x57\xe9\xd3\x75\x7d\xf5\xa8\xf0\x70\x2b\xe1\x58\xaa\xa9\x53\x03\x6c\x2c\x1a\x9d\x30\xfe\x84\xf1\xaf\x16\xe3\xd3\x24\x50\xe8\x0f\x44\x79\x5c\x23\x8f\x70\x11\x11\xe4\x64\xaa\x6f\x43\x7a\x41\xff\x6f\xf9\xce\xd1\x22\x7f\x21\xe0\x09\xf8\x4f\xc0\x7f\x02\xfe\x13\xf0\xbf\x1e\xe0\xef\xdf\x44\xcb\xe1\xbb\x17\x74\xe7\x78\x38\xce\x1e\x5a\x55\xb8\xbf\x48\x13\xad\xaa\xf4\xb7\xe9\xa2\xed\x06\x53\x9e\x94\x47\xa4\x4a\x40\xbe\x15\xb8\x58\x4a\x15\xbb\x48\x03\x5c\xc8\xd4\x00\x26\x1c\x34\xa9\xf5\xa1\x54\xe2\xf7\x8c\xc2\x74\x47\x60\x64\x61\xb9\x93\x71\x50\x48\x0e\xf1\xcf\x76\x04\xa7\x24\xcd\x6e\x08\xa6\xd2\x77\xbd\xba\x9d\xcd\x12\x62\x57\xb7\xb3\xa9\xd0\x06\x05\xa3\x9f\x94\x4c\x93\xb2\x2f\x0b\xa0\x92\x8b\x3f\x88\xed\xae\x3c\x2f\x51\xd6\x1b\x86\xd7\x8c\x5b\x1c\x8e\x8a\xb9\x6b\x60\xf7\xb6\xf2\xac\x18\x83\xb2\xd8\x2b\x4a\x19\x4e\xe0\x24\x69\xb6\x4a\x46\xef\xe9\x3c\x0a\x2d\xc1\xae\x86\x37\x33\x83\xc2\x47\xe5\xcf\x6f\x2e\xe6\xeb\x8b\xb7\x40\x86\x9d\xff\xd0\xcc\x32\xe6\x62\xfe\x39\x45\x61\xb8\xd9\xb4\xb1\xe6\xc2\x50\x50\x89\x58\x00\x2f\x0b\xcc\xfc\xf1\xdf\x2f\x5a\x04\xbb\xe3\x82\xc7\x69\x0c\x22\x8d\x17\xa4\xac\x09\x78\x2e\xaa\x86\x37\x3e\x2d\x31\x8d\x8c\xb6\xc9\xde\x17\x52\xb2\x2c\xe2\x1e\xe2\xef\xeb\xea\x0c\xa9\xc1\x45\x83\x05\x7a\xa7\x3b\x0a\xbf\x89\x99\x57\x39\xe2\x4d\xb1\xf2\x21\x8b\xc8\xc1\xf1\xb1\xa2\x56\xfb\x75\x87\x07\x06\x60\xf7\x36\x7a\x67\x8d\x51\x3a\x30\xea\x30\x80\x6c\x77\x1f\x9b\x5a\xe5\x01\x55\x16\xa8\x13\xb7\x0f\x12\xe4\x4a\x83\x09\xd1\x00\x09\x57\x12\x6d\x64\x6a\x5d\xc5\xd0\x50\x20\x15\xff\x42\xa0\x48\xcb\x54\x59\x67\x5a\xbb\xaf\x39\x3d\x00\x93\x42\xcb\x88\xfb\x68\xc8\x87\x05\x8f\xa2\x6d\x1a\x50\x58\xbf\x06\x1d\x0d\x50\x77\x84\x1b\x02\x6e\xe6\xfb\xc8\xfd\x04\xbb\x85\x04\x06\x03\x90\x22\x3b\xac\xdc\x80\xa2\x44\x6a\x6e\xa4\x6a\x71\x92\x65\xc9\x64\x1c\x73\x33\x98\x63\x88\x3a\xdc\xe2\x03\x37\x90\x93\x6b\x65\x67\x14\xd1\x5c\x1b\x34\xc3\x82\xe3\x63\x48\x26\xb4\x27\x44\x81\x90\xc6\x71\xb5\x14\xe1\x01\x35\xb0\x88\x50\xc0\x43\x48\x02\x16\x29\x8f\x5a\x84\xb0\x8f\xfc\xb9\x3f\x54\x80\x1b\x34\x0e\x0f\x1d\x99\x16\x35\xe5\x51\x7e\xcc\xa3\xca\x32\x09\x24\xa4\x9a\x7c\x17\xba\x32\x4e\x78\x44\xcd\x1c\xf3\x87\x6a\x10\xbf\xeb\x7c\xb3\x63\xd5\x4c\x3f\x89\xd0\xd8\x18\x1f\x44\xff\x3e\xdf\x0c\xdc\x64\x6e\xca\xf8\x65\xb5\xca\x04\x54\x2a\x04\x17\x36\x6c\x1b\xce\x7b\xe5\xf4\x65\xd7\xf7\xd5\x97\x54\x15\x00\x38\x23\xb5\xe6\x8c\xae\x58\xd6\xdd\x3e\xe2\xf0\xb1\x88\x93\x30\xb6\x1c\x19\x7a\x10\xae\x1d\x85\xa9\x0f\x6f\x70\x85\x97\xae\x70\xbe\x69\xb9\xb9\x72\x66\x9a\x98\xa2\xe1\x27\x2f\x63\x38\x73\x44\x72\xa6\x45\xc5\xd8\xef\x3a\xb2\x87\x07\x33\xd3\x65\x61\xb6\xd8\xd4\x1b\x19\xcc\x5d\x37\x80\xd6\xe6\x25\xc8\x7c\x43\x7f\x5e\x42\x24\xd1\x87\x05\x46\xf6\x96\x52\x3f\x78\xad\xae\xda\x95\x7e\xc7\x38\x28\xef\x58\x0c\x35\x56\x53\x1f\xa3\x25\x93\xc9\x1a\x09\x43\x19\x35\xb6\x17\x5a\x4e\x55\x51\xdf\x0f\xe5\xd5\x52\xf5\x37\x73\xab\x97\xdd\x43\x99\x76\x14\xe3\xfd\x2e\x6c\x1b\x61\xbb\x98\xb0\x51\x96\x6a\xca\x26\xb3\x6d\xb4\x59\x2c\x28\x45\x61\x53\x5c\xe5\xa7\xff\x86\x0c\xf2\x68\x6a\x28\x3e\x26\xb0\x06\x9a\x62\x7a\x53\xeb\xfb\x35\x5b\x7d\x70\xee\xdd\xd0\x59\x6c\xf1\xab\x9b\x7c\x1f\x78\x99\xee\x86\x00\x77\x03\xf4\x07\x39\xee\xe6\xe9\x8f\xe6\x5a\x1a\xcd\x77\x77\x9c\x9b\xcc\xb7\x1f\x9b\x85\xe8\xb8\x16\xf2\x98\x38\x45\xc3\x8b\x44\x43\x97\x23\x1a\x2a\x94\x63\x3c\x12\x49\x56\x4f\xad\xfb\xeb\xe4\xa0\xdf\x5d\x5e\x37\x68\x10\xae\x49\xb4\x5a\x8e\x35\xde\x53\x70\xa8\x9b\xb0\x77\xc7\xb5\x24\x59\x55\xc4\x73\xd9\xe3\x61\x6f\xe6\x0f\xf7\xf3\x9b\x9e\x62\x35\x66\x49\x2d\x02\xe6\x97\xbe\xce\x16\x57\x13\x03\x7b\x20\x31\x5a\xd9\x9f\x59\x2a\xe0\x12\x80\x2d\x5c\x37\x65\x02\x75\x55\x8a\x7a\x76\x9e\xd5\xbe\x6d\xde\x44\xa5\xb0\xda\xa7\xf3\xb8\xa1\xb8\xbe\xbe\x55\xfb\x5e\xbd\x94\x12\xa1\xc7\x03\x5d\x89\x5c\xda\xe6\x4c\xa1\x5a\x77\x7f\x75\x3d\x5c\x9d\x7f\x58\xf6\xea\xb2\xde\x47\xf5\x4e\x07\xdf\xa4\xc9\xd4\xfe\x0a\x6d\x3b\x4d\xda\x5a\x96\xd8\x05\xfe\x7e\xd9\xd3\x7b\xc8\xf1\x3e\x27\xe0\x30\xaa\x1d\x41\x0a\x3e\xa0\x13\x62\x7c\x99\x7f\xb3\x6d\x80\x8d\x2b\xfc\xbe\x85\xb1\xcb\x18\xbf\xd5\xea\x1d\x44\x7c\x45\x80\xab\x96\x38\x5f\xfd\x43\x1f\xdd\x98\x58\xef\x8a\xda\xdb\x74\x41\x4a\x90\xa1\x16\x76\x0e\x61\x06\xbb\xb4\xb8\x71\x3a\xee\x83\xdb\x59\xab\x23\x4b\x62\x84\x3c\x08\xe7\xf9\x4b\x75\x1e\x75\xf4\x18\x17\x52\x46\x84\xa2\xad\xc7\xd8\xf8\xb8\xab\x9f\x51\x1c\x02\xae\xe1\xe7\xab\x96\x3c\x82\xcc\x83\x54\xab\xf9\x12\x17\x8a\xb3\xc1\x4e\xc9\xb6\xe7\xa7\xad\x56\xfd\xf7\x0d\xe9\xac\x87\x7e\x44\x2c\xcb\xd5\x4b\x1b\xf6\x01\x75\x19\x5b\xb2\xb2\x97\x6b\x50\xf4\x39\x25\xdd\xd2\x36\xda\xff\x86\xea\xe1\xb8\x2c\xa5\xa4\xed\x4e\xf0\x5d\x15\x53\xcf\xb5\x0a\x61\xa0\x78\x61\xd2\xcf\x35\x0d\xdf\x35\x1a\x9f\x6b\xae\x65\x5a\x4d\x7e\x6c\xf8\xe5\x5f\x39\x6a\x83\xfa\x23\xf2\xda\x59\x25\x97\xdd\x77\x72\x87\x39\x9b\x46\xb0\xc7\x67\xcf\xa9\xae\xe2\x46\xd6\xff\xd5\x1b\x6d\x03\xaf\x2b\x98\xbf\x5a\xf6\xb2\x1f\xff\x87\xd3\x96\x5f\xea\x63\xfb\x4f\xf4\x50\x6d\x28\xf4\x7b\x70\xd3\xe0\x6b\xde\x75\xf6\xb6\xf3\x60\x6e\xfe\x37\x91\x32\x72\xef\x48\xda\x3a\xc8\x0d\x05\xc6\x33\xbc\x45\xfb\xb0\x2f\x49\xc6\x6a\xdf\xbb\xfb\xad\x22\xe7\x49\x78\xe0\x26\xec\xa0\xd1\x16\x0f\xdf\x4f\x18\x0c\xbf\x7a\x4a\x1d\xb2\x27\x9e\xa6\xea\xa0\xdd\xf7\x60\xc5\x62\x2a\xf2\xeb\x62\x5e\x6e\xb7\x3e\x65\x5a\xd8\x34\xb3\x39\xfc\x5c\x54\x29\xec\xf9\xb5\x32\xf2\x30\x42\x7f\x2e\x61\x3b\x4a\xe2\x12\xb4\x7f\xdd\xb6\xbc\x57\xce\xf4\x98\xf3\xc6\x97\xae\x1d\xfe\x39\xfc\xee\xb6\xfb\x75\x5c\x79\x65\x7f\x27\x2d\xa5\xda\xd6\x3e\x95\xd4\xa3\xea\xa0\xdf\xf6\x27\x7f\x9f\xea\x98\x7e\x15\x5a\x1f\xc9\xf7\x62\xaa\xd0\xa0\x43\xf2\xe7\xeb\xf7\x8d\xa6\x0f\xd7\x81\x93\xfb\x43\x5e\xe3\xea\x9c\xe4\x7e\x7b\xc6\xb6\x49\x55\xe3\x17\xe8\x9b\x74\x30\x3c\x35\x4e\x9e\xa9\x71\xd2\x7c\x76\x87\x75\x4e\x7a\xbb\x72\xac\x37\xd0\x81\x86\x41\x01\x85\xaf\xbb\x59\xb0\x1d\x44\xa4\x3f\x0d\x29\x81\xd1\x8d\x64\xa5\x49\xc4\xda\xbc\xe5\x9d\x54\x94\x4f\x7f\xf6\xfb\x8b\x68\x4f\xfc\x23\x66\x56\x9a\xb3\xc7\xb3\xff\x05\x00\x00\xff\xff\x9d\xfa\x44\x03\x9e\x4d\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 19870, mode: os.FileMode(420), modTime: time.Unix(1537418765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
