// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x6f\xdc\xb8\x15\x7e\xf7\xaf\x38\x50\x0b\x34\x0b\x64\x3d\xd9\xf4\xa5\xf0\x53\x0d\xbb\xd8\x35\xbc\xde\x06\x9d\xec\xe6\xa1\x08\x06\x67\xa8\x33\x12\x77\x24\x52\x21\xa9\x71\x9c\xc2\xff\xbd\x20\x25\x8d\xee\x1a\x59\x4e\x6c\x25\x99\x7d\x89\xd7\x22\x79\xae\xfc\xce\x85\xa4\xff\x77\x02\xe0\xe9\x5b\x0c\x02\x52\xde\x19\x78\xaf\x4f\x5f\x79\x2f\xed\xef\xb8\xd8\x48\xef\x0c\xec\x77\x00\xcf\x70\x13\x91\xfd\x7e\x11\xa5\xda\x90\x82\x1b\x14\x18\x90\x82\xf3\xeb\x25\xfc\x42\x51\x62\x7f\x7c\x73\xe5\xa6\x02\x78\x3b\x52\x9a\x4b\x61\x27\xec\x5e\x9d\xfe\x94\xaf\x09\xe0\x31\x29\x0c\x32\xb3\x5f\x18\xc0\x13\x18\xbb\x95\x6f\x38\x0b\x91\x22\xf8\x83\x04\x7d\xe2\x98\xcf\x00\xf0\x52\x15\xd9\xef\xa1\x31\x89\x3e\x5b\x2c\x02\x6e\xc2\x74\x7d\xca\x64\xbc\xd0\x18\xeb\x54\x04\x3f\x32\xc1\xcc\x82\xc5\xf8\x23\x6e\x75\x39\x8f\x62\xe4\x6e\x66\xbc\xcb\x96\xfc\x67\x60\x7f\x63\x67\x7a\x6e\xcc\xfd\x09\xc0\xbd\x13\x56\xb3\x90\x62\xd2\xde\x19\xfc\x37\xe3\xd3\x11\x2b\x98\xb6\xff\x63\x67\xbc\x77\x63\x99\x14\x3a\xad\x0d\xc6\x24\x89\x38\x43\xc3\xa5\x58\xfc\xa9\xa5\x28\xc7\x26\x4a\xfa\x29\x1b\x39\x16\x4d\xa8\x4b\x8d\x2f\x30\xe1\x8b\xdd\x4f\x0b\x96\x29\xbc\xaa\xb1\x80\xaa\x0a\xb4\xec\xa7\x71\x8c\xea\xce\xca\xfa\x8e\x47\x11\x28\x32\x8a\xd3\x8e\xc0\x84\x04\xda\xa0\x49\x35\xc8\x0d\x20\xe4\x8b\x01\x0a\x1f\xb8\xd1\xb0\x4d\xd7\xc4\xa4\xd8\xf0\x00\x36\x52\x01\x93\x42\x10\x33\x7c\xc7\xcd\xdd\x5e\x8f\x00\x9e\x4c\x48\x39\x96\xaf\x7c\x4b\xe3\x67\x32\xb9\x1b\x54\x07\x29\xd2\x89\x14\x9a\x74\x8d\x37\x00\xef\xf5\xab\x57\x8d\x5f\x01\x78\x3e\x69\xa6\x78\x62\x72\x2f\xa9\x2c\x94\x49\x64\x0d\x82\xad\x69\x00\xde\x5f\x15\x6d\xec\x8c\xbf\x2c\x7c\xda\x70\xc1\xed\x0a\xda\x1a\x1f\xb7\xba\x64\xec\x3f\x94\x44\x77\x5e\x6d\xee\xfd\x49\xd7\xcf\xf7\x15\x09\x12\x54\x18\x93\x21\x55\xda\x2b\xfb\xaf\xc1\x7b\xe1\xb1\xee\xdf\x97\x83\x72\xfd\x86\x31\x59\xd5\x5b\x43\x14\xca\x37\x12\xd6\x04\x91\x94\x5b\xf2\x21\x4d\x4e\x9b\x4b\x70\x37\xf3\x43\x4a\xea\xae\xf9\x49\xd1\x87\x94\x2b\xb2\x56\xd8\x60\xa4\xa9\xf1\xd9\xdc\x25\x8e\x31\x6d\x14\x17\x41\x55\xfc\xfb\x97\x87\xc5\x61\x8a\x7c\x12\x86\x63\xa4\x4f\x31\x49\x56\xdc\x3f\x20\xdc\xdb\x90\xe0\x3c\x49\xae\x7c\xe7\x3c\xe7\x6f\xae\xe0\x9c\x31\xd2\x7a\x96\x12\x19\x12\x28\xcc\x08\x89\xde\xba\x81\x7b\x91\x70\xbe\x22\x25\xa8\xf5\xad\x54\x63\xcc\xf4\x26\x1f\xfa\x35\x88\xa5\xd3\xf5\x9e\xff\x71\x4e\xb8\xac\xcc\x78\x16\x09\xf7\x3f\xbf\xaf\xc0\x89\xc1\xa0\x09\x24\x45\xf8\x2c\x27\xbf\x3f\x69\x28\xc9\xf3\x29\x22\x43\xc3\x00\x9f\x8d\x29\x01\x7d\x00\xac\x2f\xdd\xd0\x79\xe2\x75\x8d\xb7\xb9\x40\xf6\xbb\x10\x0d\x70\x5d\x85\xec\xbf\x69\xb0\x13\x2d\x72\xfb\xa4\x8d\x92\x77\xb3\xdc\x38\x47\xd0\xfe\x0a\xd0\xed\x08\xda\xdf\x22\x68\x27\xe9\x81\x94\x3c\x51\x72\xc7\x6d\x4d\x34\x0a\xb4\x2f\x14\xe1\x5c\x41\xbb\xc6\xdb\x93\x80\xf6\x5a\xfa\x2d\xb3\x67\x1e\xd1\xf5\xa5\xe2\x10\x46\xa5\x4d\x7f\xf8\x0c\x32\xdf\xe8\x60\x8c\xc4\xd3\xbd\xea\xa4\xa2\xb0\x66\x1d\xb8\xc0\xd4\x48\xcd\x30\xb2\xde\x5c\xa9\x09\x0f\x3a\x20\x09\x5c\x47\x65\x11\x52\x5d\xa6\xdf\x0f\xff\xe5\x26\xe5\x9c\x9e\x77\x4f\x99\x81\x4b\xf6\xb1\xf9\x9d\x78\x67\x9f\xf8\xcf\xeb\xa8\x11\xd7\x66\x5a\xd7\x02\xc1\xce\xb5\x65\x73\xbe\x96\x1e\xd5\x8c\xf8\xd5\x12\x9c\x97\x63\xd6\x99\x7b\x12\x77\x3c\x26\x84\xc7\x84\x70\x0e\x62\x7d\x9f\x09\xe1\x20\x22\x5a\x58\xa6\x69\x90\x28\xa4\x4f\xc0\x64\x5a\xf3\xfd\x7e\x28\xfc\x4d\xfa\x74\xd1\x1c\x3d\x2b\x3c\xdc\x73\x38\x97\xb2\xff\xd8\xa9\x9d\x8b\x44\x47\x8c\x3f\x62\xfc\x9c\x31\x7e\x7c\xd1\xef\x00\xbf\x2c\xf8\xf5\x38\x18\x5f\xda\x59\xf3\xac\xfd\xab\xac\x7d\x27\xc5\x55\x55\xe4\xe7\x2d\xa8\xd2\x24\x50\xe8\x4f\x4c\x20\x70\x87\x3c\x72\x1d\x80\x7c\x99\xfa\x89\xf0\xa8\xac\xe2\xf7\x7c\xe6\xcc\x9c\xb2\xcd\xe0\x31\xa7\x38\xe6\x14\xc7\x9c\xe2\x98\x53\x7c\x8b\x39\x45\x0e\xdf\xa3\xa0\x3b\xc7\xc3\x79\xe6\x12\x75\xe6\xbe\x93\x6c\xa2\x2e\xf4\xf3\xe4\x13\xe5\xe5\xbc\x07\xe5\x11\xa9\x12\x90\x4f\x05\x2e\x36\x52\xc5\xce\xd3\x00\xd7\x32\x35\x80\x09\x07\x4d\x6a\x77\x28\x95\xf8\x23\x5b\xe1\xaa\x5c\x60\x66\x6e\x59\xf2\x38\xc9\x25\xa7\xd8\x67\x7f\x0d\xb1\xc2\x4d\x79\x11\xb0\x76\xf6\x74\x7e\xbd\x5c\x26\xc4\xce\xaf\x97\x57\x42\x1b\x14\x8c\x7e\x56\x32\x4d\xaa\xb6\x2c\x80\x4a\xae\xff\x24\x56\x86\x3c\x2f\x51\xd6\x1a\x86\x37\x94\x5b\x6c\x8e\x9a\xba\x1b\x60\xf7\xb2\xf6\xad\xb8\x0a\x6a\xb1\x57\x54\x32\x9c\xc0\x71\xd2\xad\x95\x6c\xbd\x87\xd3\x28\xa4\x04\x3b\x1a\x5e\x2c\x0d\x0a\x1f\x95\xbf\xba\x7c\xbd\xda\xbd\x7e\x09\x64\xd8\xe9\x0f\xdd\x24\x63\x2e\x56\x1f\x52\x14\x86\x9b\xbb\x3e\xd2\x5c\x18\x0a\x6a\x1e\x0b\xe0\x65\x8e\x99\x7f\xfe\xfb\xeb\x1e\xc6\x6e\xb8\xe0\x71\x1a\x83\x48\xe3\x35\x29\xab\x02\x9e\xb3\xaa\xe1\x85\x4f\x1b\x4c\x23\xa3\x6d\xb2\xf7\x89\x94\xac\xb2\xd8\x42\xfc\xb6\xac\x4e\x91\x1a\x9c\x37\x58\xa0\x77\xb2\xa3\xf0\xbb\x88\x79\xb5\x2d\xde\xe5\x2b\x6f\x33\x8f\x9c\xec\x1f\x5b\xea\xd5\xdf\xb0\x7b\x60\x00\x76\x6e\xa7\x75\x76\x18\xa5\x13\xbd\x0e\x03\xc8\x66\x8f\xd1\xa9\x15\x1e\x50\x65\x8e\xba\x70\xf3\x20\x41\xae\x34\x98\x10\x4d\x71\x28\x7a\x27\x53\x6b\x2a\x86\x86\x02\xa9\xf8\x27\x02\x45\x5a\xa6\xca\x1a\xd3\xea\x7d\xc7\xe9\x16\x98\x14\x5a\x46\xdc\x47\x43\x3e\xac\x79\x14\xed\xd3\x80\x42\xfb\x0d\xe8\xe8\x80\xba\x47\x98\x21\xe0\x66\xd5\x46\xee\x07\xe8\x2d\x24\x30\x18\x80\x14\xd9\x66\xe5\x06\x14\x25\x52\x73\x23\x55\x8f\x91\x2c\x49\x26\xe3\x98\x9b\xc9\x14\x43\xd4\xe1\x1e\x1f\xb8\x81\x7c\xb9\x5e\x72\x46\x11\xad\xb4\x41\x33\xcd\x39\xde\x85\x64\x42\xbb\x43\x14\x08\x69\x1c\x55\xbb\x22\xdc\xa2\x06\x16\x11\x0a\xb8\x0d\x49\xc0\x3a\xe5\x51\x0f\x13\xf6\x93\xbf\xf2\xa7\x32\x70\x89\xc6\xe1\xa1\x5b\xa6\x47\x4c\xf9\x28\x3b\xe6\x5e\x65\x89\x04\x12\x52\x4d\xbe\x73\x5d\x19\x27\x3c\xa2\x6e\x8a\xf9\x47\x35\x89\xde\x45\x3e\xd9\x91\xea\x5e\x3f\x89\xd0\x58\x1f\x9f\xb4\xfe\x9b\x7c\x32\x70\x93\x99\x29\xa3\x97\xd5\x2a\x0b\x50\xa9\x10\x5c\x58\xb7\xed\xd8\xef\xb5\xdd\x97\x85\xef\xf3\x4f\xa9\x2a\x00\x70\x49\x6a\xc7\x19\x9d\xb3\xac\xe3\xf6\x88\xcd\xc7\x22\x4e\xc2\xd8\x72\x64\xea\x46\xb8\x70\x2b\x5c\xf9\xf0\x02\xb7\x78\xe6\x0a\xe7\xcb\x9e\xc8\x95\x13\xd3\xc4\x14\x4d\xdf\x79\x19\xc1\xa5\x5b\x24\x27\x5a\x54\x8c\xe3\xc2\x91\xdd\x3c\x98\xa9\x2e\x73\xb3\xf5\x5d\xb3\x91\xc1\x5c\xb8\x01\xb4\x3a\xaf\x40\xe6\x0b\xfa\x78\x06\x91\x44\x1f\xd6\x18\xd9\x28\xa5\x7e\xf0\x7a\x4d\x55\x96\x7e\x8f\x31\x50\xde\xb1\x98\xaa\xac\xae\x3e\x46\x4f\x26\x93\x35\x12\xa6\x12\xea\x6c\x2f\xf4\xec\xaa\xa2\xbe\x9f\x4a\xab\xa7\xea\xef\xa6\xd6\x2c\xbb\xa7\x12\x1d\x28\xc6\xc7\x05\x6c\xeb\x61\xa5\x4f\x58\x2f\x4b\x35\x65\xaf\x53\xac\xb7\x59\x2c\xa8\x78\x61\x97\x5f\xe5\xbb\xff\x92\x0c\xf2\xe8\xca\x50\xfc\x18\xc7\x9a\xa8\x8a\xab\xcb\x46\xdf\xaf\x5b\xeb\x93\x73\xef\x8e\xce\x62\x8f\x5d\xdd\xeb\x9f\x89\xc1\xb4\xbc\x08\x5d\x3e\x22\x3a\x48\xb1\x7c\x53\xf4\x68\xaa\x95\xe7\x49\x2e\xc6\xb9\xd7\x49\xf6\xc7\x6e\x26\x06\xc2\x42\xee\x13\x47\x6f\x78\x12\x6f\x18\x32\x44\x47\x85\xf2\x18\x8b\x44\x92\x35\x53\xeb\xf1\x32\x39\xe8\x77\xc1\xeb\x12\x0d\xc2\x05\x89\x5e\xcd\xb1\xce\x38\x05\x87\xba\x09\xad\x18\xd7\x93\x64\xd5\x11\xcf\x65\x8f\x87\xad\x99\x7f\x6c\xe7\x37\x23\xd9\xea\xcc\x92\x7a\x18\xcc\x83\xbe\xce\x06\xd7\x13\x03\xbb\x21\x31\xda\xda\x7f\xb3\x54\xc0\x25\x00\x7b\xb8\xee\xca\x04\x9a\xa2\x14\xf5\xec\x2a\xab\x7d\xfb\xac\x89\x4a\x61\xbd\x4f\xe7\x71\x43\x71\x73\x7c\xaf\xf4\xa3\x7a\x29\x95\x85\xee\x0f\x74\x25\x72\x6e\xbb\x33\x85\x7a\xdd\xfd\xc5\xe5\x70\x75\xfe\x61\xde\xeb\xc3\x46\x6f\xd5\x1b\x1d\x3c\x4b\x93\xa9\xff\x08\x6d\x7f\xa3\xbe\xb7\x2c\xb1\x03\xfc\x76\xd9\x33\xfa\xa2\xf7\x9b\x7c\x01\x87\x51\xfd\x08\x52\xd0\x01\x9d\x10\xe3\x9b\xfc\x75\xef\x04\x1d\xd7\xe8\x3d\x87\xb2\xab\x18\xbf\x97\xea\x47\x88\xf8\x96\x00\xb7\x3d\x7e\xbe\xfd\x87\x7e\x74\x63\x62\x57\x16\xb5\xd7\xe9\x9a\x94\x20\x43\x3d\xe4\x1c\xc2\x4c\x36\x69\x11\x71\x06\xe2\xc1\xf5\xb2\xd7\x90\x15\x36\x42\x1e\x84\xab\xfc\x50\x9d\x47\x03\x3d\xc6\xb5\x94\x11\xa1\xe8\xeb\x31\x76\x7e\x1e\xea\x67\x14\x9b\x80\x6b\xf8\xe5\xbc\x27\x8f\x20\x73\x2b\xd5\x76\xb5\xc1\xb5\xe2\x6c\xb2\x51\xb2\xe9\xf9\x6e\x6b\x54\xff\x63\x5d\x3a\xeb\xa1\x3f\xc2\x97\xe5\xf6\xa9\x15\x7b\x8b\xba\x8a\x2d\x59\xd9\xcb\x35\x28\xfa\x90\x92\xee\x69\x1b\xb5\x5f\xe9\x1f\xf6\xcb\x4a\x4a\xda\x6f\x04\xdf\x55\x31\xcd\x5c\xab\x60\x06\x8a\x03\x93\x71\xa6\xe9\x78\x6f\x39\x3f\xd3\x5c\xc8\xb4\x9e\xfc\x58\xf7\xcb\x9f\x5d\xf6\x41\xfd\x23\xf2\xda\x65\x2d\x97\x6d\x1b\x79\x40\x9d\x43\xef\x2e\x66\x12\x2b\x67\x72\x36\x22\xa4\x4f\xda\x15\xf1\xd5\x77\x47\xdd\xbc\xe1\xc7\x2f\xca\x1b\x7e\x9c\xce\xdb\x93\x16\x01\x59\xd3\xe4\xe1\x15\xd6\xf0\x63\xa8\xf9\xed\xf7\x06\x14\x77\x3c\x50\x73\x90\x9c\x1d\xd5\x0c\xc1\xf1\x80\x4e\xba\xde\xe1\xcc\x4f\x13\x57\xba\x1e\xe1\xb3\x93\x1a\x7d\xa7\x6d\x88\x18\x0a\x3b\x5f\xac\xce\x68\x47\xaa\xc3\x05\xc6\xaf\xcd\xb7\x5b\x0f\xb4\x50\xe3\x65\xc0\xb7\x60\xa6\xc9\x88\xee\x7a\xf0\xfb\x9b\x9b\xee\xf6\x70\x22\x65\xe4\x4e\x33\xfb\xce\x7a\x3a\x5a\x01\x9f\x01\x37\xdf\xb6\x39\xc9\x48\xb5\xad\xdb\x6e\xea\x3a\x4b\xc2\x2d\x37\xe1\xc0\x1a\x7d\xfe\xf0\xed\xb8\xc1\xf4\x24\xb1\xd2\xcb\x7e\xe0\x6e\xaa\x5f\x89\xfd\x16\xb4\x58\xdc\x5f\xfe\xb2\x98\x97\xeb\x6d\x4c\x43\x25\xec\xba\x5d\x3d\x7d\x5f\xd4\x57\x68\xd9\xb5\x76\x39\x69\x86\xf6\xdc\xc0\xfe\xd2\x97\x8b\xdb\xff\xbe\xee\xb9\x01\x92\xc9\xb1\xe2\x9d\xd7\x23\x06\xec\x73\xf8\x96\x45\x37\x67\xc5\xc1\x79\x75\xe4\x78\x23\xd9\xfc\xb0\xe8\x52\xd4\x52\x8f\xba\x81\x9a\xaf\x05\x9e\xb3\x0c\x18\xee\x1d\x3f\x65\x2a\xab\x09\x15\x0b\x41\x37\xcf\x06\x3b\x52\x84\x6a\xd4\x94\x3e\xad\x6c\xb8\x9b\xa4\x85\xe2\x66\xda\x3e\x68\x3e\x6d\xbc\x34\xd2\x60\x64\xcb\x56\xae\xc8\xcf\x6a\x8c\x71\xd0\xdd\x7e\x62\x33\xbf\x4d\x7e\x1b\x12\x0e\xb5\x4f\xdc\xbb\xa7\x59\x95\xea\xbf\xb7\xdf\xce\x3c\x54\x97\xe3\x7a\x9c\x63\x10\xa5\x85\xf5\x05\xb2\x74\x21\x4a\xfd\xc6\xf0\x67\x38\x31\x9b\xcd\x49\xd6\x61\x73\xcd\x04\x48\xdb\x67\x0f\xb9\xdd\x3e\xe3\xc1\x43\x5d\xe2\x27\x38\x79\x18\x20\x78\x3c\x7a\xf8\x4c\x47\x0f\xdd\x7b\x77\xda\xd9\xc3\x68\x53\xce\x35\x68\x1c\x68\xb9\x17\x50\xf8\x75\xb7\xdb\xf7\x57\xf9\xe9\xa3\x21\x25\x30\xba\x94\xac\x72\x97\xbf\xf1\x62\xe1\x46\x2a\xca\xdf\x4f\x8c\xfb\xbb\xca\x0f\xfc\x53\xc8\x96\x9b\x93\xfb\x93\xff\x07\x00\x00\xff\xff\x2d\x5e\x45\xee\xe4\x59\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 23012, mode: os.FileMode(420), modTime: time.Unix(1538170614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
