// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x2e\x90\x26\xdd\xde\xcb\x21\x4f\x17\x24\xb9\xae\xd1\x6d\x1a\xc4\xe9\xee\xc3\xed\xc2\x18\x4b\x63\x9b\x1b\x8a\x54\x49\xca\xa9\x7b\xc8\x77\x3f\x90\x94\x6c\x49\x96\x64\x45\x69\x13\xb5\xf5\x3e\x6c\x6d\x89\x1c\xce\x3f\xfe\x38\x33\x24\x9d\xff\x1d\x00\x04\xfa\x0e\xe7\x73\x52\xc1\x09\x04\xaf\x8f\x5e\x05\x87\xf6\x19\x13\x33\x19\x9c\x80\x7d\x0f\x10\x18\x66\x38\xd9\xf7\x67\x3c\xd5\x86\x14\xbc\x43\x81\x73\x52\x70\xfa\x76\x0c\xbf\x10\x4f\xec\xc7\xab\x91\xeb\x0a\x10\x2c\x49\x69\x26\x85\xed\xb0\x7c\x75\xf4\x73\x46\x13\x20\x08\xa5\x30\x18\x9a\x35\x61\x80\x40\x60\xec\x28\xbf\x63\xe1\x02\x89\xc3\x6f\x24\xe8\x33\xc3\xac\x07\x40\x90\x2a\x6e\xdf\x2f\x8c\x49\xf4\xc9\xf1\xf1\x9c\x99\x45\x3a\x3d\x0a\x65\x7c\xac\x31\xd6\xa9\x98\xbf\x0c\x45\x68\x8e\xc3\x18\x5f\xe2\xad\xde\xf4\xa3\x18\x99\xeb\x19\x2f\x3d\xc9\x7f\xcf\xed\x13\xdb\x33\x70\x6d\xee\x0f\x00\xee\x9d\xb0\x3a\x5c\x50\x4c\x3a\x38\x81\xff\x7a\x3e\xdd\x60\x39\xd3\xf6\x8b\xed\xf1\xa7\x6b\x1b\x4a\xa1\xd3\x52\x63\x4c\x12\xce\x42\x34\x4c\x8a\xe3\xbf\xb4\x14\x9b\xb6\x89\x92\x51\x1a\x76\x6c\x8b\x66\xa1\x37\x1a\x3f\xc6\x84\x1d\x2f\x7f\x3e\x0e\xbd\xc2\x8b\x1a\x9b\x53\x51\x81\x96\xfd\x34\x8e\x51\xad\xac\xac\xbf\x33\xce\x41\x91\x51\x8c\x96\x04\x66\x41\xa0\x0d\x9a\x54\x83\x9c\x01\x42\x46\x0c\x50\x44\xc0\x8c\x86\xdb\x74\x4a\xa1\x14\x33\x36\x87\x99\x54\x10\x4a\x21\x28\x34\x6c\xc9\xcc\x6a\xad\x47\x80\x40\x26\xa4\x1c\xcb\xa3\xc8\x8e\xf1\x86\x4c\xe6\x06\xc5\x46\x8a\x74\x22\x85\x26\x5d\xe2\x0d\x20\x78\xfd\xea\x55\xe5\x11\x40\x10\x91\x0e\x15\x4b\x4c\xe6\x25\x05\x42\x5e\x22\x6b\x10\xdc\xea\x06\x10\xfc\x5d\xd1\xcc\xf6\xf8\xdb\x71\x44\x33\x26\x98\xa5\xa0\xad\xf1\xf1\x56\x6f\x18\xbb\xa6\x84\xaf\x82\x52\xdf\xfb\x83\xba\xcf\xf7\x05\x09\x12\x54\x18\x93\x21\xb5\xb1\x97\xff\xaf\xc2\x7b\xee\xb1\xee\xdf\xc3\x56\xb9\x2e\x31\x26\xab\x7a\x6b\x88\x5c\xf9\x46\xc2\x94\x80\x4b\x79\x4b\x11\xa4\xc9\x51\x95\x04\x73\x3d\x3f\xa6\xa4\x56\xd5\x57\x8a\x3e\xa6\x4c\x91\xb5\xc2\x0c\xb9\xa6\xca\x6b\xb3\x4a\x1c\x63\xda\x28\x26\xe6\x45\xf1\xef\x0f\x77\x8b\x13\x2a\x8a\x48\x18\x86\x5c\x1f\x61\x92\x4c\x58\xb4\x43\xb8\x9b\x05\xc1\x69\x92\x8c\x22\xe7\x3c\xa7\x57\x23\x38\x0d\x43\xd2\x7a\x90\x12\x19\x12\x28\x4c\x07\x89\x6e\x5c\xc3\xb5\x48\x38\x5c\x91\x12\xd4\xfa\x4e\xaa\x2e\x66\xba\xca\x9a\x7e\x0b\x62\xe9\x74\xba\xe6\xbf\x9b\x13\x8e\x0b\x3d\x9e\x45\xc2\xf5\xe7\x3f\x0b\x70\x62\x70\x5e\x05\x92\x7c\xf9\xdc\x74\xfe\xf3\xa0\xa2\xa4\x20\x22\x4e\x86\xda\x01\xde\xb7\xd9\x00\x7a\x0b\x58\x9f\xbb\xa6\xc3\xc4\xeb\x12\x6f\x43\x81\xec\xdf\x17\x68\x80\xe9\x22\x64\xff\x43\x83\xed\x68\x91\x3b\x22\x6d\x94\x5c\x0d\x72\xe2\xec\x41\xfb\x1b\x40\xb7\x3d\x68\x7f\x8f\xa0\x9d\xa4\x3b\x42\xf2\x44\xc9\x25\xb3\x39\x51\x27\xd0\x3e\x53\x84\x43\x05\xed\x12\x6f\x4f\x02\xda\x53\x19\x6d\x99\xdd\x7b\x44\xdd\x9b\x82\x43\x18\x95\x56\xfd\xe1\x0b\xc8\xfc\x4e\xcf\xbb\x48\xdc\xdf\xab\x0e\x0a\x0a\xab\xe6\x81\xc7\x98\x1a\xa9\x43\xe4\xd6\x9b\x0b\x39\xe1\x4e\x07\x24\x81\x53\xbe\x49\x42\x8a\x64\x9a\xfd\xf0\xc2\x75\xca\x38\x3d\xad\xef\x32\x00\x97\x6c\x62\xf3\x07\xf1\xce\x26\xf1\x9f\xd7\x51\x39\xd3\xa6\x5f\xd5\x02\xc1\xf6\xb5\x69\x73\x46\x4b\x77\x2a\x46\xfc\x6a\x07\x1c\x96\x63\x96\x99\x7b\x12\x77\xdc\x07\x84\xfb\x80\x70\x08\x62\xfd\x98\x01\x61\x2b\x22\x5a\x58\xa6\x7e\x90\x28\x64\x44\x10\xca\xb4\xe4\xfb\xcd\x50\x78\x29\x23\x3a\xab\xb6\x1e\x14\x1e\xae\x39\x1c\x4a\xda\xbf\xaf\xd4\x0e\x45\xa2\x3d\xc6\xef\x31\x7e\xc8\x18\xdf\x3d\xe9\x77\x80\xbf\x49\xf8\x75\x37\x18\x1f\xdb\x5e\xc3\xcc\xfd\x8b\xac\xfd\x20\xc9\x55\x51\xe4\xe7\x4d\xa8\xd2\x64\xae\x30\xea\x19\x40\xe0\x12\x19\x77\x15\x80\x8c\x4c\x79\x47\xb8\x53\x54\xf1\x21\xeb\x39\x30\xa7\xdc\x66\x70\x1f\x53\xec\x63\x8a\x7d\x4c\xb1\x8f\x29\xbe\xc7\x98\x22\x83\xef\x4e\xd0\x9d\xe1\xe1\x30\x63\x89\x32\x73\x3f\x48\x34\x51\x16\xfa\x79\xe2\x89\xcd\xe1\xbc\x07\xc5\x11\xa9\x12\x90\x75\x05\x26\x66\x52\xc5\xce\xd3\x00\xa7\x32\x35\x80\x09\x03\x4d\x6a\xb9\x2b\x94\xf8\xcd\x53\x18\x6d\x08\x0c\xcc\x2d\x37\x3c\xf6\x72\xc9\x3e\xf6\x59\x1f\x43\x2c\x70\xb3\x39\x08\x58\xda\x7b\x3a\x7d\x3b\x1e\x27\x14\x9e\xbe\x1d\x8f\x84\x36\x28\x42\x7a\xa3\x64\x9a\x14\x6d\x99\x03\x95\x9c\xfe\x45\xe1\x66\xc9\x0b\x12\x65\xad\x61\x58\x45\xb9\xf9\xe4\x28\xa9\xbb\x02\x76\x87\xa5\x77\xf9\x51\x50\x8b\xbd\xa2\x10\xe1\xcc\x1d\x27\xf5\x5a\xf1\xf4\x1e\x3e\x46\x2e\x25\xd8\xd6\xf0\x62\x6c\x50\x44\xa8\xa2\xc9\xf9\xeb\xc9\xf2\xf5\x21\x90\x09\x8f\x7e\xaa\x1f\x32\x66\x62\xf2\x31\x45\x61\x98\x59\x35\x0d\xcd\x84\xa1\x79\xc9\x63\x01\x02\xef\x98\xd9\xeb\x7f\xbe\x6e\x60\xec\x1d\x13\x2c\x4e\x63\x10\x69\x3c\x25\x65\x55\xc0\x32\x56\x35\xbc\x88\x68\x86\x29\x37\xda\x06\x7b\x9f\x49\xc9\x22\x8b\x5b\x88\xbf\x2d\xab\x53\xa4\x06\xe7\x0d\x16\xe8\x9d\xec\x28\xa2\xba\xc1\x82\xd2\x14\xaf\xf3\x95\x1b\xef\x91\xbd\xfd\xe3\x96\x1a\xf5\xd7\xee\x1e\x38\x07\xdb\xb7\xd6\x3a\x4b\xe4\x69\x4f\xaf\xc3\x39\xf8\xde\x5d\x74\x6a\x85\x07\x54\xde\x51\x8f\x5d\x3f\x48\x90\x29\x0d\x66\x81\x26\xdf\x14\x5d\xc9\xd4\x9a\x2a\x44\x43\x73\xa9\xd8\x67\x02\x45\x5a\xa6\xca\x1a\xd3\xea\x7d\xc9\xe8\x0e\x42\x29\xb4\xe4\x2c\x42\x43\x11\x4c\x19\xe7\xeb\x30\x20\xd7\x7e\xcb\x3e\xdc\xe9\xe7\x54\x51\xe1\xd1\xa5\x8c\x9e\x71\xe6\xe6\x79\x89\x2b\x47\xb4\x4c\xdb\x27\x9f\x43\x96\x21\xed\x62\xb8\xe2\xfe\x74\x3d\x6f\xf8\xe9\xab\xf2\x86\x9f\x1e\xc8\x5b\xed\x9a\x5b\x59\x4d\x6a\x56\xbf\x47\xd8\x7f\xce\xcc\x64\x7b\x31\xef\xee\x06\x16\xc0\x0d\xce\x41\x0a\x8f\xdf\xcc\x80\xa2\x44\x6a\x66\xa4\x6a\x98\xb7\x76\xc8\x50\xc6\x31\x33\xbd\x47\x5c\xa0\x5e\xac\x97\x0c\x66\x20\x23\xd7\x38\x9c\x51\x44\x13\x6d\xd0\xf4\xf3\xf5\xdf\x17\x64\x16\xd6\x82\x0a\x84\x34\x6e\x54\x4b\x11\xee\x50\x43\xc8\x09\x05\xdc\x2d\x48\xc0\x34\x65\xbc\x81\x09\xfb\x2a\x9a\x44\x7d\x19\x38\x47\xe3\x26\x9b\x23\xd3\x20\xa6\x7c\x94\x1d\x33\xaf\xb2\x83\xcc\x25\xa4\x9a\x22\x87\x66\x32\x4e\x18\xa7\xfa\x11\xb3\x97\xaa\xd7\x78\x67\x59\x67\x37\x54\x3d\xfd\x84\xa3\xb1\x3e\xde\x8b\xfe\x55\xd6\x19\x98\xf1\x66\xf2\xe3\xf9\xf4\xf5\x18\x54\x2a\x04\x13\xd6\x6d\x77\xcd\x3e\x1f\xd1\x39\xec\xcd\x50\x79\x4c\x6a\xc9\x42\x3a\x0d\x7d\x11\xf6\x11\x93\x2f\xe4\x8c\x84\xb1\x19\x6a\xdf\x89\x70\xe6\x28\x8c\x22\x78\x81\xb7\x78\xe2\x6a\x29\xe7\x0d\xc1\x4c\x36\x98\xa6\x50\x51\xff\x99\xe7\x07\x1c\x3b\x22\xd9\xa0\x79\x11\xa1\x5b\x84\x62\x27\x0f\x7a\xd5\x79\x37\x9b\xae\xaa\xb5\xad\xd0\x45\x20\x80\x56\xe7\x85\x55\xf4\x05\x7d\x3a\x01\x2e\x31\x82\x29\x72\x1b\xb8\xa8\x9f\x82\x46\x53\x6d\xaa\x01\x8f\x31\x50\x56\xc4\xea\xab\xac\xba\xd2\x56\x43\x70\xeb\x6b\x4b\x7d\x07\xaa\xad\x38\x35\xcc\xaa\xbc\xe4\xd3\x77\xac\x86\x42\x50\xfd\x68\xd5\x4a\x4c\xdf\x41\x5b\xea\x33\xdd\x62\x38\xeb\x61\x1b\x9f\xb0\x5e\x96\x6a\xf2\x17\x96\xac\xb7\x59\x2c\x28\x78\x61\x9d\x5f\x65\xb3\xff\x9c\x0c\x32\x3e\x32\x14\x3f\xc6\xb1\x7a\xaa\x62\x74\x5e\x29\x05\xd7\x6b\xfd\xd1\x41\xdd\xce\x11\xfc\x85\xb0\x49\x4c\x5a\xe3\xbc\xdf\x58\xa7\x51\xe4\xd2\x54\xe4\x35\xa5\x80\xf2\xa5\xb3\x9d\xec\x6c\xee\xa0\xf5\x5c\xdf\x37\xc7\xf5\x0b\xd7\xd9\xdc\x02\xe8\x6e\xb3\xd9\x8f\x1d\x75\x52\x65\xa0\xf5\x48\x68\xb6\xa0\xf8\x8e\xcd\xde\xbf\x4b\x13\x2d\x0b\x57\x36\xc4\xde\x5f\x07\xe5\xaf\x43\x76\x95\x71\x95\xb7\x26\xf5\x04\x24\xd2\xb8\x54\xa7\x0a\xc6\x37\xa7\x37\x1f\xc6\x93\x0f\x97\xe3\xab\x8b\xb3\xd1\x7f\x46\x17\xe7\xc5\xca\xdc\xd5\xf5\xfb\xdf\x46\xe3\xd1\xfb\xcb\xd1\xe5\x9b\xe2\xf3\xeb\x0f\x97\x5b\x8f\x2e\xce\xde\x5f\x9e\x8d\x7e\xad\x3c\x1e\xdf\xbc\xbf\xba\xaa\x3c\xbb\xb8\xbe\x7e\x7f\x5d\x7c\x70\x7e\xf1\xe6\xfa\xf4\xfc\xe2\x3c\x97\x7a\x5d\xfa\x0c\xb2\x9a\x8a\xdb\x20\x6f\xe6\x74\xa3\xd0\x97\xb0\xdd\xec\x04\x2e\xa5\x01\x4d\xe6\x0f\x01\x2f\xa1\x28\xd2\x09\xb8\xe5\xb1\xf0\xc4\x59\x83\x80\x89\x88\x85\x68\xa8\x74\x1f\xc8\xe2\xcd\x94\xec\xba\xe3\xc3\x9d\xe8\xc8\x11\xcc\x74\xe1\x69\x65\x5f\x5a\xc9\x2c\xd0\xd2\x21\x91\x93\xf1\xf7\x72\x35\xcc\x52\xce\x57\x90\x6a\x9c\x72\xca\x48\x6f\x74\x9a\x91\xdf\x3c\xa8\x19\x02\x0d\x68\x19\x13\xdc\x49\x75\x6b\x09\x62\x68\xd8\x92\xf8\x2a\xe3\x3a\x92\x82\xf2\xac\x2f\xe3\xe5\x10\x74\x1a\x2e\x00\x75\xb6\xc1\x90\x2f\xaa\x31\x3a\x4e\x5d\xf6\x14\x11\x68\x39\x33\x77\xa8\x32\xae\x72\x93\x7a\x96\xf2\x6f\xdd\x34\xe7\xaf\xb0\x45\x8e\x8e\x73\x03\x4f\xc4\x7d\x6c\xa5\x10\xa3\x15\x03\x52\xe1\xf5\xe3\x08\xe4\x6e\xe3\x69\xe4\xdf\x5a\xc9\x64\xd5\x7d\x6d\x63\x09\xe5\x14\x64\x15\x22\x6d\xcc\x6a\xa4\x22\x67\x03\x98\xa5\x22\xf4\xb8\xc1\xcc\xaa\x36\xb0\xa8\x29\xb8\x3d\x06\xab\xb9\x0c\xab\x65\x81\xee\x28\xe7\xc2\x56\x17\x78\x9f\xa3\x41\x38\x23\xd1\x08\x62\x61\x6d\x8c\xbd\x13\xc9\xb6\xe2\xf3\x86\x04\xb1\x1c\xad\xb9\xcc\x77\x37\xb0\x66\x2f\xb7\x73\xb3\x8e\x6c\xd5\x66\x78\x0d\x0c\x66\x4e\xa0\x7d\xe3\x72\x52\x63\xe3\x05\xe4\xb7\xf6\x5f\x9f\xc6\xb8\xe4\x65\x1d\x6a\xd6\x65\x31\x55\x51\xf2\xf2\xec\xc4\x97\x72\x9b\xac\x89\x4a\x61\x79\xdb\x29\x60\x86\xe2\x6a\xfb\x46\xe9\x3b\x6d\x0d\x14\x08\xdd\xef\x28\xb2\x67\xdc\xd6\x67\x39\xe5\x32\xf2\x57\x97\xc3\x95\xad\x77\xf3\x5e\x6e\xd6\xba\x44\x56\xef\xf0\x3c\x67\xe5\x75\xfb\x44\xc8\xfa\x82\x58\x63\x49\xc5\x36\x88\xb6\x4b\x36\x9d\xef\x2d\x5d\x65\x04\x1c\x46\x35\x23\x48\x3e\x0e\xe8\x84\x42\x36\xcb\x7e\xac\xa2\x87\x8e\x4b\xe3\x3d\x87\xb2\x8b\xa9\xc1\x5a\xaa\x97\xc0\xd9\x2d\x01\xde\x36\xf8\xf9\xed\xbf\xf4\xa3\x8b\xaa\xcb\x4d\x41\xee\x6d\x3a\x25\x25\xc8\x50\xc3\x70\x0e\x61\x7a\x9b\x34\x5f\x71\x5a\xd6\x83\xb7\xe3\x46\x43\x16\xd8\x58\xb0\xf9\x62\x92\x9d\x11\x63\xbc\xa5\xa4\x3e\x95\x92\x13\x8a\xa6\x92\x7a\xed\xeb\xb6\x5a\x6c\x21\x2e\xf8\xe5\xb4\x21\xc3\x20\x63\xe3\x98\xc9\x0c\xa7\x8a\x85\xbd\x8d\xe2\xbb\x67\xb3\xad\x52\xb9\xec\xea\xd2\x7e\x4b\xf8\x11\xbe\x2c\x6f\x9f\x5a\xb1\x77\xa8\x8b\xd8\xe2\x4b\x76\x4c\xbb\xf8\x87\x74\x43\xc9\x7b\xfb\x47\x67\x76\xfb\x65\x21\x59\x6d\x36\x42\xe4\x2a\x30\xd5\x1c\x27\x67\x06\xf2\xfd\xff\x6e\xa6\xa9\xf9\xf9\x80\xe1\x99\xe6\x4c\xa6\xe5\xe0\xc7\xba\x5f\xf6\x2b\x02\x4d\x50\xff\x75\x52\xcc\x71\x29\xbd\xdc\xb6\x7f\x8b\xa6\xdb\x6e\x18\x0e\x64\x19\x6d\xc0\x0e\x19\xd1\xd7\x8d\xc1\x7a\x6d\xfa\xee\x8e\x6b\xde\xf8\x33\x00\x36\x06\x8d\xa2\xe2\x8e\x23\x48\xf1\x87\x38\x4b\x95\x22\x61\xf8\x0a\xa4\x70\xff\xa3\xc2\x5e\xae\x4b\xf8\x38\x97\x77\x14\x01\x13\x76\x05\x38\x84\x3b\xc6\xb9\xcf\x06\xef\x98\x59\x40\x6c\x33\x1c\xb3\x40\x01\x3f\x03\x09\xa3\x56\xc0\x71\x18\xb9\x82\xaf\x0b\x3f\xbc\x00\xd2\x7e\x05\x78\x78\xb0\x50\x41\xec\x9a\x6b\xd9\x0e\xb9\xfd\x01\x85\x36\xd4\x6e\xd1\x49\xdd\xed\xd3\xe1\x69\x62\x54\x29\x10\xf8\xb2\x84\x5e\x69\xbb\x92\xb4\xad\x4e\x5f\x6d\x4a\x6f\x2f\x68\xbb\xe7\xeb\xaf\xd5\x1b\xcb\x0f\xb4\x50\xe5\x3e\xdc\xf7\x60\xa6\xde\xe8\xee\xb6\x19\xd7\xf7\x15\x1c\xb0\x25\x52\x72\x77\x86\xa7\x69\x3b\xbb\xa6\x62\xf0\x05\x4e\x81\xdc\x6c\x73\xe2\x87\xda\xb6\xee\x76\x05\xd2\x59\xd2\xe3\x6d\x33\x8d\x26\x7f\xf8\x7e\xdc\xa0\x7f\x2c\x59\xd8\xae\x7b\xe0\x6c\x2a\x5f\x04\xf9\x1e\xb4\x98\xdf\xda\xf9\xba\x98\x97\xe9\xad\x4b\xdd\x65\x51\x77\xa7\xa8\xff\xbc\x28\x53\xd8\xb2\x6b\xe9\x48\xee\x00\xed\x39\x83\xf5\x51\x67\xb7\x6e\xbf\x7f\xdb\x70\xee\xd1\xcb\x31\x61\xb5\x27\xc0\x5a\xec\xb3\xfb\x20\x59\x3d\x67\xf9\xd9\xa0\x62\xcb\xee\x46\x9a\x49\xb5\x2e\x66\x94\x42\x8f\xb2\x81\xaa\x77\xe4\x9e\x33\x25\x68\x2f\x31\x3f\x65\x28\xab\x09\x55\xb8\x00\x5d\x3d\xfe\x50\x13\x22\x54\x32\x96\x89\x5d\xee\x7a\x69\x41\x14\x4f\x76\x3a\x2a\x4f\xba\x5e\x1a\x69\x90\xdb\xec\x96\x29\x8a\xfc\x89\xc9\x6e\xd0\xbd\x7d\xb1\x74\x78\x93\xfc\x6e\x41\xd8\x56\x65\x71\xb7\x7d\xbf\x95\x8c\xfe\xc3\xf6\x65\xd2\x87\xaa\xb9\x5b\x95\xb4\x0b\xd8\x6c\x2d\x03\x39\xe8\xd4\x81\x4d\xf9\x0a\xcd\x17\xd8\x73\x1b\xcc\x5e\xd8\x6e\x73\x0d\x04\x63\xb7\x77\x2f\x32\xbb\x7d\xc1\xad\x8b\xb2\xc4\x4f\xb0\x77\xd1\x32\xe0\x7e\xf3\xe2\x0b\x6d\x5e\xd4\xcf\xdd\x7e\xbb\x17\x9d\x4d\x39\xd4\xf5\x64\x47\xd1\x3e\x87\xc2\x6f\xbb\x60\xbf\xbe\xdb\x46\x9f\x0c\x29\x81\xfc\x5c\x86\x85\xcb\x6d\x95\x2b\x7c\xef\xa4\xa2\xec\x54\x56\xb7\x3f\x34\xf0\xc0\xbf\x0d\x60\xb9\x39\xb8\x3f\xf8\x7f\x00\x00\x00\xff\xff\x38\x08\x9a\x90\xf5\x60\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 24821, mode: os.FileMode(420), modTime: time.Unix(1539210974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
