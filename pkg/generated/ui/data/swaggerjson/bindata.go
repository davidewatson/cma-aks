// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x2e\xd0\xc6\xdd\xdc\xcb\x21\x4f\x17\x24\xc0\xae\x91\xcd\x5d\x70\xee\x6e\x1f\x0e\x85\x31\xa6\xc6\x12\xd7\x12\xa9\x92\x94\xb3\xee\x21\xdf\xfd\x40\x4a\xb2\xfe\x58\x92\x15\xb9\x4d\xd5\x6e\xfa\x12\xd7\x22\x39\xff\x7e\xfc\x71\x66\xc4\xe4\x7f\x67\x00\x9e\x7e\xc0\x20\x20\xe5\x5d\x82\x77\x71\xfe\xd6\x7b\x6d\xbf\xe3\x62\x2d\xbd\x4b\xb0\xcf\x01\x3c\xc3\x4d\x44\xf6\xf9\x75\x94\x6a\x43\x0a\xee\x50\x60\x40\x0a\xae\x6e\x17\xf0\x33\x45\x89\xfd\x78\x3f\x77\x53\x01\xbc\x2d\x29\xcd\xa5\xb0\x13\xb6\x6f\xcf\x7f\xcc\xd7\x04\xf0\x98\x14\x06\x99\xd9\x2f\x0c\xe0\x09\x8c\xdd\xca\x77\x9c\x85\x48\x11\xfc\x46\x82\x3e\x71\xcc\x67\x00\x78\xa9\x8a\xec\xf3\xd0\x98\x44\x5f\xce\x66\x01\x37\x61\xba\x3a\x67\x32\x9e\x69\x8c\x75\x2a\x82\x37\x4c\x30\x33\x63\x31\xbe\xc1\x8d\x2e\xe7\x51\x8c\xdc\xcd\x8c\xb7\xd9\x92\xff\x0c\xec\x37\x76\xa6\xe7\xc6\x3c\x9e\x01\x3c\x3a\x63\x35\x0b\x29\x26\xed\x5d\xc2\x7f\x33\x3d\x9d\xb0\x42\x69\xfb\x1f\x3b\xe3\x83\x1b\xcb\xa4\xd0\x69\x6d\x30\x26\x49\xc4\x19\x1a\x2e\xc5\xec\x77\x2d\x45\x39\x36\x51\xd2\x4f\xd9\xc0\xb1\x68\x42\x5d\x7a\x7c\x86\x09\x9f\x6d\x7f\x9c\xb1\xcc\xe1\x55\x8f\x05\x54\x75\xa0\x55\x3f\x8d\x63\x54\x3b\x6b\xeb\x7b\x1e\x45\xa0\xc8\x28\x4e\x5b\x02\x13\x12\x68\x83\x26\xd5\x20\xd7\x80\x90\x2f\x06\x28\x7c\xe0\x46\xc3\x26\x5d\x11\x93\x62\xcd\x03\x58\x4b\x05\x4c\x0a\x41\xcc\xf0\x2d\x37\xbb\xbd\x1f\x01\x3c\x99\x90\x72\x2a\xcf\x7d\x2b\xe3\x27\x32\x39\x0c\xaa\x83\x14\xe9\x44\x0a\x4d\xba\xa6\x1b\x80\x77\xf1\xf6\x6d\xe3\x2b\x00\xcf\x27\xcd\x14\x4f\x4c\x8e\x92\xca\x42\x99\x45\x36\x20\x78\x30\x0d\xc0\xfb\xab\xa2\xb5\x9d\xf1\x97\x99\x4f\x6b\x2e\xb8\x5d\x41\xdb\xe0\xe3\x46\x97\x8a\xfd\x87\x92\x68\xe7\xd5\xe6\x3e\x9e\xb5\x7d\x7e\xac\x58\x90\xa0\xc2\x98\x0c\xa9\x32\x5e\xd9\xbf\x86\xee\x05\x62\xdd\xcf\xd7\xbd\x76\xfd\x0b\x63\xb2\xae\xb7\x81\x28\x9c\x6f\x24\xac\x08\x22\x29\x37\xe4\x43\x9a\x9c\x37\x97\xe0\x6e\xe6\xc7\x94\xd4\xae\xf9\x48\xd1\xc7\x94\x2b\xb2\x51\x58\x63\xa4\xa9\xf1\xd8\xec\x12\xa7\x98\x36\x8a\x8b\xa0\x6a\xfe\xe3\xeb\xe3\xe6\x30\x45\x3e\x09\xc3\x31\xd2\xe7\x98\x24\x4b\xee\x1f\x31\xee\x5d\x48\x70\x95\x24\x73\xdf\x81\xe7\xea\x7e\x0e\x57\x8c\x91\xd6\x93\xb4\xc8\x90\x40\x61\x06\x58\xf4\xce\x0d\xdc\x9b\x84\xd3\x35\x29\x41\xad\x1f\xa4\x1a\x12\xa6\xfb\x7c\xe8\xb7\x60\x96\x4e\x57\x7b\xfd\x87\x81\x70\x51\x99\xf1\x55\x2c\xdc\x7f\xfe\x50\xa1\x13\x83\x41\x93\x48\x8a\xe3\xb3\x9c\xfc\xe1\xac\xe1\x24\xcf\xa7\x88\x0c\xf5\x13\x7c\x36\xa6\x24\xf4\x1e\xb2\xbe\x71\x43\xa7\xc9\xd7\x35\xdd\xa6\x42\xd9\xef\x43\x34\xc0\x75\x95\xb2\xff\xa6\xc1\x4e\xb4\xcc\xed\x93\x36\x4a\xee\x26\xb9\x71\x5e\x48\xfb\x1b\x60\xb7\x17\xd2\xfe\x1e\x49\x3b\x49\x8f\xa4\xe4\x89\x92\x5b\x6e\x6b\xa2\x41\xa4\x7d\xad\x08\xa7\x4a\xda\x35\xdd\x9e\x85\xb4\x57\xd2\x3f\x08\x7b\x86\x88\xb6\x27\x15\x40\x18\x95\x36\xf1\xf0\x19\x6c\xbe\xd3\xc1\x10\x8b\xc7\xa3\xea\xac\xe2\xb0\x66\x1d\x38\x8b\xb8\x36\xe3\x8a\x41\x04\x3b\xd7\x56\x23\xf9\x5a\x7a\x50\x8d\xf7\x8b\x15\x38\x2d\x08\xd6\x95\x7b\x16\x0c\xbe\x9c\xb3\x2f\xe7\xec\x14\xcc\xfa\x73\x9e\xb3\xbd\x8c\x98\x26\x81\x42\x9f\x46\x92\xe2\x16\x79\x84\xab\x88\x20\x5f\xa6\xde\x29\x1b\xc4\x90\xbf\xe6\x33\x27\xcb\x92\x85\x82\x53\x29\xb1\x5e\xba\x62\x53\xb1\xe8\x85\xf8\x5f\x88\x7f\xca\xc4\x3f\xbc\xc0\xca\xe9\x7b\x10\x75\xe7\x7c\x38\xcd\xfa\xaa\xae\xdc\x9f\xa4\xc0\xaa\x1b\xfd\x75\x2a\xac\xf2\xa5\xe5\x93\xf2\x88\x54\x09\xc8\xa7\x02\x17\x6b\xa9\x62\x87\x34\xc0\x95\x4c\x0d\x60\xc2\x41\x93\xda\x1e\x4b\x25\x7e\xcb\x56\x98\x97\x0b\x4c\x0c\x96\xa5\x8e\xa3\x20\x39\x26\x3e\xfb\xd7\xb3\x15\x6d\xca\x17\xa4\xb5\x9a\xfc\xea\x76\xb1\x48\x88\x5d\xdd\x2e\xe6\x42\x1b\x14\x8c\x7e\x52\x32\x4d\xaa\xb1\x2c\x88\x4a\xae\x7e\x27\x56\x1e\x79\x5e\xa2\x6c\x34\x0c\x6f\x38\xb7\xd8\x1c\x35\x77\x37\xc8\xee\x75\xed\x59\xf1\x8a\xdc\x72\xaf\xa8\x64\x38\x81\xd3\xa4\xdd\x2b\xd9\x7a\x4f\x97\x51\x58\x09\x76\x34\xbc\x5a\x18\x14\x3e\x2a\x7f\x79\x73\xb1\xdc\x5e\xbc\x06\x32\xec\xfc\x87\x76\x91\x31\x17\xcb\x8f\x29\x0a\xc3\xcd\xae\x4b\x34\x17\x86\x82\x1a\x62\x01\xbc\x0c\x98\xf9\xe3\xbf\x5f\x74\x28\x76\xc7\x05\x8f\xd3\x18\x44\x1a\xaf\x48\x59\x17\xf0\x5c\x55\x0d\xaf\x7c\x5a\x63\x1a\x19\x6d\x93\xbd\x4f\xa4\x64\x55\xc5\x03\xc6\x3f\xb4\xd5\x39\x52\x83\x43\x83\x25\x7a\x67\x3b\x0a\xbf\x4d\x98\x57\xdb\xe2\x6d\x58\x79\x97\x21\x72\x34\x3e\x36\xd4\xe9\xbf\x7e\x78\x60\x00\x76\x6e\x6b\x74\xb6\x18\xa5\x23\x51\x87\x01\x64\xb3\x87\xf8\xd4\x1a\x0f\xa8\x32\xa0\xce\xdc\x3c\x48\x90\x2b\x0d\x26\x44\x03\x24\x5c\x49\xb4\x93\xa9\x0d\x15\x43\x43\x81\x54\xfc\x13\x81\x22\x2d\x53\x65\x83\x69\xfd\xbe\xe5\xf4\x00\x4c\x0a\x2d\x23\xee\xa3\x21\x1f\x56\x3c\x8a\xf6\x69\x40\xe1\xfd\x06\x75\xb4\x50\xdd\x09\x61\x08\xb8\x59\x1e\x32\xf7\x13\xfc\x16\x12\x18\x0c\x40\x8a\x6c\xb3\x72\x03\x8a\x12\xa9\xb9\x91\xaa\x23\x48\x56\x24\x93\x71\xcc\xcd\x68\x89\x21\xea\x70\xcf\x0f\xdc\x40\xbe\x5c\xa7\x38\xa3\x88\x96\xda\xa0\x19\x07\x8e\xf7\x21\x99\xd0\xee\x10\x05\x42\x1a\x27\xd5\xae\x08\x0f\xa8\x81\x45\x84\x02\x1e\x42\x12\xb0\x4a\x79\xd4\xa1\x84\x7d\xe4\x2f\xfd\xb1\x0a\xdc\xa0\x71\x7c\xe8\x96\xe9\x30\x53\x9e\x14\xc7\x1c\x55\x56\x48\x20\x21\xd5\xe4\x3b\xe8\xca\x38\xe1\x11\xb5\x4b\xcc\x1f\xaa\x51\xf2\xae\xf3\xc9\x4e\x54\xfb\xfa\x49\x84\xc6\x62\x7c\xd4\xfa\xf7\xf9\x64\xe0\x26\x0b\x53\x26\x2f\xab\x55\x66\xa0\x52\x21\xb8\xb0\xb0\x6d\xd9\xef\xb5\xdd\x97\x1d\xdf\x57\x9f\x52\x55\x10\xe0\x82\xd4\x96\x33\xba\x62\x4c\xa6\xc2\x9c\xb2\xf9\x58\xc4\x49\x18\x5b\x8e\x8c\xdd\x08\xd7\x6e\x85\xb9\x0f\xaf\x70\x83\x97\xae\x70\xbe\xe9\x38\xb9\x72\x61\x9a\x98\xa2\xf1\x3b\x2f\x13\xb8\x70\x8b\xe4\x42\x8b\x8a\x71\xd8\x71\x64\x37\x0f\x66\xae\xcb\x60\xb6\xda\x35\x1b\x19\xcc\x1d\x37\x80\xd6\xe7\x15\xca\x7c\x45\x7f\x5c\x42\x24\xd1\x87\x15\x46\xf6\x94\x52\x3f\x78\x9d\xa1\x2a\x4b\xbf\x53\x02\x94\x77\x2c\xc6\x3a\xab\xad\x8f\xd1\x91\xc9\x64\x8d\x84\xb1\x82\x5a\xdb\x0b\x1d\xbb\xaa\xa8\xef\xc7\xca\xea\xa8\xfa\xdb\xa5\x35\xcb\xee\xb1\x42\x7b\x8a\xf1\x61\x07\xb6\x45\x58\x89\x09\x8b\xb2\x54\x53\x76\x6b\xcf\xa2\xcd\x72\x41\x05\x85\x6d\xb8\xca\x77\xff\x0d\x19\xe4\xd1\xdc\x50\x7c\x0a\xb0\x46\xba\x62\x7e\xd3\xe8\xfb\xb5\x7b\x7d\x74\xee\xdd\xd2\x59\xec\x88\xab\xbb\x15\x39\xf2\x30\x2d\x2f\x88\x94\x97\x2b\x8f\x4a\x2c\xef\x5a\x9e\x2c\xb5\x72\x6d\xd3\x9d\x71\xee\xd6\xa6\xfd\xd8\xae\x44\xcf\xb1\x90\x63\xe2\x05\x0d\xcf\x82\x86\xbe\x40\xb4\x54\x28\xa7\x44\x24\x92\xac\x99\x5a\x0f\xb7\xc9\x51\xbf\x3b\xbc\x6e\xd0\x20\x5c\x93\xe8\xf4\x1c\x6b\x3d\xa7\xe0\x58\x37\xe1\xe0\x8c\xeb\x48\xb2\xea\x8c\xe7\xb2\xc7\xe3\xd1\xcc\x1f\x1e\xe6\x37\x03\xd5\x6a\xcd\x92\x3a\x14\xcc\x0f\x7d\x9d\x0d\xae\x27\x06\x76\x43\x62\xb4\xb1\x3f\xb3\x54\xc0\x25\x00\x7b\xba\x6e\xcb\x04\x9a\xa6\x14\xf5\xec\x32\xab\x7d\xbb\xa2\x89\x4a\x61\xbd\x4f\xe7\x71\x43\x71\x73\x7c\xa7\xf5\x83\x7a\x29\x95\x85\x1e\x8f\x74\x25\x72\x6d\xdb\x33\x85\x7a\xdd\xfd\xc5\xed\x70\x75\xfe\x71\xdd\xeb\xc3\x06\x6f\xd5\x3b\x1d\x7c\x95\x26\x53\xf7\x2b\xb4\xfd\x4d\xa3\xce\xb2\xc4\x0e\xf0\x0f\xcb\x9e\xc1\x17\x60\xee\xf3\x05\x1c\x47\x75\x33\x48\x21\x07\x74\x42\x8c\xaf\xf3\xdf\x7a\x18\xe1\xe3\x9a\xbc\xaf\xe1\xec\x2a\xc7\xef\xad\x7a\x03\x11\xdf\x10\xe0\xa6\x03\xe7\x9b\x7f\xe8\x93\x1b\x13\xdb\xb2\xa8\xbd\x4d\x57\xa4\x04\x19\xea\x10\xe7\x18\x66\x74\x48\x8b\x13\xa7\xe7\x3c\xb8\x5d\x74\x06\xb2\xa2\x46\xc8\x83\x70\x99\xbf\x54\xe7\x51\x4f\x8f\x71\x25\x65\x44\x28\xba\x7a\x8c\xad\x8f\xfb\xfa\x19\xc5\x26\xe0\x1a\x7e\xbe\xea\xc8\x23\xc8\x3c\x48\xb5\x59\xae\x71\xa5\x38\x1b\x1d\x94\x6c\x7a\xbe\xdb\x1a\xd5\xff\x50\x48\x67\x3d\xf4\x13\xb0\x2c\x37\xcf\xed\xd8\x07\xd4\x55\x6e\xc9\xca\x5e\xae\x41\xd1\xc7\x94\x74\x47\xdb\xe8\xf0\xb7\x97\x8e\xe3\xb2\x92\x92\x76\x07\xc1\x77\x55\x4c\x33\xd7\x2a\x94\x81\xe2\x85\xc9\xb0\xd0\xb4\xdc\x43\x9f\x5e\x68\xae\x65\x5a\x4f\x7e\x2c\xfc\xf2\xeb\xe8\x5d\x54\x7f\x42\x5e\xbb\xa8\xe5\xb2\x87\x41\xee\x71\x67\xdb\xf5\xbc\xe9\xf9\x73\xae\xeb\xbc\x91\xf5\x7f\xf5\x4e\x5b\xe0\xf5\x81\xf9\x8b\x65\x2f\x87\xf8\x3f\x9e\xb6\xfc\xd2\xbc\xd2\xf9\xc4\x08\x7d\x77\xd1\x19\x41\x35\x95\x8e\xc8\x13\xbd\x57\xbf\x58\xf5\x3d\x78\xb1\xb8\x05\xf7\x65\x31\x9e\xfb\x6d\x48\x5a\x1e\xb6\xdd\xd1\x1b\xd4\x32\x73\x41\x81\x07\x6e\xc2\xce\x15\x0e\xe2\x5a\x7b\xc5\x3d\xc1\x78\xae\x61\x7f\x75\xc0\x1d\xc8\xff\xbe\xed\x78\x8f\x98\xd9\xb1\xe4\xad\x2f\xd9\x7a\xe2\x73\xfc\x5d\x5d\xff\xeb\x97\xea\xc8\xe1\x41\x5a\x4b\xb5\xcf\x75\x6b\x47\x4d\x3d\x40\xbf\x1e\xde\xf4\x7c\x6a\x60\x86\x65\xe4\x43\x34\x3f\xc0\x54\x61\x41\x8f\xe6\x9f\xaf\xbf\x33\x99\xbe\x4b\x0f\x4f\x1e\x5e\xea\x99\x56\xa5\x9c\xc7\xed\x33\x96\xc9\x75\x8b\x9f\xa1\x4e\xee\x11\xf8\x52\x28\x7f\xa6\x42\xb9\x7d\xef\x8e\xab\x94\x07\x87\x72\xaa\x27\xd0\x91\x02\xb1\xa0\xc2\x6f\xbb\x38\xdc\x5f\x3c\xa3\x3f\x0c\x29\x81\xd1\x8d\x64\x95\x9b\x67\x8d\xfb\x75\x77\x52\x51\x7e\xdb\x6f\xd8\x5f\x47\x79\xe2\x1f\x34\xb1\xda\x9c\x3d\x9e\xfd\x3f\x00\x00\xff\xff\x19\x4c\x87\x30\xaa\x45\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 17834, mode: os.FileMode(420), modTime: time.Unix(1537333857, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
