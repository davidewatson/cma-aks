// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x6f\xdb\x38\x16\x7e\xcf\xaf\x38\xd0\x2e\xb0\x1d\x20\x8d\x3b\xd9\x97\x45\x9e\x36\x48\x80\x19\x23\x93\xdd\x60\xdd\x99\x3e\x2c\x0a\xe3\x98\x3a\x96\x38\x96\x48\x95\xa4\x9c\xba\x8b\xfc\xf7\x05\x29\xc9\x96\x64\x49\x56\xe4\x36\x55\x5b\xf7\x25\xae\x79\x39\x57\x7e\xe7\x42\x26\xff\x3b\x03\xf0\xf4\x23\x06\x01\x29\xef\x0a\xbc\xcb\x8b\x37\xde\xb9\xfd\x8e\x8b\xa5\xf4\xae\xc0\x8e\x03\x78\x86\x9b\x88\xec\xf8\x4d\x94\x6a\x43\x0a\xee\x51\x60\x40\x0a\xae\xef\x66\xf0\x2b\x45\x89\xfd\xf8\x30\x75\x4b\x01\xbc\x35\x29\xcd\xa5\xb0\x0b\xd6\x6f\x2e\x7e\xce\xf7\x04\xf0\x98\x14\x06\x99\xd9\x6e\x0c\xe0\x09\x8c\xdd\xce\xf7\x9c\x85\x48\x11\xfc\x41\x82\x3e\x71\xcc\x57\x00\x78\xa9\x8a\xec\x78\x68\x4c\xa2\xaf\x26\x93\x80\x9b\x30\x5d\x5c\x30\x19\x4f\x34\xc6\x3a\x15\xc1\x6b\x26\x98\x99\xb0\x18\x5f\xe3\x4a\xef\xd6\x51\x8c\xdc\xad\x8c\xd7\xd9\x96\xff\x0c\xec\x37\x76\xa5\xe7\xe6\x3c\x9d\x01\x3c\x39\x61\x35\x0b\x29\x26\xed\x5d\xc1\x7f\x33\x3e\x1d\xb1\x82\x69\xfb\x1f\xbb\xe2\xbd\x9b\xcb\xa4\xd0\x69\x65\x32\x26\x49\xc4\x19\x1a\x2e\xc5\xe4\x4f\x2d\xc5\x6e\x6e\xa2\xa4\x9f\xb2\x9e\x73\xd1\x84\x7a\xa7\xf1\x09\x26\x7c\xb2\xfe\x79\xc2\x32\x85\x97\x35\x16\x50\x59\x81\x96\xfd\x34\x8e\x51\x6d\xac\xac\xef\x78\x14\x81\x22\xa3\x38\xad\x09\x4c\x48\xa0\x0d\x9a\x54\x83\x5c\x02\x42\xbe\x19\xa0\xf0\x81\x1b\x0d\xab\x74\x41\x4c\x8a\x25\x0f\x60\x29\x15\x30\x29\x04\x31\xc3\xd7\xdc\x6c\xb6\x7a\x04\xf0\x64\x42\xca\xb1\x3c\xf5\x2d\x8d\x5f\xc8\xe4\x6e\x50\x9e\xa4\x48\x27\x52\x68\xd2\x15\xde\x00\xbc\xcb\x37\x6f\x6a\x5f\x01\x78\x3e\x69\xa6\x78\x62\x72\x2f\x29\x6d\x94\x49\x64\x0d\x82\x7b\xcb\x00\xbc\xbf\x2a\x5a\xda\x15\x7f\x99\xf8\xb4\xe4\x82\xdb\x1d\xb4\x35\x3e\xae\xf4\x8e\xb1\xff\x50\x12\x6d\xbc\xca\xda\xa7\xb3\xa6\xcf\x4f\x25\x09\x12\x54\x18\x93\x21\xb5\xb3\x57\xf6\xaf\xc6\x7b\xe1\xb1\xee\xe7\x79\xa7\x5c\xff\xc2\x98\xac\xea\xad\x21\x0a\xe5\x1b\x09\x0b\x82\x48\xca\x15\xf9\x90\x26\x17\xf5\x2d\xb8\x5b\xf9\x21\x25\xb5\xa9\x0f\x29\xfa\x90\x72\x45\xd6\x0a\x4b\x8c\x34\xd5\x86\xcd\x26\x71\x8c\x69\xa3\xb8\x08\xca\xe2\x3f\x9d\x1f\x16\x87\x29\xf2\x49\x18\x8e\x91\xbe\xc0\x24\x99\x73\xff\x80\x70\x6f\x43\x82\xeb\x24\x99\xfa\xce\x79\xae\x1f\xa6\x70\xcd\x18\x69\x3d\x4a\x89\x0c\x09\x14\xa6\x87\x44\x6f\xdd\xc4\xad\x48\x38\x5e\x91\x12\xd4\xfa\x51\xaa\x3e\x66\x7a\xc8\xa7\x7e\x0b\x62\xe9\x74\xb1\xe5\xbf\x9f\x13\xce\x4a\x2b\xbe\x8a\x84\xdb\xcf\xef\x4b\x70\x62\x30\xa8\x03\x49\x11\x3e\x77\x8b\xdf\x9f\xd5\x94\xe4\xf9\x14\x91\xa1\x6e\x80\xcf\xe6\xec\x00\xbd\x03\xac\x6f\xdd\xd4\x71\xe2\x75\x85\xb7\xb1\x40\xf6\xbb\x10\x0d\x70\x5d\x86\xec\xbf\x69\xb0\x0b\x2d\x72\xfb\xa4\x8d\x92\x9b\x51\x1e\x9c\x13\x68\x7f\x03\xe8\x76\x02\xed\xef\x11\xb4\x93\xf4\x40\x4a\x9e\x28\xb9\xe6\xb6\x26\xea\x05\xda\x37\x8a\x70\xac\xa0\x5d\xe1\xed\x45\x40\x7b\x21\xfd\x3d\xb3\x67\x1e\xd1\x34\x52\x72\x08\xa3\xd2\xba\x3f\x7c\x06\x99\xef\x75\xd0\x47\xe2\xe1\x5e\x75\x56\x52\x58\xbd\x0e\x9c\x44\x5c\x9b\x61\xc5\x20\x82\x5d\x6b\xab\x91\x7c\x2f\xdd\xab\xc6\xfb\xcd\x12\x1c\x97\x0b\x56\x99\x7b\x11\x1f\x3c\xc5\xd9\x53\x9c\x1d\x83\x58\x3f\x66\x9c\xed\x44\xc4\x34\x09\x14\xfa\x34\x10\x14\xd7\xc8\x23\x5c\x44\x04\xf9\x36\xd5\x4e\x59\x2f\x84\xfc\x3d\x5f\x39\x5a\x94\x2c\x18\x1c\x4b\x89\x75\xea\x8a\x8d\x45\xa2\x13\xf0\x9f\x80\x7f\xcc\xc0\xdf\xbf\xc0\xca\xe1\xbb\x17\x74\xe7\x78\x38\xce\xfa\xaa\xca\xdc\x0f\x52\x60\x55\x85\xfe\x3a\x15\xd6\xee\xd2\xf2\x59\x79\x44\xaa\x04\xe4\x4b\x81\x8b\xa5\x54\xb1\xf3\x34\xc0\x85\x4c\x0d\x60\xc2\x41\x93\x5a\x1f\x4a\x25\xfe\xc8\x76\x98\xee\x36\x18\x99\x5b\xee\x78\x1c\xe4\x92\x43\xec\xb3\xbd\x9e\x2d\x71\xb3\xbb\x20\xad\xd4\xe4\xd7\x77\xb3\x59\x42\xec\xfa\x6e\x36\x15\xda\xa0\x60\xf4\x8b\x92\x69\x52\xb6\x65\x01\x54\x72\xf1\x27\xb1\x5d\xc8\xf3\x12\x65\xad\x61\x78\x4d\xb9\xc5\xe1\xa8\xa8\xbb\x06\x76\xe7\x95\xb1\xe2\x8a\xdc\x62\xaf\x28\x65\x38\x81\xe3\xa4\x59\x2b\xd9\x7e\xcf\xa7\x51\x48\x09\x76\x36\xbc\x9a\x19\x14\x3e\x2a\x7f\x7e\x7b\x39\x5f\x5f\x9e\x03\x19\x76\xf1\x53\x33\xc9\x98\x8b\xf9\x87\x14\x85\xe1\x66\xd3\x46\x9a\x0b\x43\x41\xc5\x63\x01\xbc\xcc\x31\xf3\xe1\xbf\x5f\xb6\x30\x76\xcf\x05\x8f\xd3\x18\x44\x1a\x2f\x48\x59\x15\xf0\x9c\x55\x0d\xaf\x7c\x5a\x62\x1a\x19\x6d\x93\xbd\x4f\xa4\x64\x1b\x8b\xf8\xf1\x8b\xb2\x88\x1f\x87\xb1\xb8\x17\x94\xf6\xcd\xe1\x6c\xad\xc1\x39\xac\x8d\x45\xce\x3c\x28\xfc\x26\x62\x5e\x05\x85\x9a\xdc\xf9\x6d\x76\x68\x06\xbb\xf0\x8a\x5a\xf5\xd7\xed\xc1\x18\x80\x5d\xdb\x68\x9d\x35\x46\xe9\xc0\x83\x81\x01\x64\xab\xfb\xe8\xd4\x0a\x0f\xa8\xb2\xb3\x34\x71\xeb\x20\x41\xae\x34\x98\x10\x0d\x90\x70\x55\xdb\x46\xa6\xd6\x54\x0c\x0d\x05\x52\xf1\x4f\x04\x8a\xb4\x4c\x95\x35\xa6\xd5\xfb\x9a\xd3\x23\x30\x29\xb4\x8c\xb8\x8f\x86\x7c\x58\xf0\x28\xda\x66\x2a\x85\xf6\x6b\xe8\xd6\x80\xc6\x47\x98\x21\xe0\x66\xbe\x1f\x5c\x9e\xa1\xb7\x90\xc0\x60\x00\x52\x64\x78\xc2\x0d\x28\x4a\xa4\xe6\x46\xaa\x16\x23\x59\x92\x4c\xc6\x31\x37\x83\x29\x86\xa8\xc3\x2d\x84\x71\x03\xf9\x76\xad\xe4\x8c\x22\x9a\x6b\x83\x66\x98\x73\xbc\x0b\xc9\x84\xf6\x84\x28\x10\xd2\x38\xaa\x76\x47\x78\x44\x0d\x2c\x22\x14\xf0\x18\x92\x80\x45\xca\xa3\x16\x26\xec\x90\x3f\xf7\x87\x32\x70\x8b\xc6\x41\xb6\xdb\xa6\x45\x4c\x79\x94\x1d\x73\xaf\xb2\x44\x02\x09\xa9\x26\xdf\xb9\xae\x8c\x13\x1e\x51\x33\xc5\x7c\x50\x0d\xa2\x77\x93\x2f\x76\xa4\x9a\xf7\x4f\x22\x34\xd6\xc7\x07\xed\xff\x90\x2f\x06\x6e\x32\x33\x65\xf4\xb2\x72\x6a\x02\x2a\x15\x82\x0b\xeb\xb6\x0d\xe7\xbd\x72\xfa\xb2\x0c\xe3\xfa\x53\xaa\x0a\x00\x9c\x91\x5a\x73\x46\xd7\x8c\xc9\x54\x98\x63\x0e\x1f\x8b\x38\x09\x63\x2b\xa6\xa1\x07\xe1\xc6\xed\x30\xf5\xe1\x15\xae\xf0\xca\xd5\xf6\xb7\x2d\x91\x2b\x27\xa6\x89\x29\x1a\x7e\xf2\x32\x82\x33\xb7\x49\x4e\xb4\x28\x6a\xfb\x85\x23\x7b\x78\x30\x53\x5d\xe6\x66\x8b\x4d\xbd\xd7\xc2\x5c\xb8\x01\xb4\x3a\x2f\x41\xe6\x2b\xfa\x78\x05\x91\x44\x1f\x16\x18\xd9\x28\xa5\x7e\xf2\x5a\x4d\xb5\xab\x4e\x8f\x31\x50\xde\x54\x19\xaa\xac\xa6\x56\x4b\x4b\xb2\x95\xf5\x3a\x86\x12\x6a\xec\x80\xb4\x9c\xaa\xa2\x05\x31\x94\x56\x4b\x63\xa2\x99\x5a\xbd\x33\x30\x94\x68\x47\xbf\xa0\x5f\xc0\xb6\x1e\xb6\xf3\x09\xeb\x65\xa9\xa6\xec\x61\xa1\xf5\x36\x8b\x05\x25\x2f\x6c\xf2\xab\xfc\xf4\xdf\x92\x41\x1e\x4d\x0d\xc5\xc7\x38\xd6\x40\x55\x4c\x6f\x6b\xad\xc9\x66\xad\x0f\x2e\x0f\x1a\x9a\x9f\x2d\x76\x75\x0f\x37\x07\x06\xd3\xdd\x1b\x96\xdd\xfb\xcf\x83\x14\x77\xcf\x41\x8f\xa6\x5a\x7a\x59\xea\x62\x9c\x7b\x58\x6a\x3f\x36\x33\xd1\x11\x16\x72\x9f\x38\x79\xc3\x8b\x78\x43\x97\x21\x1a\x2a\x94\x63\x2c\x12\x49\x56\x4f\xad\xfb\xcb\xe4\xa0\xdf\x05\xaf\x5b\x34\x08\x37\x24\x5a\x35\xc7\x1a\xe3\x14\x1c\x6a\x78\xec\xc5\xb8\x96\x24\xab\x8a\x78\x2e\x7b\x3c\x6c\xcd\x7c\x70\x3f\xbf\xe9\xc9\x56\x63\x96\xd4\xc2\x60\x1e\xf4\x75\x36\xb9\x9a\x18\xd8\x03\x89\xd1\xca\xfe\xcc\x52\x01\x97\x00\x6c\xe1\xba\x29\x13\xa8\x8b\x52\xd4\xb3\xf3\xac\xf6\x6d\xb3\x26\x2a\x85\xd5\x56\xa2\xc7\x0d\xc5\xf5\xf9\xad\xd2\xf7\x6a\xf7\x94\x36\x7a\x3a\xd0\x38\xc9\xb9\x6d\xce\x14\xaa\x75\xf7\x17\x97\xc3\xd5\xf9\x87\x79\xaf\x4e\xeb\x7d\x54\xef\x75\xf0\x55\xfa\x60\xed\xb7\x7c\xdb\xc7\x50\xad\x65\x89\x9d\xe0\xef\x97\x3d\xbd\xdf\xe8\x3c\xe4\x1b\x38\x8c\x6a\x47\x90\x82\x0e\xe8\x84\x18\x5f\xe6\xbf\x98\x31\x40\xc7\x15\x7a\x5f\x43\xd9\x65\x8c\xdf\x4a\xf5\x1a\x22\xbe\x22\xc0\x55\x8b\x9f\xaf\xfe\xa1\x8f\x6e\x4c\xac\x77\x45\xed\x5d\xba\x20\x25\xc8\x50\x0b\x39\x87\x30\x83\x4d\x5a\x44\x9c\x8e\x78\x70\x37\x6b\x35\x64\x89\x8d\x90\x07\xe1\x3c\xbf\xf7\xe7\x51\x47\x8f\x71\x21\x65\x44\x28\xda\x7a\x8c\x8d\xc3\x5d\xfd\x8c\xe2\x10\x70\x0d\xbf\x5e\xb7\xe4\x11\x64\x1e\xa5\x5a\xcd\x97\xb8\x50\x9c\x0d\x36\x4a\xb6\x3c\x3f\x6d\xb5\xea\xbf\xaf\x4b\x67\x6d\xfe\x23\x7c\x59\xae\x5e\x5a\xb1\x8f\xa8\xcb\xd8\x92\x95\xbd\x5c\x83\xa2\x0f\x29\xe9\x96\xb6\xd1\xfe\x2f\x58\x1d\xf6\xcb\x52\x4a\xda\x6e\x04\xdf\x55\x31\xf5\x5c\xab\x60\x06\x8a\x3b\x9d\x7e\xa6\x69\x78\x2a\x3f\x3e\xd3\xdc\xc8\xb4\x9a\xfc\x58\xf7\xcb\x5f\xcc\xb7\x41\xfd\x11\x79\xed\xac\x92\xcb\xee\x1b\xb9\x43\x9d\x4d\x2f\x08\xc7\xa7\xcf\xa9\xae\xe2\x46\xd6\xff\xd5\x1b\x6d\x1d\xaf\xcb\x99\xbf\x58\xf6\xb2\xef\xff\x87\xd3\x96\xdf\xea\xaf\x4e\x9f\x69\xa1\xef\xce\x3a\x03\xa0\xa6\xd4\x11\x79\xa6\xf6\xaa\x6f\xbf\xbe\x07\x2d\x16\x0f\xf5\xbe\xac\x8f\xe7\x7a\xeb\x93\x96\x87\x4d\xcf\x08\x7b\xb5\xcc\x9c\x51\xe0\x91\x9b\xb0\x75\x87\x3d\xbb\x56\x6e\xe1\x47\x68\xcf\x25\x6c\x5f\x37\xb8\x80\xfc\xef\xbb\x96\x7b\xc4\x4c\x8e\x39\x6f\xbc\x64\xeb\xb0\xcf\xe1\xbb\xba\xee\xeb\x97\xf2\xcc\xfe\x46\x5a\x4a\xb5\xcd\x75\x2b\xa1\xa6\x6a\xa0\xdf\xf7\x1f\xa3\x3e\xd7\x30\xfd\x32\xf2\x3e\x9c\xef\xf9\x54\x21\x41\x07\xe7\x9f\xaf\xbf\x33\x9a\xbe\x4b\x07\x4e\xee\xbf\x3b\x1a\x57\xa5\x9c\xdb\xed\x33\x96\xc9\x55\x89\x5f\xa0\x4e\xee\x20\x78\x2a\x94\x3f\x53\xa1\xdc\x7c\x76\x87\x55\xca\xbd\x4d\x39\xd6\x08\x74\xa0\x40\x2c\xa0\xf0\xdb\x2e\x0e\xb7\x6f\xe3\xe8\xa3\x21\x25\x30\xba\x95\xac\xf4\x38\xae\xf6\x04\xf0\x5e\x2a\xca\x1f\x24\xf6\xfb\x03\x2e\xcf\xfc\x9b\x2b\x96\x9b\xb3\xa7\xb3\xff\x07\x00\x00\xff\xff\x25\x79\xfd\x4e\x4d\x46\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 17997, mode: os.FileMode(420), modTime: time.Unix(1537307100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
