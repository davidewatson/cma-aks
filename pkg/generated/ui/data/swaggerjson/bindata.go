// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x18\xa8\x05\xba\x07\xe4\xe2\xbd\xf4\xa5\xc8\x53\x8d\x04\xd8\x33\x72\x69\x83\xfa\x70\xfb\x50\x2c\x8c\x31\x35\xb6\x79\x96\x48\x2d\x39\x72\xd6\x5b\xe4\xbb\x17\xa4\x24\xeb\x8f\x25\x5b\x91\x7b\x59\xdf\x35\xfb\x12\xaf\x45\xce\xdf\x1f\x7f\x9c\x21\xe5\xff\x5c\x00\x04\xf6\x09\x97\x4b\x32\xc1\x0d\x04\xd7\x57\xef\x83\x4b\xf7\x9d\x54\x0b\x1d\xdc\x80\x7b\x0e\x10\xb0\xe4\x88\xdc\xf3\xdb\x28\xb5\x4c\x06\x1e\x50\xe1\x92\x0c\x8c\xef\xa7\xf0\x23\x45\x89\xfb\xf8\x38\xf1\x53\x01\x82\x0d\x19\x2b\xb5\x72\x13\x36\xef\xaf\x7e\xc8\x65\x02\x04\x42\x2b\x46\xc1\x3b\xc1\x00\x81\xc2\xd8\x4b\x7e\x90\x62\x85\x14\xc1\x2f\xa4\xe8\xab\xc4\x7c\x06\x40\x90\x9a\xc8\x3d\x5f\x31\x27\xf6\x66\x34\x5a\x4a\x8e\x70\x7e\x25\x74\x3c\x8a\x37\xd9\xd8\x91\x88\xf1\x7b\x5c\xdb\x72\x0e\xc5\x28\xfd\xac\x62\xc8\xdf\x97\xee\x1b\x37\x2b\xf0\x63\x9e\x2f\x00\x9e\xbd\xa3\x56\xac\x28\x26\x1b\xdc\xc0\xbf\x33\x1b\xbd\xa2\xc2\x60\xf7\x1f\x37\xe3\x93\x1f\x2b\xb4\xb2\x69\x6d\x30\x26\x49\x24\x05\xb2\xd4\x6a\xf4\xab\xd5\xaa\x1c\x9b\x18\x1d\xa6\xa2\xe7\x58\xe4\x95\x2d\xa3\x3d\xc2\x44\x8e\x36\x3f\x8c\x44\x16\xec\x6a\xb4\x96\x54\x0d\x9e\x33\x3f\x8d\x63\x34\x5b\xe7\xeb\x47\x19\x45\x60\x88\x8d\xa4\x0d\x01\xaf\x08\x2c\x23\xa7\x16\xf4\x02\x10\x72\x61\x80\x2a\x04\xc9\x16\xd6\xe9\x9c\x84\x56\x0b\xb9\x84\x85\x36\x20\xb4\x52\x24\x58\x6e\x24\x6f\x77\x71\x04\x08\x74\x42\xc6\x9b\x3c\x09\x9d\x8e\x0f\xc4\x39\x04\xaa\x83\x0c\xd9\x44\x2b\x4b\xb6\x66\x1b\x40\x70\xfd\xfe\x7d\xe3\x2b\x80\x20\x24\x2b\x8c\x4c\x38\x47\x48\x45\x50\xe6\x91\x4b\x08\xee\x4d\x03\x08\xfe\x6c\x68\xe1\x66\xfc\x69\x14\xd2\x42\x2a\xe9\x24\x58\x97\x7c\x5c\xdb\xd2\xb0\x7f\x51\x12\x6d\x83\xda\xdc\xe7\x8b\xb6\xcf\xcf\x15\x0f\x12\x34\x18\x13\x93\x29\xf3\x95\xfd\x6b\xd8\x5e\xa0\xd5\xff\xbd\x3c\xe8\xd7\x3f\x30\x26\x17\x7a\x97\x88\x22\xf8\xac\x61\x4e\x10\x69\xbd\xa6\x10\xd2\xe4\xaa\x29\x42\xfa\x99\x9f\x53\x32\xdb\xe6\x23\x43\x9f\x53\x69\xc8\x65\x61\x81\x91\xa5\xc6\x63\xde\x26\xde\x30\xcb\x46\xaa\x65\xd5\xfd\xe7\xcb\xe3\xee\x08\x43\x21\x29\x96\x18\xd9\x2b\x4c\x92\x99\x0c\x8f\x38\xf7\xf3\x8a\x60\x9c\x24\x93\xd0\x83\x67\xfc\x38\x81\xb1\x10\x64\xed\x59\x7a\xc4\xa4\x50\x71\x0f\x8f\x7e\xf6\x03\x77\x2e\xe1\xf9\xba\x94\xa0\xb5\x4f\xda\xf4\x49\xd3\x63\x3e\xf4\xf7\xe0\x96\x4d\xe7\x3b\xfb\xfb\x81\x70\x5a\x99\xf1\x4d\x3c\xdc\x7d\xfe\x54\xa1\x13\xc6\x65\x93\x48\x8a\xad\xb3\x9c\xfc\xe9\xa2\x11\xa4\x20\xa4\x88\x98\x0e\x13\x7c\x36\xa6\x24\xf4\x03\x64\x7d\xe7\x87\x9e\x27\x5f\xd7\x6c\x3b\x17\xca\xfe\xb8\x42\x06\x69\xab\x94\xfd\x17\x0b\x6e\xa2\x63\xee\x90\x2c\x1b\xbd\x3d\xcb\x85\xf3\x46\xda\xbf\x03\x76\x7b\x23\xed\x3f\x22\x69\x27\xe9\x91\x92\x3c\x31\x7a\x23\x5d\x3f\xd4\x8b\xb4\x6f\x0d\xe1\xb9\x92\x76\xcd\xb6\x57\x21\xed\xb9\x0e\xf7\xd2\x9e\x21\xa2\xed\x49\x05\x10\x6c\xd2\x26\x1e\xfe\x07\x3e\x3f\xd8\x65\x1f\x8f\x87\xa3\xea\xa2\x12\xb0\x66\x1f\x38\x8a\xa4\xe5\x61\xcd\x20\x82\x9b\xeb\xba\x91\x5c\x96\xed\xd5\xe3\xfd\xe4\x14\x9e\x17\x04\xeb\xc6\xbd\x0a\x06\xdf\xf6\xd9\xb7\x7d\xf6\x1c\xdc\xfa\xff\xdc\x67\x5b\x19\xb1\x3c\x60\x7c\x11\x19\xa6\x46\x41\x3e\x15\xa4\x5a\x68\x13\x7b\xda\x03\x9c\xeb\x94\x01\x13\x09\x96\xcc\xe6\xe0\xf6\xfc\x81\xf8\x97\x4c\xc2\xa4\x14\x70\x7e\x1c\x99\xdb\x38\x88\x1f\x87\xe4\x67\x77\x9c\x5a\xb1\xa6\x3c\xd0\xac\xed\xa1\xe3\xfb\xe9\x34\x21\x31\xbe\x9f\x4e\x94\x65\x54\x82\x3e\x18\x9d\x26\xd5\x5c\x16\x88\xd2\xf3\x5f\x49\x94\xdc\x14\x24\xc6\x65\x83\x65\x23\xb8\xc5\x6a\xa9\x85\xbb\x81\xca\xcb\xda\xb3\xe2\x38\xdb\x2d\x12\x55\x39\xa7\x5b\x7a\x4b\xda\xa3\x92\xc9\x7b\xb9\x8e\xc2\x4b\x70\xa3\xe1\xdd\x94\x51\x85\x68\xc2\xd9\xdd\xf5\x6c\x73\x7d\x09\xc4\xe2\xea\xbb\x76\x95\xb1\x54\xb3\xcf\x29\x2a\x96\xbc\xed\x52\x2d\x15\xd3\xb2\x86\x58\x80\x20\x03\x66\xfe\xf8\xaf\xd7\x1d\x86\x3d\x48\x25\xe3\x34\x06\x95\xc6\x73\x32\x2e\x04\x32\x37\xd5\xc2\xbb\x90\x16\x98\x46\x6c\x5d\xe3\xfb\x95\x8c\xee\x32\x11\xbf\xfc\xa6\x26\xe2\x97\x61\x26\xee\x55\xe9\xfb\xe9\xf0\xb9\xb6\xe0\x01\xeb\x2a\x24\x9f\x1e\x54\x61\x9b\xb2\xa0\xc6\x42\x8d\xf5\xd5\xc2\x07\x27\x60\x79\x29\x79\xb6\x4f\x6f\x2f\x83\x34\xe3\x12\xb4\xca\x10\x2d\x19\x0c\x25\xda\x4a\xd6\x66\xdb\x9e\x44\xa7\x52\xe8\x38\x96\x3c\x58\xe3\x0a\xed\x6a\xb7\x88\x24\x43\x2e\xae\x53\x1d\x1b\xa2\x99\x65\xe4\x61\x6b\xea\xe3\x8a\x78\xe5\x72\x64\x40\x69\xf6\x5a\x9d\x44\x78\x42\x0b\x22\x22\x54\xf0\xb4\x22\x05\xf3\x54\x46\x1d\x46\xb8\x47\xe1\x2c\x1c\x6a\xc0\x1d\xb2\x27\x0d\x2f\xa6\xc3\x4d\x7d\x52\x1e\x73\x54\x39\x25\x4b\x0d\xa9\xa5\xd0\xe1\x5c\xe8\x38\x91\x11\xb5\x6b\xcc\x1f\x9a\x41\xfa\x6e\xf3\xc9\x5e\x55\xbb\xfc\x24\x42\x76\x18\x1f\x24\xff\x31\x9f\x0c\x92\xb3\x34\x65\xfa\xb2\xca\x6b\x04\x26\x55\x4a\x2a\x07\xdb\x96\x55\x5c\x5b\x7d\xd9\x1e\x37\xfe\x9a\x9a\x62\x47\x99\x92\xd9\x48\x41\x63\x21\x74\xaa\xf8\x94\xc5\x27\x22\x49\x8a\x5d\x71\x35\x74\x21\xdc\x7a\x09\x93\x10\xde\xe1\x1a\x6f\x7c\x1b\x70\xd7\xc1\x9d\xb9\x32\x4b\xc2\xd0\xf0\x95\x97\x29\x9c\x7a\x21\xb9\xd2\xa2\xfe\xed\x47\x88\x6e\xf1\x60\x16\xba\x0c\x66\xf3\x6d\xf3\xce\x4a\xf8\xfd\x1b\xd0\xc5\x1c\x0c\x59\x9d\x1a\xcf\xc0\xf4\xe5\x06\x22\x8d\x21\xcc\x31\x72\x3c\x69\xbe\x0b\x3a\x53\x55\x16\xb2\xa7\x24\x28\xef\xbf\x86\x06\xab\xad\x2b\xeb\xd8\xee\xb3\xb6\x68\xa8\xa2\xd6\x66\xa9\x63\x55\x15\xdd\xca\x50\x5d\x1d\x3d\x4c\xbb\xb6\x66\x13\x31\x54\xe9\x81\xd6\xa2\x17\xea\x9c\x8c\x4a\x73\xe3\x50\x96\x5a\xca\xae\xa2\x1d\xda\x1c\x17\x54\x50\xd8\x86\xab\x7c\xf5\xdf\x11\xa3\x8c\x26\x4c\xf1\x29\xc0\x1a\x18\x8a\xc9\x5d\xe3\x8a\xb7\x3d\xea\x83\x0b\xd4\x96\x4b\xe4\x8e\xbc\xfa\xab\xfe\x81\x9b\x69\x79\xeb\x51\xbe\x31\x70\x54\x63\xf9\x02\xc1\xc9\x5a\x2b\xef\x22\xf8\x3d\xce\xbf\x8a\xe0\x3e\xb6\x1b\x71\x60\x5b\xc8\x31\xf1\x86\x86\x57\x41\xc3\xa1\x44\xb4\xb4\x7c\xa7\x64\x24\xd2\xa2\x59\x5a\xf7\xf7\xc9\x53\xbf\xdf\xbc\xee\x90\x11\x6e\x49\x75\x46\x4e\xb4\xee\x53\x70\xac\xe5\xde\xdb\xe3\x3a\x8a\xac\x3a\xe3\xf9\xea\xf1\x78\x36\xf3\x87\xfb\xf5\x4d\x4f\xb3\x5a\xab\xa4\x0e\x03\xf3\x4d\xdf\x66\x83\xeb\x85\x81\x5b\x90\x18\xad\xdd\xdf\xac\x14\xf0\x05\xc0\x8e\xae\xdb\x2a\x81\xa6\x2b\x45\x47\x35\xcb\xba\xaf\xae\x6c\xa2\x31\x58\x3f\x86\x0a\x24\x53\xdc\x1c\xdf\xe9\x7d\xaf\x03\x87\x8a\xa0\xe7\x23\xad\x7b\x6e\xed\xcb\x91\xff\x60\x97\xdf\xe4\x60\xa3\xfb\xe5\xa3\xdd\x6d\x54\x67\x95\xef\x06\x84\xfb\x5d\x44\xef\x4b\x92\xc7\x5c\x80\x5f\xf2\xdd\x0b\xb2\xd0\x03\x36\x21\x21\x17\xf9\x9b\x71\x03\x62\x5c\xd3\xf7\x2d\x82\x5d\xa5\xcc\x9d\x57\xdf\x43\x24\xd7\x04\xb8\xee\x28\xc4\xd6\x7f\xb3\x27\xf7\xf9\x9b\xb2\x47\xbc\x4f\xe7\x64\x14\x31\x75\xa8\xf3\x0b\x76\x70\x4a\x0b\x02\x3f\x40\xaf\xf7\xd3\xce\x44\x56\xcc\x58\xc9\xe5\x6a\x86\x1b\x94\x11\xce\x65\x74\xe0\xd0\x68\xae\xb5\xeb\xe3\xbb\x0e\x8d\x5a\x1f\x1f\x3a\x1e\x28\x16\x81\xb4\xf0\xe3\xb8\x63\x5b\x26\x7e\xd2\x66\x3d\x5b\xe0\xdc\x48\x31\x38\x29\xd9\xf4\x7c\xb5\x35\x9a\xe9\xbe\x90\xce\xce\x6d\x4f\xc0\xb2\x5e\xbf\x76\x60\x5d\x4f\x5f\xe1\x96\xac\x8b\x94\x16\x0c\x7d\x4e\xc9\x76\x9c\xc2\xec\xbf\xe1\x7a\x1c\x97\x95\x0a\xaf\x3b\x09\xa1\x6f\x0a\x9a\xa5\x4b\x61\x0c\x14\x87\xf4\xfd\x52\xd3\xf2\xae\xd2\xf9\xa5\xe6\x56\xa7\xf5\x5a\xc2\xc1\x2f\x7f\x65\xa9\x8b\xea\x4f\x28\x13\xa7\xb5\xd2\x70\x3f\xc9\x07\xc2\xd9\x76\x85\x7b\x7e\xf1\x9c\xd8\x3a\x6f\x64\xc7\xa9\x76\x6b\x1d\xf0\x0e\x81\xf9\x37\x2b\x6a\xf6\xf1\x7f\xbc\x82\xf9\xa9\x79\xed\xff\xc2\x0c\xfd\xe1\xb2\x33\x80\x6a\x2a\x07\x0c\x7d\xa3\x57\xbb\x7e\x3b\xc3\xe8\x2d\x60\x77\xad\xe9\x89\xfb\x9f\xf7\xed\x41\xcb\x0b\x8c\x99\x6c\xbd\xdb\x38\x10\xc0\xe3\x57\x24\x87\x4f\xbd\xab\x23\xf7\x83\xbe\x7f\x9c\xe4\xb5\xf8\xd3\xa3\xa2\x26\xaa\x51\x52\x79\x3f\x49\x5f\x98\x8c\xc2\xe8\x4e\x8b\xca\x05\x65\xe3\x1a\xf6\x41\x1b\xca\x2f\x85\xfb\xfd\xe0\xe5\x05\xbf\x51\x71\x96\x5c\x3c\x5f\xfc\x37\x00\x00\xff\xff\x5d\x33\x91\x04\x79\x33\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 13177, mode: os.FileMode(420), modTime: time.Unix(1536260406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
