// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\xba\x15\x7f\xcf\x5f\x71\xa0\x0d\x58\x2f\x90\xc6\xbd\xd9\xcb\x90\xa7\x05\x09\x70\xaf\x91\x9b\x2d\x98\x7b\x6f\x1f\x86\xc2\x38\xa6\x8e\x25\xd6\x12\xa9\xf2\xc3\xa9\x3b\xe4\x7f\x1f\x48\x49\xd6\x87\x25\x5b\x91\xd7\xd6\xed\xd2\x97\xb8\x26\x79\xbe\xf9\x3b\xe7\x90\xf4\x7f\xce\x00\x02\xfd\x88\x51\x44\x2a\xb8\x82\xe0\xf2\xe2\x4d\x70\xee\xbe\xe3\x62\x29\x83\x2b\x70\xe3\x00\x81\xe1\x26\x21\x37\x7e\x93\x58\x6d\x48\xc1\x3d\x0a\x8c\x48\xc1\xf5\xdd\x0c\x7e\xa5\x24\x73\x1f\x1f\xa6\x7e\x29\x40\xb0\x26\xa5\xb9\x14\x6e\xc1\xfa\xcd\xc5\xcf\x05\x4d\x80\x80\x49\x61\x90\x99\x2d\x61\x80\x40\x60\xea\x29\xdf\x73\x16\x23\x25\xf0\x07\x09\xfa\xcc\xb1\x58\x01\x10\x58\x95\xb8\xf1\xd8\x98\x4c\x5f\x4d\x26\x11\x37\xb1\x5d\x5c\x30\x99\x4e\x34\xa6\xda\x8a\xe8\x35\x13\xcc\x4c\x58\x8a\xaf\x71\xa5\xab\x75\x94\x22\xf7\x2b\xd3\x75\x4e\xf2\xef\x91\xfb\xc6\xad\x0c\xfc\x9c\xa7\x33\x80\x27\xaf\xac\x66\x31\xa5\xa4\x83\x2b\xf8\x77\x2e\xa7\x67\x56\x0a\xed\xfe\xe3\x56\xbc\xf7\x73\x99\x14\xda\x36\x26\x63\x96\x25\x9c\xa1\xe1\x52\x4c\x3e\x68\x29\xaa\xb9\x99\x92\xa1\x65\x03\xe7\xa2\x89\x75\x65\xf1\x09\x66\x7c\xb2\xfe\x79\xc2\x72\x83\xd7\x2d\x16\x51\xdd\x80\x4e\x7c\x9b\xa6\xa8\x36\x4e\xd7\x77\x3c\x49\x40\x91\x51\x9c\xd6\x04\x26\x26\xd0\x06\x8d\xd5\x20\x97\x80\x50\x10\x03\x14\x21\x70\xa3\x61\x65\x17\xc4\xa4\x58\xf2\x08\x96\x52\x01\x93\x42\x10\x33\x7c\xcd\xcd\x66\x6b\x47\x80\x40\x66\xa4\xbc\xc8\xd3\xd0\xf1\xf8\x85\x4c\x11\x06\xf5\x49\x8a\x74\x26\x85\x26\xdd\x90\x0d\x20\xb8\x7c\xf3\xa6\xf5\x15\x40\x10\x92\x66\x8a\x67\xa6\x88\x92\x1a\xa1\x5c\x23\xe7\x10\xdc\x59\x06\x10\xfc\x59\xd1\xd2\xad\xf8\xd3\x24\xa4\x25\x17\xdc\x51\xd0\xce\xf9\xb8\xd2\x95\x60\xff\xa2\x2c\xd9\x04\x8d\xb5\x4f\x67\x5d\x9f\x9f\x6a\x1a\x64\xa8\x30\x25\x43\xaa\xf2\x57\xfe\xaf\x25\x7b\x19\xb1\xfe\xef\xf9\x5e\xbd\xfe\x81\x29\x39\xd3\x3b\x47\x94\xc6\x37\x12\x16\x04\x89\x94\x2b\x0a\xc1\x66\x17\x6d\x12\xdc\xaf\xfc\x68\x49\x6d\xda\x43\x8a\x3e\x5a\xae\xc8\x79\x61\x89\x89\xa6\xd6\xb0\xd9\x64\x5e\x30\x6d\x14\x17\x51\x5d\xfd\xa7\xf3\xc3\xea\x30\x45\x21\x09\xc3\x31\xd1\x17\x98\x65\x73\x1e\x1e\x50\xee\x6d\x4c\x70\x9d\x65\xd3\xd0\x07\xcf\xf5\xc3\x14\xae\x19\x23\xad\x4f\x52\x23\x43\x02\x85\x19\xa0\xd1\x5b\x3f\x71\xab\x12\x9e\xae\x4a\x19\x6a\xfd\x28\xd5\x10\x37\x3d\x14\x53\xbf\x07\xb5\xb4\x5d\x6c\xe5\x1f\x16\x84\xb3\xda\x8a\x6f\xa2\xe1\xf6\xf3\xfb\x1a\x9c\x18\x8c\xda\x40\x52\xa6\xcf\x6a\xf1\xfb\xb3\x96\x91\x82\x90\x12\x32\xb4\x1f\xe0\xf3\x39\x15\xa0\xef\x01\xeb\x5b\x3f\xf5\x34\xf1\xba\x21\xdb\xa9\x40\xf6\xbb\x18\x0d\x70\x5d\x87\xec\xbf\x68\x70\x0b\x1d\x72\x87\xa4\x8d\x92\x9b\x93\xdc\x38\x2f\xa0\xfd\x1d\xa0\xdb\x0b\x68\xff\x88\xa0\x9d\xd9\x03\x25\x79\xa6\xe4\x9a\xbb\x9e\x68\x10\x68\xdf\x28\xc2\x53\x05\xed\x86\x6c\x5f\x05\xb4\x17\x32\xdc\x71\x7b\x1e\x11\x5d\x23\xb5\x80\x30\xca\xb6\xe3\xe1\x7f\xa0\xf3\xbd\x8e\x86\x68\x3c\x3e\xaa\xce\x6a\x06\x6b\xf7\x81\x93\x84\x6b\x33\xae\x19\x44\x70\x6b\x5d\x37\x52\xd0\xd2\x83\x7a\xbc\xdf\x1c\xc3\xd3\x0a\xc1\xa6\x70\x5f\x25\x06\x5f\xf2\xec\x4b\x9e\x3d\x05\xb5\xfe\x3f\xf3\xec\x5e\x44\xb4\x59\xa4\x30\xa4\x91\xa0\xb8\x46\x9e\xe0\x22\x21\x28\xc8\x34\x4f\xca\x06\x21\xe4\xef\xc5\xca\x93\x45\xc9\x52\xc0\x53\x69\xb1\x5e\x4e\xc5\x4e\x45\xa3\x17\xe0\x7f\x01\xfe\xef\x0e\xf8\xab\xdb\xa5\x67\x01\xbe\x55\x02\x8a\xa5\xc0\xc5\x52\xaa\xd4\xa3\x39\xe0\x42\x5a\x03\x98\x71\xd0\xa4\xd6\x87\x30\xff\x8f\x9c\xc2\xb4\x22\x70\x7a\xb0\x5f\xc8\x38\x0a\xee\xc7\xf8\x67\x7b\x8f\x56\x93\xa6\xba\xc9\x6a\x34\x4f\xd7\x77\xb3\x59\x46\xec\xfa\x6e\x36\x15\xda\xa0\x60\xf4\x8b\x92\x36\xab\xfb\xb2\x8c\x28\xb9\xf8\x40\xac\xc2\xa6\x20\x53\xce\x1b\x86\xb7\x8c\x5b\xee\x96\x86\xb9\x5b\x51\x79\xde\x18\x2b\xef\x32\xdd\x26\x11\xb5\x54\x14\x79\x49\xba\xad\x92\xd3\x7b\x3e\x8f\x52\x4b\x70\xb3\xe1\xd5\xcc\xa0\x08\x51\x85\xf3\xdb\xcb\xf9\xfa\xf2\x1c\xc8\xb0\x8b\x9f\xba\x59\xa6\x5c\xcc\x3f\x5a\x14\x86\x9b\x4d\x1f\x6b\x2e\x0c\x45\x8d\x88\x05\x08\xf2\xc0\x2c\x86\xff\x7a\xd9\x23\xd8\x3d\x17\x3c\xb5\x29\x08\x9b\x2e\x48\x39\x13\xf0\x42\x54\x0d\xaf\x42\x5a\xa2\x4d\x8c\x76\x59\xf9\x33\x29\xd9\x27\x22\x7e\xfa\xa2\x22\xe2\xa7\x71\x22\x9e\xb5\x44\xed\x70\x87\xf7\xb5\x06\x1f\xb0\xae\x35\xf6\xee\x41\x11\x76\x31\x0b\x1a\x28\xd4\x15\xce\x6f\xf3\x4d\x33\x3a\x84\x57\xd4\x6b\xbf\xfd\x11\x8c\x11\xb8\xb5\x9d\xde\x59\x63\x62\x47\x6e\x0c\x8c\x20\x5f\x3d\xc4\xa6\x4e\x79\x40\x95\xef\xa5\x89\x5f\x07\x19\x72\xa5\xc1\xc4\x68\x80\x84\x2f\xaf\x37\xd2\x3a\x57\x31\x34\x14\x49\xc5\x3f\x13\x28\xd2\xd2\x2a\xe7\x4c\x67\xf7\x35\xa7\x47\x60\x52\x68\x99\xf0\x10\x0d\x85\xb0\xe0\x49\xb2\x4d\x29\xa5\xf5\x5b\xe8\xd6\x81\xc6\x47\xb8\x21\xe2\x66\xbe\x9b\x5c\x9e\x61\xb7\x98\xc0\x60\x04\x52\xe4\x78\xc2\x0d\x28\xca\xa4\xe6\x46\xaa\x1e\x27\x39\x96\x4c\xa6\x29\x37\xa3\x39\xc6\xa8\xe3\x2d\x84\x71\x03\x05\xb9\x5e\x76\x46\x11\xcd\xb5\x41\x33\x2e\x38\xde\xc5\x64\x62\xb7\x43\x14\x08\x69\x3c\x57\x47\x11\x1e\x51\x03\x4b\x08\x05\x3c\xc6\x24\x60\x61\x79\xd2\x23\x84\x1b\x0a\xe7\xe1\x58\x01\x6e\xd1\x78\xc8\xf6\x64\x7a\xd4\x94\x47\xf9\xb1\x88\x2a\xc7\x24\x92\x60\x35\x85\x3e\x74\x65\x9a\xf1\x84\xba\x39\x16\x83\x6a\x14\xbf\x9b\x62\xb1\x67\xd5\x4d\x3f\x4b\xd0\xb8\x18\x1f\x45\xff\xa1\x58\x0c\xdc\xe4\x6e\xca\xf9\xe5\x75\xef\x04\x94\x15\x82\x0b\x17\xb6\x1d\xfb\xbd\xb1\xfb\xf2\x0a\xe3\xfa\xb3\x55\x25\x00\xce\x48\xad\x39\xa3\x6b\xc6\xa4\x15\xe6\x98\xcd\xc7\x12\x4e\xc2\xb8\xd2\x76\xec\x46\xb8\xf1\x14\xa6\x21\xbc\xc2\x15\x5e\xf9\x26\xec\xb6\x27\x73\x15\xcc\x34\x31\x45\xe3\x77\x5e\xce\x70\xe6\x89\x14\x4c\xcb\xee\x63\x58\x3a\x72\x9b\x07\x73\xd3\xe5\x61\xb6\xd8\xb4\x9b\x62\xe6\xd3\x0d\xa0\xb3\x79\x0d\x32\x5f\xd1\xa7\x2b\x48\x24\x86\xb0\xc0\xc4\x65\x29\xf5\x53\xd0\xeb\xaa\xaa\x8d\x38\xc6\x41\x45\xf7\x3b\xd6\x58\x5d\x3d\x71\x4f\xb1\x95\x37\xa5\x63\x19\x75\xb6\xaa\x3d\xbb\xaa\xec\x15\xc7\xf2\xea\xe9\x20\xbb\xb9\xb5\x5b\xb8\xb1\x4c\xf7\x34\x76\xc3\x12\xb6\x8b\xb0\x2a\x26\x5c\x94\x59\x4d\xf9\x0b\x30\x17\x6d\x0e\x0b\x6a\x51\xd8\x15\x57\xc5\xee\xbf\x25\x83\x3c\x99\x1a\x4a\x8f\x09\xac\x91\xa6\x98\xde\xb6\xce\x90\xba\xad\x3e\xba\x3d\xe8\x38\xa5\xea\xf1\xab\x7f\x61\x37\x32\x99\x56\x8f\x0d\xaa\x87\x7a\x07\x39\x56\xef\xf6\x8e\xe6\x5a\x7b\x02\xe8\x73\x9c\x7f\x01\xe8\x3e\x76\x0b\xb1\x27\x2d\x14\x31\xf1\x12\x0d\x5f\x25\x1a\xf6\x39\xa2\xa3\x43\x39\xc6\x23\x89\x64\xed\xd2\x7a\xb8\x4e\x1e\xfa\x7d\xf2\xba\x45\x83\x70\x43\xa2\xd7\x72\xac\x33\x4f\xc1\xa1\x03\x8f\x9d\x1c\xd7\x53\x64\x35\x11\xcf\x57\x8f\x87\xbd\x59\x0c\xee\xd6\x37\x03\xc5\xea\xac\x92\x7a\x04\x2c\x92\xbe\xce\x27\x37\x0b\x03\xb7\x21\x31\x59\xb9\xbf\x79\x29\xe0\x0b\x80\x2d\x5c\x77\x55\x02\x6d\x55\xca\x7e\x76\x9e\xf7\xbe\x7d\xde\x44\xa5\xb0\x79\x08\x18\x70\x43\x69\x7b\x7e\xaf\xf6\x83\x8e\x7b\x6a\x84\x9e\x0e\x1c\x9c\x14\xd2\x76\x57\x0a\xcd\xbe\xfb\x8b\xeb\xe1\xfb\xfc\xc3\xb2\x37\xa7\x0d\xde\xaa\xf7\x3a\xfa\x26\xe7\x60\xfd\xd7\x31\xdb\x57\x2b\xbd\x6d\x89\x9b\x10\xee\xb6\x3d\x83\x1f\x53\x3c\x14\x04\x3c\x46\xf5\x23\x48\xc9\x07\x74\x46\x8c\x2f\x8b\x17\xf4\x23\x6c\xdc\xe0\xf7\x2d\x8c\x5d\xc7\xf8\xad\x56\xaf\x21\xe1\x2b\x02\x5c\xf5\xc4\xf9\xea\x6f\xfa\xe8\x83\x89\x75\xd5\xd4\xde\xd9\x05\x29\x41\x86\x7a\xd8\x79\x84\x19\xed\xd2\x32\xe3\xec\xc9\x07\x77\xb3\x5e\x47\xd6\xc4\x88\x79\x14\xcf\x8b\x0b\x5a\x9e\xec\x39\x63\x5c\x48\x99\x10\x8a\xbe\x33\xc6\xce\xe1\x7d\xe7\x19\xe5\x26\xe0\x1a\x7e\xbd\xee\xa9\x23\xc8\x3c\x4a\xb5\x9a\x2f\x71\xa1\x38\x1b\xed\x94\x7c\x79\xb1\xdb\x5a\xdd\xff\xd0\x90\xce\x8f\xf9\x8f\x88\x65\xb9\xfa\xda\x86\x7d\x44\x5d\xc7\x96\xbc\xed\xe5\x1a\x14\x7d\xb4\xa4\x7b\x8e\x8d\x76\x7f\x09\x73\x38\x2e\x6b\x25\x69\xbf\x13\x42\xdf\xc5\xb4\x6b\xad\x52\x18\x28\xef\x74\x86\xb9\xa6\xe3\x4d\xf3\xe9\xb9\xe6\x46\xda\x66\xf1\xe3\xc2\xaf\x78\xda\xdc\x07\xf5\x47\xd4\xb5\xb3\x46\x2d\xbb\xeb\xe4\x3d\xe6\xec\x7a\xea\x75\x7a\xf6\x9c\xea\x26\x6e\xe4\xe7\xbf\x7a\xa3\x5d\xe0\xed\x0b\xe6\x2f\x56\xbd\xec\xc6\xff\xe1\xb2\xe5\xb7\xf6\xf3\xc0\x67\x7a\xe8\x87\xf3\xce\x08\xa8\xa9\x9d\x88\x3c\xd3\x7a\xcd\x47\x3a\x3f\x82\x15\xcb\x17\x55\x5f\x36\xc6\x0b\xbb\x0d\x29\xcb\xe3\xae\xf7\x5e\x83\x8e\xcc\xbc\x53\xe0\x91\x9b\xb8\x97\xc2\x8e\x5f\x1b\xb7\xf0\x27\xe8\xcf\x25\x6c\x5f\x37\xf8\x84\xfc\xcf\xbb\x9e\x7b\xc4\x5c\x8f\x39\xef\xbc\x64\xdb\xe3\x9f\xc3\x77\x75\xfb\xaf\x5f\xea\x33\x87\x3b\x69\x29\xd5\xb6\xd6\x6d\xa4\x9a\xa6\x83\x7e\xdf\x7d\x35\xf8\x5c\xc7\x0c\xab\xc8\x87\x48\x5e\x44\x52\x29\x77\xfb\xe7\xc9\xf4\xc9\x90\x12\x98\xdc\x4a\x56\x7b\x57\xd1\x7a\x3d\x72\x2f\x15\x15\x6f\x59\x86\xfd\x48\xfb\x99\xbf\xab\x76\xd2\x9c\x3d\x9d\xfd\x37\x00\x00\xff\xff\x20\xa4\xa1\xa4\x31\x3e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 15921, mode: os.FileMode(420), modTime: time.Unix(1537290519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
