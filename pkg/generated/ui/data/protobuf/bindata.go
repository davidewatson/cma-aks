// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xd8\xd1\x4b\xed\x4e\x2c\x26\x4e\xae\xbd\xb1\xea\x4e\x55\x39\x4d\x34\x4e\x6c\x4f\xe4\xcb\xcd\x3d\x69\x56\xe0\x8a\x42\x05\x02\x0c\x00\x4a\x56\x32\xfe\xee\x1d\xfc\x21\x45\x52\x74\x92\xcb\xdd\x43\xf5\x10\x93\xc0\xee\x62\xf7\xb7\x7f\xc1\x24\x09\x4c\x55\xb1\xd7\x3c\x5b\x5b\x38\x7f\xfe\xe2\x67\x98\x63\x6e\x4a\x99\xc1\xfc\x6a\x0e\x53\xa1\xca\x14\x6e\xd0\xf2\x2d\xc1\x54\xe5\x45\x69\xb9\xcc\xe0\x9e\x30\x07\x2c\xed\x5a\x69\x33\x1a\x24\xc9\x20\x49\xe0\x1d\x67\x24\x0d\xa5\x50\xca\x94\x34\xd8\x35\xc1\xa4\x40\xb6\xa6\x6a\xe7\x19\x7c\x24\x6d\xb8\x92\x70\x3e\x7a\x0e\x27\x8e\x60\x18\xb7\x86\xa7\x63\x27\x62\xaf\x4a\xc8\x71\x0f\x52\x59\x28\x0d\x81\x5d\x73\x03\x2b\x2e\x08\xe8\x81\x51\x61\x81\x4b\x60\x2a\x2f\x04\x47\xc9\x08\x76\xdc\xae\xfd\x39\x51\x8a\xd3\x04\x7e\x8b\x32\xd4\xd2\x22\x97\x80\xc0\x54\xb1\x07\xb5\x6a\x12\x02\xda\xa8\xb4\xfb\xad\xad\x2d\x2e\x92\x64\xb7\xdb\x8d\xd0\x2b\x3c\x52\x3a\x4b\x44\x20\x35\xc9\xbb\xd9\xf4\xf5\xcd\xfc\xf5\xd9\xf9\xe8\x79\x64\xfa\x45\x0a\x32\x06\x34\x7d\x2a\xb9\xa6\x14\x96\x7b\xc0\xa2\x10\x9c\xe1\x52\x10\x08\xdc\x81\xd2\x80\x99\x26\x4a\xc1\x2a\xa7\xf4\x4e\x73\x87\xdb\x33\x30\x6a\x65\x77\xa8\xc9\x89\x49\xb9\xb1\x9a\x2f\x4b\xdb\xc2\xac\x52\x91\x9b\x16\x81\x92\x80\x12\x86\x93\x39\xcc\xe6\x43\xf8\xf7\x64\x3e\x9b\x3f\x73\x42\x7e\x9d\xdd\xbf\xbd\xfd\xe5\x1e\x7e\x9d\x7c\xf8\x30\xb9\xb9\x9f\xbd\x9e\xc3\xed\x07\x98\xde\xde\x5c\xcd\xee\x67\xb7\x37\x73\xb8\xfd\x0f\x4c\x6e\x7e\x83\xeb\xd9\xcd\xd5\x33\x20\x6e\xd7\xa4\x81\x1e\x0a\xed\x2c\x50\x1a\xb8\x43\x93\x52\x0f\xdd\x9c\xa8\xa5\xc2\x4a\x05\x95\x4c\x41\x8c\xaf\x38\x03\x81\x32\x2b\x31\x23\xc8\xd4\x96\xb4\x74\x91\x50\x90\xce\xb9\x71\x5e\x35\x80\x32\x75\x62\x04\xcf\xb9\x45\xeb\x97\x8e\xec\x1a\x0d\x1c\xc9\x7b\xce\xd6\x48\x02\x3e\x92\xa4\xcf\x1c\xe1\x1f\xf9\x36\x3c\xfd\x2b\xcb\x91\x8b\x11\x53\xf9\x3f\x07\x03\xb3\x97\x16\x1f\xe0\x12\x86\x85\x56\x56\xbd\x1c\x8e\x07\x83\x02\xd9\xc6\x69\xc0\x72\xc4\x8d\x19\x0f\x06\x3c\x2f\x94\xb6\x30\xcc\x94\xca\x04\x25\x58\xf0\x04\xa5\x54\x51\x81\x91\xe7\x1c\x8e\x6b\x32\xff\xce\xce\x32\x92\x67\x66\x87\x59\x46\x3a\x51\x85\x27\xed\x65\x1b\x0c\xc2\x2e\x9c\x64\xba\x60\xa3\x0c\x2d\xed\x70\x1f\xb6\xd9\x22\x23\xb9\x88\x52\x46\x51\xca\x48\x15\x24\xb1\xe0\xdb\xf3\x6a\xe7\x14\x2e\xe1\xcb\x00\x80\xcb\x95\xba\xf0\x4f\x00\x96\x5b\x41\x17\x30\x9c\x8a\xd2\x58\xd2\xf0\x1e\x25\x66\xa4\x61\x72\x3d\x87\xb7\x24\x0a\xf7\x78\x37\x1b\x8e\x3d\xf1\x36\x64\xcd\x05\x0c\xb7\xcf\x47\x2f\x46\xcf\xe3\x32\x53\xd2\x22\xb3\x95\x48\xf7\x93\x98\x3b\xa9\x1d\x74\x23\xbd\xfb\x95\x5a\x5c\xc0\xd0\x05\xbc\xb9\x48\x92\x8c\xdb\x75\xb9\x74\x60\x27\x26\xe4\xfc\x19\x93\xcc\x26\x2c\xc7\x33\xdc\x98\x06\x1f\x39\xaf\x5c\xc0\xf0\xd8\x4d\x91\xe8\xd1\xfd\xf1\xff\xd0\x83\x25\x2d\x51\x2c\x52\xc5\x4c\xa5\xdc\x8f\x9c\x9b\x92\x61\x9a\x7b\x54\x9d\x4d\x4a\x13\xe0\x52\x95\x16\xbe\x03\xb4\xc7\x01\x80\x61\x6b\xca\xc9\x5c\xc0\xdb\xfb\xfb\xbb\xf9\xb8\xbb\xe2\x16\x98\x92\xa6\xf4\x2b\xc3\x98\xc0\xee\xb4\xe4\xbf\x46\x49\x2f\xa6\xd0\x2a\x2d\xd9\x53\xfb\x8f\xe3\xc1\xc0\x90\xde\x72\x46\xb5\x4e\xc1\x5c\x97\x97\x5c\x08\xc7\xbf\xe5\xbe\xe2\x21\xb0\x40\xe1\xf7\x75\xc1\x60\xaa\x09\x2d\x55\x7c\x27\xad\xd7\xf7\x26\x3b\x05\x4d\xb6\xd4\xd2\x74\xb6\x3e\x50\x21\xf6\xa7\x0d\x9f\xd7\xf1\xe9\xe3\x7f\x84\x05\x1f\x39\x9c\xab\xa8\x3b\xfc\x8a\xd2\xc2\x05\x0c\x7d\x86\x6c\x5f\x24\x51\x9f\x61\x8b\x66\xa9\xd2\xbd\x23\xfa\xeb\x61\xf9\x31\x3a\xb8\x65\x98\x26\xab\x39\x6d\x43\xb9\x30\x16\x6d\x69\x5c\x89\xad\xad\x74\xa5\x00\xb8\x35\xb0\x29\x97\xc4\x94\x5c\xf1\xcc\x57\x13\xa6\xa4\x24\x66\xf9\x96\xdb\x7d\x8d\xc4\x1b\xb2\x35\x0c\x87\xe7\x36\x06\x87\xf5\x1f\x07\x20\xa3\xaf\x03\xd0\x6b\x69\x4a\x82\x2c\xf5\xf8\xef\xca\x6f\xd4\x8a\xb7\x5e\xdb\xba\xb7\xb6\x7e\x5c\xfd\xa8\xc9\xef\xb6\xa0\xf6\x15\x82\xe0\xc6\x3a\x3f\x45\x46\xd3\xe3\x82\x77\x8e\xe4\xa4\xfd\xfe\x94\x2b\xdc\xde\x9f\xed\x8e\xc4\xe9\xf8\x6d\x8b\x4a\x2d\xab\xba\xe8\x0b\xab\xce\x7d\x6a\xc6\x0a\x81\x05\x07\x97\x99\x0d\x77\xbd\x21\x1b\xa7\x8f\x59\x83\xfc\xe4\xb0\x7c\x64\x64\x5c\xff\xd3\x0c\x8c\xea\xf6\xd8\xf6\x38\x18\xe4\x64\x8c\x6b\x6b\xdd\x32\x70\x28\x28\x37\x98\x53\x35\xc6\x54\x59\x66\x15\x2c\xe9\x50\x65\x28\xf5\xc4\x6e\x68\x90\x99\x6f\x06\x70\x09\x2f\xc6\x95\x84\xfb\x75\xa4\x75\x2d\xb9\xea\xe9\x1e\x07\x4f\xd1\x3a\xfa\x2e\xd2\xcd\x0b\x62\x07\xa6\x4b\x38\x1f\x3f\xa9\xad\x07\xaa\x51\x00\xd7\xe4\x67\x0d\xa5\xfd\x38\xd7\x54\x7b\x87\xa6\xa9\xb4\x9b\x9f\xfc\xa4\xe7\x06\x2a\x32\x76\x10\x2a\x91\x12\xa0\x36\x47\x06\xa4\x64\x91\x0b\xd3\x45\x22\xb2\x82\x26\x53\x28\x69\x28\x58\x14\x36\x67\x96\xf2\x9a\xb0\x6b\x42\xab\xe0\x7c\x0f\xda\x42\xa9\x8d\x1b\xd8\x8a\xaf\x62\x3d\xd5\x94\x92\xb4\x1c\x85\x71\x7c\x9f\x4a\xd2\xfb\x7a\x9e\x6a\x96\x92\xc9\xe7\x52\x53\x93\x9a\x35\x9e\x9f\x56\xb6\x03\xf6\xcc\xb4\x34\xe5\x32\x14\xe6\xbd\xb1\x94\x1f\xc3\xd9\x04\xe7\xca\xe3\xf9\x55\x88\xba\xa5\xad\xe9\x63\xb4\x6e\x50\x6d\x9c\xfd\x17\x13\xc0\xb0\xca\x35\x70\xab\xd5\xfe\xf7\xe0\x14\x6b\xdc\x1f\x02\xe9\xb8\xdc\x1e\x14\x9e\xaa\x52\xa4\x2d\xa8\x96\x54\xe9\x19\xb3\xa7\x2f\xf0\xe6\x75\x87\x73\xac\xcd\x30\x8d\x76\xc5\x16\xf8\xb4\xbf\x62\x19\x6d\x68\xd2\x36\xdc\x10\x6a\xb6\x06\x53\x2e\xeb\xa1\x27\x34\xcc\x66\xa5\xfe\xc1\x58\xa9\xcb\xf4\x8f\xc6\x4b\x64\x7a\xd7\xdb\x3d\xa8\x70\x35\x20\xed\x4b\xb6\x63\xa5\x9a\x44\x07\x65\xae\x3a\x99\xd6\x44\x96\xa7\x2d\x1d\x7a\xf2\xb2\x27\xbe\xce\xc7\x7d\x11\x6a\x5a\x5e\xec\xe1\xae\xbd\xf8\xb2\x4f\xe9\x46\xa6\xfc\x7f\xab\xde\xc3\xdf\x18\xc3\xac\xaa\xa6\x30\xf7\xf8\x84\xb8\x06\xfd\x25\xbc\x7a\xba\xe6\xb7\xda\x44\x6f\x59\xa8\x7b\xc7\x19\x08\xbe\x21\xc0\x8d\xf9\x66\x93\xaa\x1a\xbb\x5a\xc1\x75\xb9\x24\x2d\xc9\x52\x8b\x6b\xf3\xb3\x59\x54\x44\x1e\xb2\x26\xb7\xbb\x0e\x7c\xa3\xbb\x4d\xae\xe7\x5e\x63\x74\x09\x15\x40\xfb\x8e\xb6\xc5\x0d\xbc\x9d\x1c\xb2\x63\xcd\xb3\xf5\x02\xb7\xc8\x05\x2e\xb9\xe0\x76\x1f\xa0\x6a\x68\xb2\xc2\xa5\xe6\x2c\xf6\x8d\xd2\x74\xda\x33\xd9\x9d\xd2\x9b\x45\x24\xba\x84\x9f\xc6\x03\x87\x73\xe4\x65\xed\xfa\x50\xc6\xeb\x38\x73\x66\x38\xf6\xa6\xe3\x2a\xd7\x1c\xd5\x87\x2f\x2d\x5c\x8a\x62\x96\x7a\x21\x93\xbb\x19\x4c\x18\x23\xd3\x02\x15\x8b\x62\xd1\x09\x59\xc7\x76\x4f\x12\xa5\xad\xf9\xf0\x88\xcf\x06\x82\x66\xe8\x3a\xbe\x3b\x34\x66\xa7\x74\xfa\x15\xce\xa2\x22\x69\x86\xad\xe3\x9d\x77\xcb\x60\x3f\x7f\xb3\x5a\x06\xd5\x43\xa8\x26\x89\x87\x07\x19\x53\xa5\xf4\x5f\x92\xe2\x8c\xd1\xea\xe5\x1e\x4a\x8a\x31\xa0\xc9\xa8\x52\x33\x32\x70\x42\x0f\x17\x20\x14\xa6\xb0\x44\x81\x92\x91\x3e\xed\x00\x1c\x44\xcc\xc3\xcd\x6f\x12\x0f\x69\x41\x3d\x15\x9c\xa4\x9d\xa5\x70\x82\x1b\xbc\xf0\xc8\x5f\x9d\x36\x35\x67\x9e\xa0\x0f\xee\xc0\x3a\x27\xa6\xc9\x46\xf6\x0a\xa6\x3e\x09\x26\x10\xc6\x3a\xdb\x9b\xa3\x55\xb0\xb7\x83\xc1\x5b\x7d\x85\x16\x61\x4a\xb2\x93\xfd\x42\x85\xc4\xf9\x5a\xa7\x5e\x96\xbc\xdd\x49\xbf\xb3\x43\x55\xd2\xa2\x1f\xaa\xfb\x73\xcb\x57\xae\x2e\xa1\xd8\xb8\xbf\xc1\x3b\xde\x27\x75\xe8\x77\x9c\x73\x38\xb7\xd7\x31\x51\xbd\xea\xb5\x19\x6a\x33\x69\xac\xff\x90\x98\x69\x55\x16\x9d\x7e\x36\xb9\x9e\x57\xfb\x6f\xdc\x36\xf0\xf8\xb6\x08\xd4\xed\x6c\xc7\xac\xc3\xee\x56\xc0\xba\x7f\x42\x66\xf7\x1f\x09\x29\xad\xb8\x74\x57\x33\xbb\x2f\xc8\xdf\x9a\x65\x99\x2f\x5d\xfd\x59\xd5\x07\x06\xc9\x75\x0c\x76\xf5\x3a\x5c\x3a\xa2\x6f\x65\xa3\xd1\xf8\x63\x6a\x82\xde\xa2\xdb\xd5\xcc\x6b\x72\x32\xb7\x28\x53\xd4\xe9\xe2\xea\x7c\xb1\x3d\x7f\x06\x64\xd9\xe8\xb4\x2b\xc8\x93\xd6\x6e\x8d\x82\xde\x73\xc9\xf3\x32\xef\x33\x04\x4e\x52\x5a\x61\x29\xac\x0f\xa1\xcf\xa4\xd5\x41\x24\x97\xf6\xe5\x39\xe4\x5c\x2e\x3e\x95\x28\x6d\xa8\xa7\x2f\xdb\x92\xf1\xe1\x0f\x48\xc6\x87\xa6\xe4\x57\xd5\xe5\xab\xe9\x42\x40\x1d\xe0\x4b\xb6\x28\x4a\x82\x02\xb9\x76\x6d\x0c\x2d\x90\xf4\x1f\x77\xf7\xaa\xf4\xb5\x03\x2d\x65\x4a\xf3\xcf\xcd\xca\xe1\xbc\xb7\xe5\xb4\xf3\x9f\x95\x94\xe0\xa9\x0f\x84\x25\x17\x82\xcb\xac\xe5\x43\x7f\x56\xdb\x6f\x98\xc1\x86\xf6\x5d\x80\x37\xb4\x3f\x72\x94\x23\xf5\xea\x75\x89\x83\xce\xb5\x3b\x1e\x63\x29\x7c\x43\xb6\xd9\x51\x5d\x29\x9d\x87\xbb\x71\x63\x54\x3c\x5c\x82\xe1\x4b\xe4\x0b\x23\xa3\xab\xbe\x15\x77\x35\xf8\x1e\xf3\x75\xc7\xcb\x15\xa8\x82\x74\x28\x22\xee\xb6\x77\x7b\xfd\xc4\x2d\xa4\x12\xd5\x73\x37\x3f\x8a\x6b\x8b\x19\xa8\x30\xa9\x66\xdc\x5d\xf5\x0a\x65\xb8\x55\xfa\x08\xb5\x8c\xdb\xc6\x78\xd0\x41\x6f\x4d\xb0\x46\xb3\xae\x13\x84\x5b\x60\x2a\xcf\xb9\xed\x93\x12\x76\x8e\x42\xbc\x67\x48\xb0\x9a\xc8\x9b\xca\x04\xa1\x84\xdd\x9a\xa4\xaf\x91\xbd\x62\x1d\xf1\xc2\x8d\x6c\x74\x14\xe3\x57\x6e\x51\xad\x42\x7d\xed\xf2\xfa\xc5\x45\x1a\xf8\x5e\xb5\xf8\x3e\x1e\x3c\x9c\xa9\xba\x8c\x32\x95\x17\x5c\x1c\x45\x4a\xa6\x1a\xf8\xfc\xd4\x92\x33\x0d\x1c\xfa\x30\xaf\x34\xf8\x58\xb5\x79\x09\x7f\x6b\x71\xdd\x09\xb4\xce\x73\xc0\x6d\x00\x21\x10\x86\xe6\x9f\x80\x2e\xa5\xff\xcf\x82\x38\x8b\x35\x24\x16\x15\xe3\x25\xfc\xbd\x9b\x91\x95\x49\x8d\xa0\xf0\x5b\x3d\xb1\x12\xad\x59\x34\x3f\x05\x55\x77\x8f\xc1\xff\x02\x00\x00\xff\xff\x81\xb7\x23\xb8\xe2\x1a\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6882, mode: os.FileMode(420), modTime: time.Unix(1536604509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
