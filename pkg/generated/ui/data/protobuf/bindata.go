// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\xdb\x38\xf2\x7f\xef\x4f\x31\xf0\x9b\x7f\xf2\x47\x6b\xb5\xe9\xee\xdd\x22\xb9\x1c\xce\xe7\xf4\x5a\x23\x6d\x5a\x54\xd9\x5d\xec\x2b\x83\xa6\xc6\x32\xcf\x12\xa9\x25\x29\x3b\x6e\x91\xef\x7e\xe0\x83\x24\xea\xc1\xae\xdb\x0d\x70\x7b\x7e\xd1\xd8\xe2\xcc\x70\xe6\x37\x0f\x9c\xa1\x1a\x45\x30\x13\xc5\x5e\xb2\x74\xad\xe1\xe2\xc5\xcb\x9f\x20\x26\xb9\x2a\x79\x0a\xf1\x4d\x0c\xb3\x4c\x94\x09\xdc\x11\xcd\xb6\x08\x33\x91\x17\xa5\x66\x3c\x85\x7b\x24\x39\x90\x52\xaf\x85\x54\x93\x51\x14\x8d\xa2\x08\xde\x31\x8a\x5c\x61\x02\x25\x4f\x50\x82\x5e\x23\x4c\x0b\x42\xd7\x58\xad\x3c\x83\x5f\x50\x2a\x26\x38\x5c\x4c\x5e\xc0\x99\x21\x18\xfb\xa5\xf1\xf9\x95\x11\xb1\x17\x25\xe4\x64\x0f\x5c\x68\x28\x15\x82\x5e\x33\x05\x2b\x96\x21\xe0\x03\xc5\x42\x03\xe3\x40\x45\x5e\x64\x8c\x70\x8a\xb0\x63\x7a\x6d\xf7\xf1\x52\x8c\x26\xf0\x9b\x97\x21\x96\x9a\x30\x0e\x04\xa8\x28\xf6\x20\x56\x21\x21\x10\xed\x95\x36\x9f\xb5\xd6\xc5\x65\x14\xed\x76\xbb\x09\xb1\x0a\x4f\x84\x4c\xa3\xcc\x91\xaa\xe8\xdd\x7c\xf6\xfa\x2e\x7e\xfd\xfc\x62\xf2\xc2\x33\xfd\xcc\x33\x54\x0a\x24\xfe\x5e\x32\x89\x09\x2c\xf7\x40\x8a\x22\x63\x94\x2c\x33\x84\x8c\xec\x40\x48\x20\xa9\x44\x4c\x40\x0b\xa3\xf4\x4e\x32\x83\xdb\x33\x50\x62\xa5\x77\x44\xa2\x11\x93\x30\xa5\x25\x5b\x96\xba\x85\x59\xa5\x22\x53\x2d\x02\xc1\x81\x70\x18\x4f\x63\x98\xc7\x63\xf8\xe7\x34\x9e\xc7\xcf\x8c\x90\x5f\xe7\xf7\x6f\x3f\xfc\x7c\x0f\xbf\x4e\x3f\x7d\x9a\xde\xdd\xcf\x5f\xc7\xf0\xe1\x13\xcc\x3e\xdc\xdd\xcc\xef\xe7\x1f\xee\x62\xf8\xf0\x2f\x98\xde\xfd\x06\xb7\xf3\xbb\x9b\x67\x80\x4c\xaf\x51\x02\x3e\x14\xd2\x58\x20\x24\x30\x83\x26\x26\x16\xba\x18\xb1\xa5\xc2\x4a\x38\x95\x54\x81\x94\xad\x18\x85\x8c\xf0\xb4\x24\x29\x42\x2a\xb6\x28\xb9\x89\x84\x02\x65\xce\x94\xf1\xaa\x02\xc2\x13\x23\x26\x63\x39\xd3\x44\xdb\x47\x3d\xbb\x26\x23\x43\xf2\x9e\xd1\x35\xc1\x0c\x7e\x41\x8e\x9f\x19\x81\xbf\xe5\x5b\xf7\xed\x1f\x69\x4e\x58\x36\xa1\x22\xff\xfb\x68\xa4\xf6\x5c\x93\x07\xb8\x86\x71\x21\x85\x16\xaf\xc6\x57\xa3\x51\x41\xe8\xc6\x68\x40\x73\x42\x36\xea\x6a\x34\x62\x79\x21\xa4\x86\x71\x2a\x44\x9a\x61\x44\x0a\x16\x11\xce\x85\x57\x60\x62\x39\xc7\x57\x35\x99\xfd\x4d\x9f\xa7\xc8\x9f\xab\x1d\x49\x53\x94\x91\x28\x2c\xe9\x20\xdb\x68\xe4\x56\xe1\x2c\x95\x05\x9d\xa4\x44\xe3\x8e\xec\xdd\x32\x5d\xa4\xc8\x17\x5e\xca\xc4\x4b\x99\x88\x02\x39\x29\xd8\xf6\xa2\x5a\x39\x87\x6b\xf8\x32\x02\x60\x7c\x25\x2e\xed\x37\x00\xcd\x74\x86\x97\x30\x9e\x65\xa5\xd2\x28\xe1\x3d\xe1\x24\x45\x09\xd3\xdb\x18\xde\x62\x56\x98\xaf\x1f\xe7\xe3\x2b\x4b\xbc\x75\x59\x73\x09\xe3\xed\x8b\xc9\xcb\xc9\x0b\xff\x98\x0a\xae\x09\xd5\x95\x48\xf3\xe1\x24\x37\x52\x3b\xe8\x7a\x7a\xf3\x29\x65\x76\x09\x63\x13\xf0\xea\x32\x8a\x52\xa6\xd7\xe5\xd2\x80\x1d\x29\x97\xf3\xcf\x29\xa7\x3a\xa2\x39\x79\x4e\x36\x2a\xe0\x43\xe3\x95\x4b\x18\xf7\xdd\xe4\x89\x1e\xcd\x1f\xfb\x0f\x3e\x68\x94\x9c\x64\x8b\x44\x50\x55\x29\xf7\x3d\xfb\x26\xa8\xa8\x64\x16\x55\x63\x93\x90\x08\x64\x29\x4a\x0d\x27\x80\xf6\x38\x02\x50\x74\x8d\x39\xaa\x4b\x78\x7b\x7f\xff\x31\xbe\xea\x3e\x31\x0f\xa8\xe0\xaa\xb4\x4f\xc6\x3e\x81\xcd\x6e\xd1\xbf\x95\xe0\x56\x4c\x21\x45\x52\xd2\x43\xeb\x8f\x57\xa3\x91\x42\xb9\x65\x14\x6b\x9d\x9c\xb9\x26\x2f\x59\x96\x19\xfe\x2d\xb3\x15\x8f\x00\x75\x14\x76\x5d\x16\x14\x66\x12\x89\xc6\x8a\xef\xac\xf5\xf3\xbd\x4a\xcf\x41\xa2\x2e\x25\x57\x9d\xa5\x4f\x58\x64\xfb\xf3\xc0\xe7\x75\x7c\xda\xf8\x9f\x90\x82\x4d\x0c\xce\x55\xd4\x35\x9f\xa2\xd4\x70\x09\x63\x9b\x21\xdb\x97\x91\xd7\x67\xdc\xa2\x59\x8a\x64\x6f\x88\xfe\xbf\x79\xfc\xe8\x1d\xdc\x32\x4c\xa2\x96\x0c\xb7\xae\x5c\x28\x4d\x74\xa9\x4c\x89\xad\xad\x34\xa5\x00\x98\x56\xb0\x29\x97\x48\x05\x5f\xb1\xd4\x56\x13\x2a\x38\x47\xaa\xd9\x96\xe9\x7d\x8d\xc4\x1b\xd4\x35\x0c\xcd\xf7\x36\x06\xcd\xf3\xef\x07\x20\xc5\xe3\x00\x0c\x5a\x9a\x60\x86\x1a\x07\xfc\x77\x63\x17\x6a\xc5\x5b\x3f\xdb\xba\xb7\x96\xbe\x5f\x7d\xaf\xc9\x37\x5b\x50\xfb\x8a\x40\xc6\x94\x36\x7e\xf2\x8c\x6a\xc0\x05\xef\x0c\xc9\x59\xfb\xf7\x21\x57\x98\xb5\xa7\x76\x47\x64\x74\xfc\xba\x45\xa5\xe4\x55\x5d\xb4\x85\x55\xe6\x36\x35\x7d\x85\x20\x05\x03\x93\x99\x81\xbb\xde\xa0\xf6\xdd\xc7\x3c\x20\x3f\x6b\x1e\xf7\x8c\xf4\xcf\x9f\xcc\x40\xaf\xee\xc9\xde\xda\x12\x96\xd9\x86\xa2\x2c\x52\x49\x12\x6c\x67\xd8\x80\xeb\x7e\xae\xe8\xce\xfa\xcf\x0e\xb9\xb0\x5a\x7f\x72\x37\x7a\xa5\xbf\x62\xad\xa7\x1a\x30\xcb\x2b\x56\xe7\x57\xfb\x77\xdb\x9c\xf6\xda\x53\x57\xc8\xbe\x29\xf0\x3d\x95\x92\x8b\x04\x81\x8a\x92\xeb\x01\xd7\xdd\x89\x04\x67\x66\x2d\xf4\x4d\xfd\xf0\x90\xf3\x6a\x82\x27\xf7\x9e\xa2\x24\xfb\x9a\xef\x2c\x4d\xe3\x39\x35\x64\x61\x6c\x68\x6a\x1f\x86\xbf\xda\x36\x85\x2b\x4f\xee\xbf\x8e\x31\x95\xf7\x4e\x70\x1e\x72\x9b\x80\xf5\xa1\x56\x6a\x61\x84\x31\x9e\xd6\x16\xbe\xb6\x24\x5e\xf5\x69\x43\x00\x67\x87\x56\xda\x96\x1f\xa2\x7a\x72\x14\x02\xe5\x4f\x8f\xe4\xc7\xd1\x28\x47\xa5\x4c\xc3\xdd\x6d\x50\x9a\x56\xe7\x8e\xe4\x58\x0d\x58\x15\x54\x5a\xc0\x12\x9b\xfe\x07\x13\x4b\x6c\xc6\x19\x9e\xda\x36\x15\xae\xe1\xe5\x55\x25\xe1\x7e\xed\x69\xcd\xb0\x50\x4d\x1b\xb6\x42\x5b\x8a\xd6\xd6\x1f\x3d\x5d\x5c\x20\x6d\x98\xae\xe1\xe2\xea\xa0\xb6\x16\xcb\xa0\x35\x5b\xa3\x9d\x82\x84\xb4\x83\x66\xa8\xf6\x8e\xa8\x50\x69\x33\xd9\xd9\x19\xd4\x8c\x7a\xa8\x5c\x5c\x2f\x85\xc8\x40\x6c\x7a\x06\x24\xa8\x09\xcb\x54\x17\x09\xcf\x0a\x12\x55\x21\xb8\x42\x67\x91\x5b\x9c\x6b\xcc\x6b\xc2\xae\x09\xad\x56\xe8\x14\xb4\x33\x21\x36\x66\x94\x2c\x8e\x62\x3d\x93\x98\x20\xd7\x8c\x64\xca\xf0\xfd\x5e\xa2\xdc\xd7\x93\x5e\x58\x85\xa7\x9f\x4b\x89\x21\x35\x0d\xbe\x1f\x56\xb6\x03\xf6\x5c\xb5\x34\x65\xdc\xb5\x8c\x7b\xa5\x31\xef\xc3\x19\x82\x73\x63\xf1\x3c\x0a\x51\xb7\xe9\x0a\x7d\x4c\xb4\x19\xa1\x83\xbd\xff\x4f\x39\x30\xb4\x30\xa3\x85\x96\x62\xff\x2d\x38\xf9\xee\xeb\x0f\x81\xd4\x6f\x04\x1b\x85\x67\xa2\xcc\x92\x16\x54\x4b\xac\xf4\xf4\xd9\x33\x14\x78\x71\xdd\x7b\x1b\xd6\x30\x4c\xbd\x5d\xbe\x39\x3f\xec\x2f\xdf\xe0\x05\x9a\xb4\x0d\x57\x48\x24\x5d\x83\x2a\x97\xf5\x38\xe6\x5a\xf9\xb0\x87\xfc\xce\x58\xa9\x1b\xc8\xef\x8d\x17\xcf\xf4\x6e\xb0\xaf\xc5\xc2\xd4\x80\x64\x28\xd9\xfa\x4a\x85\x44\x8d\x32\x37\x9d\x4c\x0b\x91\x65\x49\x4b\x87\x81\xbc\x1c\x88\xaf\x8b\xab\xa1\x08\x55\x2d\x2f\x0e\x70\xd7\x5e\x7c\x35\xa4\x74\x90\x29\x7f\x6e\xd5\x07\xf8\x83\x01\x51\x8b\x6a\x3e\x34\x5f\x0f\x88\x0b\xe8\xaf\xe1\x87\xc3\x35\xbf\x75\x4c\x0c\x96\x85\xfa\xec\x78\x0e\x19\xdb\x20\x90\x8d\xfa\xea\x21\x55\x8d\x1c\x62\x05\xb7\xe5\x12\x25\x47\x8d\x2d\xae\xcd\x4f\x6a\x51\x11\x59\xc8\x42\xee\xe9\x6d\xfc\xb5\xd3\x6d\x7a\x1b\x5b\x8d\x89\x49\x28\x07\xda\x09\xc7\x16\x53\xf0\x76\xda\x64\xc7\x9a\xa5\xeb\x85\x9f\x1f\x58\xc6\xf4\xde\x41\x15\x68\xb2\x22\x4b\xc9\xa8\x3f\x37\x4a\xd5\x39\x9e\x51\xef\x84\xdc\x2c\x3c\xd1\x35\xfc\x78\x35\x32\x38\x7b\x5e\xda\xae\x0f\xa5\xbf\x28\xa4\xc6\x0c\xc3\x1e\x3a\xae\x72\x4d\xaf\x3e\x7c\x69\xe1\x52\x14\xf3\xc4\x0a\x99\x7e\x9c\xc3\x94\x52\x54\x2d\x50\x49\x51\x2c\x3a\x21\x6b\xd8\xee\x91\x13\xae\x6b\x3e\xd2\xe3\xd3\x8e\x20\x0c\x5d\xc3\xf7\x91\x28\xb5\x13\x32\x39\xc2\x59\x54\x24\x61\xd8\x1a\xde\xb8\x5b\x06\x87\xf9\xc3\x6a\xe9\x54\x77\xa1\x1a\x45\x16\x1e\x42\x6d\x9b\x6c\x91\x77\x3d\x46\xeb\x2c\xb7\x50\xa2\x8f\x01\x89\x4a\x94\x92\x9a\xb1\x0e\x1f\x2e\x21\x13\x24\x81\x25\xc9\x08\xa7\x28\xcf\x3b\x00\x3b\x11\xb1\xbb\x93\x9a\xfa\x4d\x5a\x50\xcf\x32\x86\x5c\xcf\x13\x38\x23\x1b\x72\x69\x91\xbf\x39\x0f\x35\xa7\x96\x60\x08\x6e\xc7\x1a\x23\x95\xa8\x3d\x7b\x05\xd3\x90\x04\xe5\x08\x7d\x9d\x1d\xcc\xd1\x2a\xd8\xdb\xc1\x60\xad\xbe\x21\x9a\xc0\x0c\x79\x27\xfb\x33\xe1\x12\xe7\xd8\x49\xbd\x2c\x59\xfb\x24\x3d\xf1\x84\xaa\xa4\x79\x3f\x54\x37\x7b\x2d\x5f\x99\xba\x44\xb2\x8d\xf9\xeb\xbc\x63\x7d\x52\x87\x7e\xc7\x39\xcd\xbe\x83\x8e\xf1\xea\x55\x3f\xc3\x50\x9b\x73\xa5\xed\x2b\x8e\x54\x8a\xb2\xe8\x9c\x67\xd3\xdb\xb8\x5a\x7f\x63\x96\x81\xf9\x5f\x0b\x47\xdd\xce\x76\x92\x76\xd8\xcd\x13\xd0\xe6\x1f\x97\xd9\xc3\x5b\x42\x82\x2b\xc6\xcd\x7c\xa7\xf7\x05\xda\xfb\x3c\x5e\xe6\x4b\x53\x7f\x56\xf5\x86\x4e\x72\x1d\x83\x5d\xbd\x9a\xb9\xc4\xfb\x96\x07\x07\x8d\xdd\xa6\x26\x18\x2c\xba\x5d\xcd\xac\x26\x67\xb1\x26\x3c\x21\x32\x59\xdc\x5c\x2c\xb6\x17\xcf\x00\x35\x9d\x9c\x77\x05\x59\xd2\xda\xad\x5e\xd0\x7b\xc6\x59\x5e\xe6\x43\x86\xc0\x59\x82\x2b\x52\x66\xda\x86\xd0\x67\x94\xa2\x11\xc9\xb8\x7e\x75\x01\x39\xe3\x8b\xdf\x4b\xc2\xb5\xab\xa7\xaf\xaa\x11\x29\x04\x1a\x88\x74\x46\x46\x5b\x92\x95\x08\x05\x61\xd2\x1c\x36\x44\x57\xa3\xe4\x5e\x94\x36\xc3\x89\xc6\x54\x48\xf6\x39\xcc\x6f\x83\xf1\x96\xe1\xce\x5e\x4b\x8b\x8c\x25\xd6\x5d\x4b\x96\xd5\x03\x67\x85\xb4\xdd\xab\x8d\x2e\x49\x61\x83\xfb\x2e\x0c\x1b\xdc\xf7\xe0\x34\xa4\x56\xbd\x2e\xb1\xd3\xb9\x06\xed\xd1\x17\xac\x37\xa8\xc3\x73\xcf\x14\xbc\xd8\xdd\xad\x05\x0d\x5d\x73\x89\x06\x5f\x3c\x9f\x6b\xec\x4c\x8d\xac\xb8\xab\xf6\xb4\xcf\xd7\x6d\x02\x57\x20\x0a\x94\x2e\xd5\xcd\x4c\xf6\xe1\xf6\xc0\xac\x50\x89\x1a\xb8\xdb\xeb\x45\x9f\x26\x29\x08\xd7\x4f\xa6\xcc\x0c\x64\x85\x50\x4c\x0b\xd9\x43\x2d\x65\x3a\x38\xc4\x3b\xe8\xad\x11\xd6\x44\xad\xeb\x30\x66\x1a\xa8\xc8\x73\xa6\x87\xa4\xb8\x95\x5e\x20\x0e\x1c\xe5\x5a\x22\x5a\x53\x69\x86\x84\xc3\x6e\x8d\xdc\x56\xb2\x41\xb1\x86\x78\x61\x1a\x2b\x6c\x22\xd1\x8b\xbe\x31\x0f\xc5\xca\x55\xc1\x2e\xaf\x7d\xb8\x48\x1c\xdf\x0f\x2d\xbe\x5f\x1a\x0f\xa7\xa2\x2e\x76\x54\xe4\x05\xcb\x7a\x91\x92\x8a\x00\x9f\x1f\x5b\x72\x66\x8e\x43\x36\x5d\x45\xc0\x47\xab\xc5\x6b\xf8\x4b\x8b\xeb\x63\x46\xb4\xf1\x1c\x30\xed\x40\x70\x84\xee\x88\x8e\x40\x96\xdc\xbe\x6c\xf4\x1d\x53\x20\xb1\xa8\x18\xaf\xe1\xaf\xdd\x8c\xac\x4c\x0a\x82\xc2\x2e\x0d\xc4\x8a\xb7\x66\x11\x5e\x25\x57\x13\x82\x4f\x81\xe6\x3e\xb6\x3a\xa9\xab\x7b\xd9\x81\xc1\x26\xb8\x76\xfd\xb3\x4e\xee\x75\x86\xda\xb7\xe8\xfd\xdb\xe6\x23\x56\xfd\xf1\x11\xdf\x27\xd2\xc0\xae\x10\x1e\x55\x7e\xc3\xe6\x06\x3c\x50\xbe\xc7\x5b\x39\xb1\x56\xbc\xe2\xfe\x12\xa2\xda\xca\xeb\x60\x78\xe8\xdd\x2f\x9f\xe2\x37\xbf\xf3\x1f\xba\xdc\x6a\x6f\x7c\xda\xed\xd6\xc0\x85\xf7\xc9\xd7\x5b\x15\x5a\xff\xcd\xab\xad\x23\x36\xff\xa9\x47\xb5\xb6\xde\x03\xb3\xda\xe3\x01\x13\x7b\x9d\xee\x53\xf4\xac\x2f\x87\xcb\x53\x70\x0d\xdf\x4f\xe1\xf0\x9d\xc2\xff\x5a\x65\x3a\xcd\xb0\xa7\xb8\x4f\xd2\xad\xda\x64\xf7\x2d\x0c\x99\x31\xfc\xe8\xcd\xc8\x7d\x9f\xb1\x79\x21\xe2\xfa\xc8\xa0\xd9\x0f\x32\xa2\xf3\x6a\xa4\xef\x9a\xc3\xf7\x32\x07\xdd\xf0\x44\x37\x77\x5e\x78\xd5\xbb\xd7\x68\xb4\x54\x11\x09\x2e\x2c\x44\xe1\x14\xa3\x85\x26\x19\x24\xa8\xec\xff\x92\x32\x34\x6a\x00\x88\x1f\x0e\x02\xd1\x71\xe5\x6e\x8d\xe4\x58\x65\xb3\xef\x79\x9e\xec\xaa\xb4\x52\xe8\xc8\x6b\x9c\xa3\x09\x74\xd4\x53\xfd\x49\xc4\xa2\x63\xdd\xd3\x7d\xcb\x34\x38\x7e\x34\x7e\x79\x4f\x1e\xbe\x55\x14\x79\x18\x98\x64\xfa\xf1\xe3\xae\x35\xbe\x35\x87\xdb\xee\x3c\xfa\x7a\xeb\xe0\x99\x35\xf0\xc2\xcd\x7a\xd8\x0d\x51\x27\xbc\x96\x79\x1c\xfd\x27\x00\x00\xff\xff\xbc\xa0\x0f\x23\xd7\x28\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 10455, mode: os.FileMode(420), modTime: time.Unix(1538170569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
