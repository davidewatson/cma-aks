// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\xdd\x73\x1a\x39\xf2\xef\xfc\x15\x5d\xbc\xfc\x9c\x5f\x25\x90\x38\xd9\xbb\x2d\xfb\x7c\x75\x1c\x78\x13\xca\x09\x76\x79\x9c\x6c\xed\x13\x25\x66\x9a\x41\x87\x46\x9a\x95\x34\x10\x92\xf2\xff\x7e\xa5\x8f\x19\x34\x1f\x10\x92\x75\xd5\xed\xf2\x60\x33\xa3\xee\x56\x7f\xab\xbb\xc5\x70\x08\x63\x91\xef\x24\x4d\x57\x1a\xce\x5f\xbe\xfa\x19\x22\x92\xa9\x82\xa7\x10\x4d\x22\x18\x33\x51\x24\x30\x23\x9a\x6e\x10\xc6\x22\xcb\x0b\x4d\x79\x0a\x0f\x48\x32\x20\x85\x5e\x09\xa9\x06\xbd\xe1\xb0\x37\x1c\xc2\x7b\x1a\x23\x57\x98\x40\xc1\x13\x94\xa0\x57\x08\xa3\x9c\xc4\x2b\x2c\x57\x9e\xc3\x27\x94\x8a\x0a\x0e\xe7\x83\x97\x70\x66\x00\xfa\x7e\xa9\xff\xec\xd2\x90\xd8\x89\x02\x32\xb2\x03\x2e\x34\x14\x0a\x41\xaf\xa8\x82\x25\x65\x08\xf8\x39\xc6\x5c\x03\xe5\x10\x8b\x2c\x67\x94\xf0\x18\x61\x4b\xf5\xca\xee\xe3\xa9\x18\x4e\xe0\x37\x4f\x43\x2c\x34\xa1\x1c\x08\xc4\x22\xdf\x81\x58\x86\x80\x40\xb4\x67\xda\x7c\x56\x5a\xe7\x17\xc3\xe1\x76\xbb\x1d\x10\xcb\xf0\x40\xc8\x74\xc8\x1c\xa8\x1a\xbe\x9f\x8e\xaf\x67\xd1\xf5\x8b\xf3\xc1\x4b\x8f\xf4\x91\x33\x54\x0a\x24\xfe\x5e\x50\x89\x09\x2c\x76\x40\xf2\x9c\xd1\x98\x2c\x18\x02\x23\x5b\x10\x12\x48\x2a\x11\x13\xd0\xc2\x30\xbd\x95\xd4\xe8\xed\x39\x28\xb1\xd4\x5b\x22\xd1\x90\x49\xa8\xd2\x92\x2e\x0a\x5d\xd3\x59\xc9\x22\x55\x35\x00\xc1\x81\x70\xe8\x8f\x22\x98\x46\x7d\xf8\xf7\x28\x9a\x46\xcf\x0d\x91\x5f\xa7\x0f\xef\x6e\x3f\x3e\xc0\xaf\xa3\xfb\xfb\xd1\xec\x61\x7a\x1d\xc1\xed\x3d\x8c\x6f\x67\x93\xe9\xc3\xf4\x76\x16\xc1\xed\x2f\x30\x9a\xfd\x06\x37\xd3\xd9\xe4\x39\x20\xd5\x2b\x94\x80\x9f\x73\x69\x24\x10\x12\xa8\xd1\x26\x26\x56\x75\x11\x62\x8d\x85\xa5\x70\x2c\xa9\x1c\x63\xba\xa4\x31\x30\xc2\xd3\x82\xa4\x08\xa9\xd8\xa0\xe4\xc6\x13\x72\x94\x19\x55\xc6\xaa\x0a\x08\x4f\x0c\x19\x46\x33\xaa\x89\xb6\xaf\x5a\x72\x0d\x7a\x06\xe4\x03\x8d\x57\x04\x19\x7c\x42\x8e\x5f\x28\x81\x7f\x64\x1b\xf7\xed\x5f\x69\x46\x28\x1b\xc4\x22\xfb\x67\xaf\xa7\x76\x5c\x93\xcf\x70\x05\xfd\x5c\x0a\x2d\x5e\xf7\x2f\x7b\xbd\x9c\xc4\x6b\xc3\x41\x9c\x11\xb2\x56\x97\xbd\x1e\xcd\x72\x21\x35\xf4\x53\x21\x52\x86\x43\x92\xd3\x21\xe1\x5c\x78\x06\x06\x16\xb3\x7f\x59\x81\xd9\xe7\xf8\x45\x8a\xfc\x85\xda\x92\x34\x45\x39\x14\xb9\x05\xed\x44\xeb\xf5\xdc\x2a\x9c\xa5\x32\x8f\x07\x29\xd1\xb8\x25\x3b\xb7\x1c\xcf\x53\xe4\x73\x4f\x65\xe0\xa9\x0c\x44\x8e\x9c\xe4\x74\x73\x5e\xae\x3c\x83\x2b\xf8\xda\x03\xa0\x7c\x29\x2e\xec\x37\x00\x4d\x35\xc3\x0b\xe8\x8f\x59\xa1\x34\x4a\xf8\x40\x38\x49\x51\xc2\xe8\x26\x82\x77\xc8\x72\xf3\xf5\x6e\xda\xbf\xb4\xc0\x1b\x17\x35\x17\xd0\xdf\xbc\x1c\xbc\x1a\xbc\xf4\xaf\x63\xc1\x35\x89\x75\x49\xd2\x7c\x38\xc9\x0c\xd5\x86\x76\x3d\xbc\xf9\x14\x92\x5d\x40\xdf\x38\xbc\xba\x18\x0e\x53\xaa\x57\xc5\xc2\x28\x7b\xa8\x5c\xcc\xbf\x88\x79\xac\x87\x71\x46\x5e\x90\xb5\x0a\xf0\xd0\x58\xe5\x02\xfa\x6d\x33\x79\xa0\x47\xf3\xcf\xfe\xc1\xcf\x1a\x25\x27\x6c\x9e\x88\x58\x95\xcc\xfd\xc8\xbe\x09\xaa\x58\x52\xab\x55\x23\x93\x90\x08\x64\x21\x0a\x0d\x27\x28\xed\xb1\x07\xa0\xe2\x15\x66\xa8\x2e\xe0\xdd\xc3\xc3\x5d\x74\xd9\x7c\x63\x5e\xc4\x82\xab\xc2\xbe\xe9\xfb\x00\x36\xbb\x0d\xff\xa3\x04\xb7\x64\x72\x29\x92\x22\x3e\xb4\xfe\x78\xd9\xeb\x29\x94\x1b\x1a\x63\xc5\x93\x13\xd7\xc4\x25\x65\xcc\xe0\x6f\xa8\xcd\x78\x04\x62\x07\x61\xd7\x65\x1e\xc3\x58\x22\xd1\x58\xe2\x9d\xd5\x1e\x3f\xa8\xf4\x19\x48\xd4\x85\xe4\xaa\xb1\x74\x8f\x39\xdb\x3d\x0b\x6c\x5e\xf9\xa7\xf5\xff\x01\xc9\xe9\xc0\xe8\xb9\xf4\xba\xfd\x27\x2f\x34\x5c\x40\xdf\x46\xc8\xe6\xd5\xd0\xf3\xd3\xaf\xc1\x2c\x44\xb2\x33\x40\xff\xbf\x7f\xfd\xe8\x0d\x5c\x13\x4c\xa2\x96\x14\x37\x2e\x5d\x28\x4d\x74\xa1\x4c\x8a\xad\xa4\x34\xa9\x00\xa8\x56\xb0\x2e\x16\x18\x0b\xbe\xa4\xa9\xcd\x26\xb1\xe0\x1c\x63\x4d\x37\x54\xef\x2a\x4d\xbc\x45\x5d\xa9\x61\xff\xbd\xae\x83\xfd\xfb\x1f\x57\x40\x8a\xc7\x15\xd0\x29\x69\x82\x0c\x35\x76\xd8\x6f\x62\x17\x2a\xc6\x6b\x8f\x75\xde\x6b\x4b\x3f\xce\xbe\xe7\xe4\xbb\x25\xa8\x6c\x45\x80\x51\xa5\x8d\x9d\x3c\xa2\xea\x30\xc1\x7b\x03\x72\x56\x7f\x3e\x64\x0a\xb3\xf6\xd4\xe6\x18\x1a\x1e\xbf\x2d\x51\x21\x79\x99\x17\x6d\x62\x95\x99\x0d\x4d\x9f\x21\x48\x4e\xc1\x44\x66\x60\xae\xb7\xa8\x7d\xf5\x31\x0d\xc0\xcf\xf6\xaf\x5b\x42\xfa\xf7\x4f\x26\xa0\x67\xf7\x64\x6b\x6d\x08\x65\xb6\xa0\x28\xf2\x54\x92\x04\xeb\x11\xd6\x61\xba\x8f\x25\xdc\x59\xfb\xdd\x21\x13\x96\xeb\x4f\x6e\x46\xcf\xf4\x37\xa4\xf5\x50\x1d\x62\x79\xc6\xaa\xf8\xaa\x3f\xd7\xc5\xa9\xaf\x3d\x75\x86\x6c\x8b\x02\x3f\x92\x29\xb9\x48\x10\x62\x51\x70\xdd\x61\xba\x99\x48\x70\x6c\xd6\x42\xdb\x54\x2f\x0f\x19\xaf\x02\x78\x72\xeb\xa9\x98\xb0\x6f\xd9\xce\xc2\xec\x2d\xa7\xba\x24\x8c\x0c\x4c\x65\xc3\xf0\xa9\x2e\x53\xb8\xf2\xe4\xf6\x6b\x08\x53\x5a\xef\x04\xe3\x21\xb7\x01\x58\x1d\x6a\x85\x16\x86\x18\xe5\x69\x25\xe1\xb5\x05\xf1\xac\x8f\xf6\x00\x70\x76\x68\xa5\x2e\xf9\x21\xa8\x27\xd7\x42\xc0\xfc\xe9\x9e\xfc\xd8\xeb\x21\x2f\xb2\xb2\xbc\x89\xdc\x49\x5f\x15\x39\x33\xa1\x41\xa1\x33\x77\xf4\x30\x7a\xf8\x18\xcd\x3f\xce\xa2\xbb\xeb\xf1\xf4\x97\xe9\xf5\x04\xae\xe0\xe5\x65\x09\xfa\xb0\x42\xb8\xbb\xbf\xfd\x34\x8d\xa6\xb7\xb3\xe9\xec\xad\xad\x1a\x10\x28\x4f\x4c\x55\x85\xca\x56\x12\xa5\xa2\xa9\x82\x05\x1a\x25\xc6\xb6\xf4\x49\x06\x96\x4a\x0d\xfd\x0a\x5e\xd5\x68\xdf\x7f\x9c\x7d\x93\xec\x8a\x18\xba\xc8\x4b\xb2\xae\x4a\x51\xb0\x2c\x18\xdb\x41\xa1\x8c\x25\xdc\x56\x25\xb5\x2b\x38\xaf\xef\x72\x3d\xbe\x9d\x8d\xa7\xef\xbb\x77\x22\x1a\x94\xc8\x10\xb6\x42\xae\x0d\x5d\x62\x2a\x1d\x64\x3b\x2f\x4c\x22\x38\x9a\x3e\x2e\x60\xe9\x39\xa8\x22\x5e\x01\x51\x3e\x13\x1a\x30\xb3\x9c\x11\xcb\xb0\x90\x2e\xa8\xca\xae\xd1\x33\x17\x30\x71\x05\xaf\x6b\x0c\x46\x0f\xb7\x77\x77\x27\xab\xd7\x95\x14\x89\xb7\x9f\xc7\xbc\x82\x37\x35\x92\xd7\xf7\xf7\xb7\xf7\x47\xe9\x99\x76\x7b\x81\x50\x70\xa7\x42\x8b\xec\xb0\xae\xe0\xa7\x1a\xad\xc9\xf5\xdb\xfb\xd1\xe4\x7a\x72\x94\x9c\xef\xab\x15\x14\xca\x04\x5d\x6c\xfd\x5e\x0b\x90\xa8\xb4\xe9\x02\x8c\xb9\x60\x59\x70\xbb\x40\x58\x59\x4a\x56\xb4\xaf\xe0\x6f\x97\xc6\x73\x33\x54\xca\xb4\x8a\xcd\xd2\x3a\xf0\x5f\x92\x61\x39\x1a\x28\x77\xd7\xc2\xc8\x52\x55\xee\x5e\x3b\xa6\x11\xe7\xa9\x6d\xb0\x5a\xae\x67\x61\x4d\x9b\x5b\xf6\xc9\xb6\xb6\xb0\x10\xb5\xad\xef\x3c\x5c\x94\x63\xbc\x47\xb2\x2e\x76\x88\x5b\x9b\x05\x82\xa6\x62\x85\xb6\x7f\xb7\x7e\xa1\x6b\x6c\x6f\x89\x0a\x99\x86\xc5\xce\x4d\x4f\x8c\x32\x51\xb9\x10\x5d\x08\xc1\x40\xac\x5b\x02\x24\xa8\x09\x65\xaa\xa9\x09\x8f\x6a\xf4\x9e\x0b\xae\x9c\x5d\x3d\x63\x53\x8d\x59\x05\xd8\x14\xa1\x56\xc4\x9f\xa2\x6d\x26\xc4\x1a\x13\x28\xf2\xa3\xba\x1e\x4b\x4c\x90\x6b\x4a\x98\x32\x78\xbf\x17\x28\x77\xd5\x8c\x22\xac\x1f\x46\x5f\x0a\x89\x21\x74\x1c\x7c\x3f\xcc\x6c\x43\xd9\xd3\x46\xd0\xb8\xc0\x55\x3b\xa5\x31\x6b\xab\x33\x54\xce\xc4\xea\xf3\xa8\x8a\x9a\xed\x42\x68\x63\xa2\x4d\x84\x06\x7b\xff\x9f\x72\xca\xd0\xc2\x34\xc5\x5a\x8a\xdd\xf7\xe8\xc9\xf7\x0d\x7f\x48\x49\xed\x16\x66\xcf\xf0\x58\x14\x2c\xa9\xa9\x6a\x81\x25\x9f\x3e\x7a\xba\x1c\x2f\xaa\xba\x46\x83\x1a\xba\xa9\x97\xcb\xb7\x95\x87\xed\xe5\x5b\x93\x80\x93\xba\xe0\x0a\x89\x8c\x57\xa0\x8a\x45\x35\x48\x70\x4d\x68\xd8\xfd\xfc\xa0\xaf\x54\xad\xcf\x8f\xfa\x8b\x47\x7a\xdf\xd9\x91\x61\xee\xce\xa7\x8e\x60\x6b\x33\x15\x02\xed\x99\x99\x34\x22\x2d\xd4\x2c\x4d\x6a\x3c\x74\xc4\x65\x87\x7f\xed\x0f\xc2\x51\x92\x50\x97\x7a\x3b\x5a\xaf\xfa\x40\xe0\x00\x49\x07\x30\x2f\x25\x68\x1e\x62\x87\xf1\xeb\x75\x48\xe5\x21\x6f\xba\x14\x12\x44\xe1\x5f\x5f\x2d\x61\x56\x08\x66\x2a\x5a\x94\x23\x15\xf3\xf5\x00\xd9\x00\xbe\x79\xb6\x7f\xb7\xa6\x7f\x3a\x7c\x56\xd5\x8e\xb7\xce\x74\x56\x9d\x79\x2f\x80\xd1\x35\x02\x59\xab\x6f\x1e\xae\x65\x93\x2f\x96\x70\x53\x2c\x50\x72\xd4\x58\xc3\x5a\xff\xac\xe6\x25\x90\x35\x47\x88\x3d\xba\x89\xbe\x75\x2a\x8f\x6e\x22\xcb\x31\x31\x89\xc0\xe9\xfc\x84\xe3\x96\x2a\x78\x37\xda\x47\xf5\x8a\xa6\xab\xb9\xef\xd8\xa9\xa9\x48\x5a\x9a\x5e\x92\x85\xa4\xb1\x3f\xef\x0a\xd5\x28\x2b\x50\x9b\x9a\x71\xee\x81\xac\x9a\x8d\x9e\x3d\x6e\x5c\xcf\x6b\x85\x1f\xcd\xdb\x2a\xb6\xac\x18\x4b\xdb\x95\xa6\x69\xe5\xb5\xaf\x35\xbd\xe4\xf9\x34\xb1\x44\x46\x77\x53\x18\xc5\x31\xaa\x9a\x52\x49\x9e\xcf\x1b\xe1\x60\xd0\x1e\x90\x13\xae\x2b\x3c\xd2\xc2\xd3\x0e\xa0\x59\x36\xdf\x11\xa5\xb6\x42\x26\x47\x30\xf3\x12\xa4\x55\xd1\x36\xd3\x77\x37\x7e\x98\xe5\x1d\xeb\x2e\x29\x0c\x87\x56\x3d\x24\xb6\x8d\xa9\xd5\xbc\xab\x8d\x6a\x35\x88\x6b\x08\xbc\x0f\x48\x54\xa2\x90\x31\x2a\x38\xc3\xcf\x17\xc0\x04\x49\x60\x41\x18\xe1\x31\xca\x67\x0d\x05\xfb\x28\x71\x53\xe0\x91\xdf\xa4\xa6\xea\x31\xa3\xc8\xf5\x34\x81\x33\xb2\x26\x17\x56\xf3\x93\x67\x21\xe7\xb1\x05\xe8\x52\xb7\x43\x8d\x30\x96\xa8\x3d\x7a\xa9\xa6\x2e\x0a\xca\x01\xfa\xf3\xa1\x33\x46\x4b\x67\xaf\x3b\x83\x95\x7a\x42\x34\x81\x31\xf2\x46\xf2\x60\xc2\x05\xce\xb1\x0a\x63\x51\xd0\x7a\x05\x70\xe2\xc9\x5a\x52\xf3\x76\x28\x67\xe9\x35\x5b\x99\xb4\x46\xd8\xda\xfc\x77\xd6\xb1\x36\xa9\x5c\xbf\x61\x9c\xfd\xbe\x9d\x86\xf1\xec\x95\x8f\xa1\xab\x4d\xb9\xd2\xf6\x52\x31\x95\xa2\xc8\x1b\xe7\xf0\xe8\x26\x2a\xd7\xdf\x9a\x65\xa0\xfe\x69\xee\xa0\xeb\xd1\x4e\xd2\x06\xba\x79\x03\xda\xfc\x71\x91\xdd\xbd\x25\x24\xb8\xa4\x1c\x81\x80\xde\xe5\x68\x7b\x53\x5e\x64\x0b\x93\x7f\x96\xd5\x86\x8e\x72\xe5\x83\x4d\xbe\xf6\x93\x00\x6f\x5b\x1e\x1c\x62\x76\x9b\x0a\xa0\x33\xe9\x36\x39\xb3\x9c\x9c\x45\x9a\xf0\x84\xc8\x64\x3e\x39\x9f\x6f\xce\x9f\x03\xea\x78\xf0\xac\x49\xc8\x82\x56\x66\xf5\x84\x3e\x50\x4e\xb3\x22\xeb\x12\x04\xce\x12\x5c\x92\x82\x69\xeb\x42\x5f\x50\x8a\x3d\x49\xca\xf5\xeb\x73\xc8\x28\x9f\xff\x5e\x10\xae\x5d\x3e\x7d\x5d\x0e\x25\x42\x45\x03\x91\x4e\xc8\xe1\x86\xb0\x02\x21\x27\x54\xfa\x56\xdc\x0f\x6f\x76\xa2\xb0\x11\x4e\x34\xa6\x42\xd2\x2f\x61\x7c\x1b\x1d\x6f\x28\x6e\xed\x45\x90\x60\x34\xb1\xe6\x5a\x50\x56\x8d\x78\x4a\x4d\xdb\xbd\xea\xda\x25\x29\xac\x71\xd7\x54\xc3\x1a\x77\x2d\x75\x1a\x50\xcb\x5e\x13\xd8\xf1\x5c\x29\xed\xd1\x27\xac\xb7\xa8\xc3\x73\xcf\x24\xbc\xc8\x4d\xb3\x83\x42\x74\x3f\xb6\x86\xaf\x1e\xcf\x15\xa4\x26\x47\x96\xd8\x65\x59\xdd\xc6\x6b\x16\xaf\x4b\x10\x39\x4a\x17\xea\xa6\x97\xbc\xbd\x39\xd0\xe3\x94\xa4\x3a\xa6\xe9\x2d\xef\xd3\x24\x2d\x07\x1e\x29\x35\x8d\x64\x2e\x14\xd5\x42\xb6\xb4\x96\x52\x1d\x1c\xe2\x0d\xed\xad\x10\x56\x44\xad\x2a\x37\xa6\x1a\x62\x91\x65\x54\x77\x51\x71\x2b\x2d\x47\xec\x38\xca\xb5\x44\xb4\xa2\xc6\x0c\x09\x87\xed\x0a\xb9\xcd\x64\x9d\x64\x0d\xf0\xdc\x0d\x2d\x2a\x4f\xf4\xa4\x27\xe6\xa5\x58\xba\x2c\xd8\xc4\xb5\x2f\xe7\x89\xc3\x7b\x53\xc3\xfb\xb4\xb7\x70\x2a\xaa\x64\x17\x8b\x2c\xa7\xac\xe5\x29\xa9\x08\xf4\xf3\x53\x8d\xce\xd8\x61\xc8\x7d\x55\x11\xe0\xc5\xe5\xa2\x1d\x8a\x04\x58\x77\x8c\x68\x63\x39\xa0\xda\x29\xc1\x01\xba\x23\x7a\x08\xb2\xe0\xf6\x7a\xdf\x57\x4c\x01\xc5\xbc\x44\xbc\x82\xbf\x37\x23\xb2\x14\x29\x70\x0a\xbb\xd4\xe1\x2b\x5e\x9a\x79\x58\x2a\x97\x9d\x8d\x0f\x81\xfd\x0d\x48\x79\x52\x97\x37\x21\x1d\x0d\x59\x70\xd1\xf1\x67\x9d\x38\x54\x11\x6a\x7f\xb7\xd2\xbe\xdf\x39\x22\xd5\x1f\x1f\x4d\xf8\x40\xea\xd8\x15\xc2\xa3\xca\x6f\xb8\xbf\x73\x0a\x98\x6f\xe1\x96\x46\xac\x18\x2f\xb1\xbf\x86\x5a\xad\xc5\x75\xd0\x3c\xb4\x6e\x74\x4e\xb1\x9b\xdf\xf9\x0f\x0d\xe5\xea\x1b\x9f\x36\x95\xeb\xb8\x62\x3a\x79\x2c\x57\x6a\xeb\x7f\x39\x92\x3b\x22\xf3\x9f\xba\x55\xab\xf3\xdd\xd1\xab\x3d\x1e\x10\xb1\x55\xe9\x3e\x45\xcd\xfa\xaa\x3b\x3d\x05\x17\x5f\xed\x10\x0e\x6f\xf1\xfe\x6a\x99\xe9\x34\xc1\x9e\x62\x0e\xa6\x6b\xb9\xc9\xee\x9b\x1b\x30\x23\xf8\xd1\xa9\xcb\x43\x1b\x71\x7f\x05\xe9\xea\xc8\xa0\xd8\x0f\x22\xa2\x71\x19\xd9\x36\xcd\xe1\x99\xcf\x41\x33\x3c\xd1\xc4\xd1\x13\x2f\x6b\xf7\x4a\x1b\x35\x56\x44\x82\x73\xab\xa2\xb0\x8b\xd1\x42\x13\x06\x09\x2a\xfb\xbb\x44\x03\xa3\x3a\x14\xf1\xe6\xa0\x22\x1a\xa6\xdc\xae\x90\x1c\xcb\x6c\xf6\x66\xf5\xe9\x47\xbc\x47\x6e\x4e\x8f\x46\xd0\x51\x53\xbd\x75\x4d\x96\xe9\x23\x93\x24\xbc\xca\x2d\x6b\x1c\x63\xce\x42\x4a\xe4\x9a\xed\x40\x70\xfb\xc7\x7b\x54\xea\x9a\x3e\x05\x84\x31\xb1\xc5\xc4\x38\xf5\xe8\x26\x7a\x0e\x5b\xca\x98\xbb\xee\xb3\x91\x93\x09\x89\xa6\xf9\xe0\xf0\x0a\x90\x6b\xb9\x03\x46\xaa\x1f\x35\x54\xcd\xa4\xb1\x7f\x20\x95\x89\x23\xd7\xbd\x99\xbd\xaa\x86\xf2\xfc\x90\x93\xb9\xd9\xc7\xf7\x06\xba\xaf\x3d\x6b\xd3\x8b\x4e\x26\x6a\x45\xfc\x2c\x74\xc1\xd3\xfb\xc7\x76\xdb\x67\x5d\xd1\xc6\x42\xf3\x12\x1d\x0e\xf5\x7b\x8d\x4e\x92\x7c\xfe\x11\x92\xe4\x73\x67\x0b\x79\x82\xb3\x1d\x3f\xe3\x3b\x7e\x12\x60\x23\xc2\x35\x9d\x27\x5c\xbf\x3d\xf6\xfe\x1b\x00\x00\xff\xff\x0e\xf1\xed\xbb\x79\x2d\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 11641, mode: os.FileMode(420), modTime: time.Unix(1539119165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
