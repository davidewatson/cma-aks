// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x18\xe8\xa5\x76\x11\x6b\x13\xe7\xae\x3d\x58\x75\x51\x55\x4e\x13\xc1\x89\x6d\x44\x4e\x0e\xf7\x24\x8c\xb8\xa3\x15\xab\x5d\x72\x43\x72\x25\x2b\x81\xbf\x7b\x41\x2e\x77\xc5\xfd\x63\xc7\x97\x04\x68\xf4\x90\x48\xe4\xcc\x70\xe6\x37\x7f\x49\x47\x11\x4c\x65\xbe\x57\x3c\x59\x1b\x38\x7d\xfe\xe2\x37\x98\x63\xa6\x0b\x91\xc0\xfc\x62\x0e\xd3\x54\x16\x31\x5c\xa1\xe1\x5b\x82\xa9\xcc\xf2\xc2\x70\x91\xc0\x2d\x61\x06\x58\x98\xb5\x54\x7a\x34\x88\xa2\x41\x14\xc1\x5b\xce\x48\x68\x8a\xa1\x10\x31\x29\x30\x6b\x82\x49\x8e\x6c\x4d\xd5\xce\x33\xf8\x48\x4a\x73\x29\xe0\x74\xf4\x1c\x8e\x2c\xc1\xd0\x6f\x0d\x8f\xc7\x56\xc4\x5e\x16\x90\xe1\x1e\x84\x34\x50\x68\x02\xb3\xe6\x1a\x56\x3c\x25\xa0\x3b\x46\xb9\x01\x2e\x80\xc9\x2c\x4f\x39\x0a\x46\xb0\xe3\x66\xed\xce\xf1\x52\xac\x26\xf0\x87\x97\x21\x97\x06\xb9\x00\x04\x26\xf3\x3d\xc8\x55\x48\x08\x68\xbc\xd2\xf6\xb3\x36\x26\x3f\x8b\xa2\xdd\x6e\x37\x42\xa7\xf0\x48\xaa\x24\x4a\x4b\x52\x1d\xbd\x9d\x4d\x5f\x5d\xcd\x5f\x9d\x9c\x8e\x9e\x7b\xa6\x0f\x22\x25\xad\x41\xd1\xa7\x82\x2b\x8a\x61\xb9\x07\xcc\xf3\x94\x33\x5c\xa6\x04\x29\xee\x40\x2a\xc0\x44\x11\xc5\x60\xa4\x55\x7a\xa7\xb8\xc5\xed\x19\x68\xb9\x32\x3b\x54\x64\xc5\xc4\x5c\x1b\xc5\x97\x85\x69\x60\x56\xa9\xc8\x75\x83\x40\x0a\x40\x01\xc3\xc9\x1c\x66\xf3\x21\xfc\x7b\x32\x9f\xcd\x9f\x59\x21\xbf\xcf\x6e\xdf\x5c\x7f\xb8\x85\xdf\x27\xef\xdf\x4f\xae\x6e\x67\xaf\xe6\x70\xfd\x1e\xa6\xd7\x57\x17\xb3\xdb\xd9\xf5\xd5\x1c\xae\xff\x03\x93\xab\x3f\xe0\x72\x76\x75\xf1\x0c\x88\x9b\x35\x29\xa0\xbb\x5c\x59\x0b\xa4\x02\x6e\xd1\xa4\xd8\x41\x37\x27\x6a\xa8\xb0\x92\xa5\x4a\x3a\x27\xc6\x57\x9c\x41\x8a\x22\x29\x30\x21\x48\xe4\x96\x94\xb0\x91\x90\x93\xca\xb8\xb6\x5e\xd5\x80\x22\xb6\x62\x52\x9e\x71\x83\xc6\x2d\x75\xec\x1a\x0d\x2c\xc9\x3b\xce\xd6\x48\x29\x7c\x24\x41\x9f\x39\xc2\x3f\xb2\x6d\xf9\xed\x5f\x49\x86\x3c\x1d\x31\x99\xfd\x73\x30\xd0\x7b\x61\xf0\x0e\xce\x61\x98\x2b\x69\xe4\xcb\xe1\x78\x30\xc8\x91\x6d\xac\x06\x2c\x43\xdc\xe8\xf1\x60\xc0\xb3\x5c\x2a\x03\xc3\x44\xca\x24\xa5\x08\x73\x1e\xa1\x10\xd2\x2b\x30\x72\x9c\xc3\x71\x4d\xe6\x7e\xb3\x93\x84\xc4\x89\xde\x61\x92\x90\x8a\x64\xee\x48\x7b\xd9\x06\x83\x72\x17\x8e\x12\x95\xb3\x51\x82\x86\x76\xb8\x2f\xb7\xd9\x22\x21\xb1\xf0\x52\x46\x5e\xca\x48\xe6\x24\x30\xe7\xdb\xd3\x6a\xe7\x18\xce\xe1\xcb\x00\x80\x8b\x95\x3c\x73\xdf\x00\x0c\x37\x29\x9d\xc1\x70\x9a\x16\xda\x90\x82\x77\x28\x30\x21\x05\x93\xcb\x39\xbc\xa1\x34\xb7\x5f\x6f\x66\xc3\xb1\x23\xde\x96\x59\x73\x06\xc3\xed\xf3\xd1\x8b\xd1\x73\xbf\xcc\xa4\x30\xc8\x4c\x25\xd2\x7e\x04\x66\x56\x6a\x0b\x5d\x4f\x6f\x3f\x85\x4a\xcf\x60\x68\x03\x5e\x9f\x45\x51\xc2\xcd\xba\x58\x5a\xb0\x23\x5d\xe6\xfc\x09\x13\xcc\x44\x2c\xc3\x13\xdc\xe8\x80\x8f\xac\x57\xce\x60\xd8\x75\x93\x27\xba\xb7\xff\xb9\x7f\xe8\xce\x90\x12\x98\x2e\x62\xc9\x74\xa5\xdc\xb7\x9c\x1b\x93\x66\x8a\x3b\x54\xad\x4d\x52\x11\xe0\x52\x16\x06\x9e\x00\xda\xfd\x00\x40\xb3\x35\x65\xa4\xcf\xe0\xcd\xed\xed\xcd\x7c\xdc\x5e\xb1\x0b\x4c\x0a\x5d\xb8\x95\xa1\x4f\x60\x7b\x5a\xf4\x5f\x2d\x85\x13\x93\x2b\x19\x17\xec\xa1\xfd\xfb\xf1\x60\xa0\x49\x6d\x39\xa3\x5a\xa7\xd2\x5c\x9b\x97\x3c\x4d\x2d\xff\x96\xbb\x8a\x87\xc0\x4a\x0a\xb7\xaf\x72\x06\x53\x45\x68\xa8\xe2\x3b\x6a\xfc\x7c\xa7\x93\x63\x50\x64\x0a\x25\x74\x6b\xeb\x3d\xe5\xe9\xfe\x38\xf0\x79\x1d\x9f\x2e\xfe\x47\x98\xf3\x91\xc5\xb9\x8a\xba\xc3\x27\x2f\x0c\x9c\xc1\xd0\x65\xc8\xf6\x45\xe4\xf5\x19\x36\x68\x96\x32\xde\x5b\xa2\xbf\x1e\x96\xef\xbd\x83\x1b\x86\x29\x32\x8a\xd3\xb6\x2c\x17\xda\xa0\x29\xb4\x2d\xb1\xb5\x95\xb6\x14\x00\x37\x1a\x36\xc5\x92\x98\x14\x2b\x9e\xb8\x6a\xc2\xa4\x10\xc4\x0c\xdf\x72\xb3\xaf\x91\x78\x4d\xa6\x86\xe1\xf0\xbd\x89\xc1\x61\xfd\xdb\x01\x48\xe8\x71\x00\x7a\x2d\x8d\x29\x25\x43\x3d\xfe\xbb\x70\x1b\xb5\xe2\x8d\x9f\x4d\xdd\x1b\x5b\xdf\xae\xbe\xd7\xe4\x4f\x5b\x50\xfb\x0a\x21\xe5\xda\x58\x3f\x79\x46\xdd\xe3\x82\xb7\x96\xe4\xa8\xf9\xfb\x21\x57\xd8\xbd\x1f\xed\x8e\xc8\xea\xf8\x75\x8b\x0a\x25\xaa\xba\xe8\x0a\xab\xca\x5c\x6a\xfa\x0a\x81\x39\x07\x9b\x99\x81\xbb\x5e\x93\xf1\xd3\xc7\x2c\x20\x3f\x3a\x2c\x77\x8c\xf4\xeb\x3f\xcc\x40\xaf\xee\x93\xbd\xb5\x45\x9e\xba\x81\xa2\xc8\x13\x85\x31\x35\x33\xac\xc7\x75\x1f\x2a\xba\xa3\xee\xda\x43\x2e\xac\xf6\x7f\xb8\x1b\xbd\xd2\x5f\xb1\xd6\x53\xf5\x98\xe5\x15\xab\xf3\xab\xf9\xbb\x69\x4e\x73\xef\x47\x57\xc8\xae\x29\xf0\x95\x4a\x79\x3f\x18\x64\xa4\xb5\x1d\x53\xda\x65\xfd\xd0\x20\xae\x30\xa3\x6a\x2c\xad\xaa\xa6\x91\xb0\xa4\x43\xd7\xa0\xd8\x11\xdb\x21\x50\x24\xae\xb9\xc3\x39\xbc\x18\x57\x12\x6e\xd7\x9e\xd6\x8e\x58\xd5\x8c\xe6\xe2\xda\x51\x34\x8e\xbe\xf1\x74\xf3\x9c\xd8\x81\xe9\x1c\x4e\xc7\x0f\x6a\xeb\x70\x0c\x1a\xda\x9a\xdc\xec\x28\x95\x1b\xcf\x43\xb5\x77\xa8\x43\xa5\xed\x3c\xec\x26\x77\x3b\x20\x93\x36\x83\x12\x2f\x99\x82\xdc\x74\x0c\x88\xc9\x20\x4f\x75\x1b\x09\xcf\x0a\x8a\x74\x2e\x85\xa6\xd2\xa2\x72\x73\x66\x28\xab\x09\xdb\x26\x34\x1a\xc8\x53\xd0\x4e\xa5\xdc\xd8\x01\x3c\x7f\x14\xeb\xa9\xa2\x98\x84\xe1\x98\x6a\xcb\xf7\xa9\x20\xb5\xaf\xe7\xe3\x30\x76\x27\x9f\x0b\x45\x21\x35\x0b\xbe\x3f\xac\x6c\x0b\xec\x99\x6e\x68\xca\x45\xd9\x68\xf7\xda\x50\xd6\x85\x33\x04\xe7\xc2\xe1\xf9\x28\x44\xed\x56\x15\xfa\x18\x8d\xbd\x78\x04\x67\xff\x45\x97\x60\x18\x69\x07\x32\xa3\xe4\xfe\xcf\xe0\xe4\x7b\xd6\x77\x81\xd4\x6d\x9f\x07\x85\xa7\xb2\x48\xe3\x06\x54\x4b\xaa\xf4\xf4\xd9\xd3\x17\x78\xf3\x7a\x62\xb1\xac\x61\x98\x7a\xbb\xfc\x48\xf3\xb0\xbf\x7c\x5b\x0c\x34\x69\x1a\xae\x09\x15\x5b\x83\x2e\x96\xf5\x10\x5b\x0e\x40\x61\xe7\xfd\xc6\x58\xa9\xdb\xee\xb7\xc6\x8b\x67\x7a\xdb\x3b\x0d\x50\x6e\x6b\x40\xdc\x97\x6c\x5d\xa5\x42\xa2\x83\x32\x17\xad\x4c\x0b\x91\xe5\x71\x43\x87\x9e\xbc\xec\x89\xaf\xd3\x71\x5f\x84\xea\x86\x17\x7b\xb8\x6b\x2f\xbe\xec\x53\x3a\xc8\x94\x9f\x5b\xf5\x1e\xfe\x60\xac\x36\xb2\x9a\xaa\xed\xd7\x07\xc4\x05\xf4\xe7\xf0\xcb\xc3\x35\xbf\xd1\x26\x7a\xcb\x42\xdd\x3b\x4e\x20\xe5\x1b\x02\xdc\xe8\xaf\x36\xa9\x6a\x50\x93\x2b\xb8\x2c\x96\xa4\x04\x19\x6a\x70\x6d\x7e\xd3\x8b\x8a\xc8\x41\x16\x72\xdb\xeb\xdd\x57\xba\xdb\xe4\x72\xee\x34\x46\x9b\x50\x25\x68\x4f\x68\x5b\x5c\xc3\x9b\xc9\x21\x3b\xd6\x3c\x59\x2f\xfc\xd4\xc5\x53\x6e\xf6\x25\x54\x81\x26\x2b\x5c\x2a\xce\x7c\xdf\x28\x74\xab\x3d\x93\xd9\x49\xb5\x59\x78\xa2\x73\xf8\x75\x3c\xb0\x38\x7b\x5e\xd6\xac\x0f\x85\x7f\x5e\x61\xd6\x0c\xcb\x1e\x3a\xae\x72\x4d\xa7\x3e\x7c\x69\xe0\x92\xe7\xb3\xd8\x09\x99\xdc\xcc\x60\xc2\x18\xe9\x06\xa8\x98\xe7\x8b\x56\xc8\x5a\xb6\x5b\x12\x28\x4c\xcd\x87\x1d\x3e\x53\x12\x84\xa1\x6b\xf9\x6e\x50\xeb\x9d\x54\xf1\x23\x9c\x79\x45\x12\x86\xad\xe5\x9d\xb7\xcb\x60\x3f\x7f\x58\x2d\x4b\xd5\xcb\x50\x8d\x22\x07\x0f\x32\x26\x0b\xe1\x5e\x06\xfd\x8c\xd1\xe8\xe5\x0e\x4a\xf2\x31\xa0\x48\xcb\x42\x31\x3b\x0c\xd3\xdd\x19\xa4\x12\x63\x58\x62\x8a\x82\x91\x3a\x6e\x01\x5c\x8a\x98\x97\x37\xf9\x89\x3f\xa4\x01\xf5\x34\xe5\x24\xcc\x2c\x86\x23\xdc\xe0\x99\x43\xfe\xe2\x38\xd4\x9c\x39\x82\x3e\xb8\x4b\xd6\x39\x31\x45\xc6\xb3\x57\x30\xf5\x49\xd0\x25\xa1\xaf\xb3\xbd\x39\x5a\x05\x7b\x33\x18\x9c\xd5\x17\x68\x10\xa6\x24\x5a\xd9\x9f\xca\x32\x71\x1e\xeb\xd4\xcb\x82\x37\x3b\xe9\x13\x3b\x54\x25\xcd\xfb\xa1\x7a\x0f\x69\xf8\xca\xd6\x25\x4c\x37\xf6\xff\xd2\x3b\xce\x27\x75\xe8\xb7\x9c\x73\x38\xb7\xd7\x31\x5e\xbd\xea\x67\x18\x6a\x33\xa1\x8d\x7b\x18\x4e\x94\x2c\xf2\x56\x3f\x9b\x5c\xce\xab\xfd\xd7\x76\x1b\xb8\xff\xb5\x28\xa9\x9b\xd9\x8e\x49\x8b\xdd\xae\x80\xb1\xff\x94\x99\xdd\x7f\x24\xc4\xb4\xe2\xc2\xde\x67\xcc\x3e\x27\xf7\x0a\x22\x8a\x6c\x69\xeb\xcf\xaa\x3e\xb0\x94\x5c\xc7\x60\x5b\xaf\xc3\x9d\xc4\xfb\x56\x04\x8d\xc6\x1d\x53\x13\xf4\x16\xdd\xb6\x66\x4e\x93\xa3\xb9\x41\x11\xa3\x8a\x17\x17\xa7\x8b\xed\xe9\x33\x20\xc3\x46\xc7\x6d\x41\x8e\xb4\x76\xab\x17\xf4\x8e\x0b\x9e\x15\x59\x9f\x21\x70\x14\xd3\x0a\x8b\xd4\xb8\x10\xfa\x4c\x4a\x1e\x44\x72\x61\x5e\x9e\x42\xc6\xc5\xe2\x53\x81\xc2\x94\xf5\xf4\x65\x53\x32\xde\x7d\x87\x64\xbc\x0b\x25\xff\x52\x5d\xbe\x42\x17\x02\xaa\x12\xbe\x68\x8b\x69\x41\x90\x23\x57\xb6\x8d\xa1\x01\x12\xee\x6e\xbd\x97\x85\xab\x1d\x68\x28\x91\x8a\x7f\x0e\x2b\x87\xf5\xde\x96\xd3\xce\x3d\x13\xca\x94\xc7\x2e\x10\x96\x3c\x4d\xb9\x48\x1a\x3e\x74\x67\x35\xfd\x86\x09\x6c\x68\xdf\x06\x78\x43\xfb\x8e\xa3\x2c\xa9\x53\xaf\x4d\x5c\xea\x5c\xbb\xe3\xde\x97\xc2\xd7\x64\xc2\x8e\x6a\x4b\xe9\xbc\x7c\xeb\x08\x46\xc5\xc3\xa3\x06\x7c\xf1\x7c\xe5\xc8\x68\xab\x6f\xc5\x5d\x0d\xbe\x5d\xbe\xf6\x78\xb9\x02\x99\x93\x2a\x8b\x88\xbd\xed\x5d\x5f\x3e\x70\x0b\xa9\x44\xf5\xbc\xb5\x74\xe2\xda\x60\x02\xb2\x9c\x54\x13\x6e\xaf\x7a\xb9\xd4\xdc\x48\xd5\x41\x2d\xe1\x26\x18\x0f\x5a\xe8\xad\x09\xd6\xa8\xd7\x75\x82\x70\x03\x4c\x66\x19\x37\x7d\x52\xca\x9d\x4e\x88\xf7\x0c\x09\x46\x11\x39\x53\x59\x4a\x28\x60\xb7\x26\xe1\x6a\x64\xaf\x58\x4b\xbc\xb0\x23\x1b\x75\x62\xfc\xc2\x2e\xca\x55\x59\x5f\xdb\xbc\x6e\x71\x11\x97\x7c\xbf\x34\xf8\x3e\x1e\x3c\x9c\xc8\xba\x8c\x32\x99\xe5\x3c\xed\x44\x4a\x22\x03\x7c\x7e\x6d\xc8\x99\x96\x1c\xea\x30\xaf\x04\x7c\xac\xda\x3c\x87\xbf\x35\xb8\x6e\x52\x34\xd6\x73\xc0\x4d\x09\x42\x49\x58\x36\xff\x08\x54\x21\xdc\x1f\x7f\xfc\x2c\x16\x48\xcc\x2b\xc6\x73\xf8\x7b\x3b\x23\x2b\x93\x82\xa0\x70\x5b\x3d\xb1\xe2\xad\x59\x84\x4f\x7b\xd5\xdd\xc3\xa7\xc0\xe1\x7d\xac\x9a\x01\xaa\x77\xb2\x9e\x2b\x53\xf0\x0c\xf6\xb3\xbe\x09\xd4\x19\xea\xfe\xaa\xd9\x7d\xfd\x7b\xc4\xaa\xef\x7f\x3c\xf0\x89\xd4\x73\x2a\x84\x4d\xd0\x1f\x78\x78\x91\x0c\x94\xef\xf0\x56\x4e\xac\x15\xaf\xb8\xbf\x84\xa8\x36\xf2\x3a\xb8\x96\x74\xde\xfb\x9e\xe2\x37\x7f\xf2\x77\x3d\x9b\x35\x0f\x7e\xda\xbb\x59\xcf\x03\xe4\x93\x1f\xce\x2a\xb4\xfe\x9f\x8f\x66\x8f\xd8\xfc\x53\x5f\x02\x9b\x7a\xf7\xdc\x02\xef\x1f\x30\xb1\x33\x43\xff\x88\x69\xd8\x06\xf0\xff\x02\x00\x00\xff\xff\xcd\x86\x97\xf2\x4e\x21\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8526, mode: os.FileMode(420), modTime: time.Unix(1537295878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
