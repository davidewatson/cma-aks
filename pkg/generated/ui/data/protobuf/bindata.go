// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdb\x6e\x1b\x39\xd2\xbe\xd7\x53\x14\x74\xf3\xdb\x3f\x62\x75\xe2\xcc\xec\x0e\xec\xf5\x62\xb5\xf2\x6c\x22\x38\xb1\x8d\xc8\x33\x83\xb9\x12\x28\x76\xa9\xc5\x15\x9b\xec\x21\xd9\x52\x94\xc0\xef\xbe\xe0\xa1\x5b\xec\x83\x6c\x8f\x63\x60\xb3\xba\x88\xd5\xcd\xaa\x62\xd5\x57\x07\x16\x4b\x49\x12\x98\xc8\x62\xa7\x58\xb6\x32\x70\xfa\xfa\xcd\x4f\x30\x23\xb9\x2e\x45\x06\xb3\xcb\x19\x4c\xb8\x2c\x53\xb8\x26\x86\x6d\x10\x26\x32\x2f\x4a\xc3\x44\x06\x77\x48\x72\x20\xa5\x59\x49\xa5\x47\x83\x24\x19\x24\x09\x7c\x60\x14\x85\xc6\x14\x4a\x91\xa2\x02\xb3\x42\x18\x17\x84\xae\xb0\x5a\x79\x05\xbf\xa2\xd2\x4c\x0a\x38\x1d\xbd\x86\x23\x4b\x30\x0c\x4b\xc3\xe3\x73\x2b\x62\x27\x4b\xc8\xc9\x0e\x84\x34\x50\x6a\x04\xb3\x62\x1a\x96\x8c\x23\xe0\x67\x8a\x85\x01\x26\x80\xca\xbc\xe0\x8c\x08\x8a\xb0\x65\x66\xe5\xf6\x09\x52\xac\x26\xf0\x7b\x90\x21\x17\x86\x30\x01\x04\xa8\x2c\x76\x20\x97\x31\x21\x10\x13\x94\xb6\x9f\x95\x31\xc5\x59\x92\x6c\xb7\xdb\x11\x71\x0a\x8f\xa4\xca\x12\xee\x49\x75\xf2\x61\x3a\xf9\xf9\x7a\xf6\xf3\xc9\xe9\xe8\x75\x60\xfa\x45\x70\xd4\x1a\x14\xfe\x51\x32\x85\x29\x2c\x76\x40\x8a\x82\x33\x4a\x16\x1c\x81\x93\x2d\x48\x05\x24\x53\x88\x29\x18\x69\x95\xde\x2a\x66\x71\x7b\x05\x5a\x2e\xcd\x96\x28\xb4\x62\x52\xa6\x8d\x62\x8b\xd2\x34\x30\xab\x54\x64\xba\x41\x20\x05\x10\x01\xc3\xf1\x0c\xa6\xb3\x21\xfc\x73\x3c\x9b\xce\x5e\x59\x21\xbf\x4d\xef\xde\xdf\xfc\x72\x07\xbf\x8d\x3f\x7d\x1a\x5f\xdf\x4d\x7f\x9e\xc1\xcd\x27\x98\xdc\x5c\x5f\x4e\xef\xa6\x37\xd7\x33\xb8\xf9\x17\x8c\xaf\x7f\x87\xab\xe9\xf5\xe5\x2b\x40\x66\x56\xa8\x00\x3f\x17\xca\x5a\x20\x15\x30\x8b\x26\xa6\x0e\xba\x19\x62\x43\x85\xa5\xf4\x2a\xe9\x02\x29\x5b\x32\x0a\x9c\x88\xac\x24\x19\x42\x26\x37\xa8\x84\x8d\x84\x02\x55\xce\xb4\xf5\xaa\x06\x22\x52\x2b\x86\xb3\x9c\x19\x62\xdc\xab\x8e\x5d\xa3\x81\x25\xf9\xc8\xe8\x8a\x20\x87\x5f\x51\xe0\x17\x46\xe0\x6f\xf9\xc6\x7f\xfb\x47\x96\x13\xc6\x47\x54\xe6\x7f\x1f\x0c\xf4\x4e\x18\xf2\x19\x2e\x60\x58\x28\x69\xe4\xdb\xe1\xf9\x60\x50\x10\xba\xb6\x1a\xd0\x9c\x90\xb5\x3e\x1f\x0c\x58\x5e\x48\x65\x60\x98\x49\x99\x71\x4c\x48\xc1\x12\x22\x84\x0c\x0a\x8c\x1c\xe7\xf0\xbc\x26\x73\xcf\xf4\x24\x43\x71\xa2\xb7\x24\xcb\x50\x25\xb2\x70\xa4\xbd\x6c\x83\x81\x5f\x85\xa3\x4c\x15\x74\x94\x11\x83\x5b\xb2\xf3\xcb\x74\x9e\xa1\x98\x07\x29\xa3\x20\x65\x24\x0b\x14\xa4\x60\x9b\xd3\x6a\xe5\x18\x2e\xe0\xeb\x00\x80\x89\xa5\x3c\x73\xdf\x00\x0c\x33\x1c\xcf\x60\x38\xe1\xa5\x36\xa8\xe0\x23\x11\x24\x43\x05\xe3\xab\x19\xbc\x47\x5e\xd8\xaf\xb7\xd3\xe1\xb9\x23\xde\xf8\xac\x39\x83\xe1\xe6\xf5\xe8\xcd\xe8\x75\x78\x4d\xa5\x30\x84\x9a\x4a\xa4\xfd\x08\x92\x5b\xa9\x2d\x74\x03\xbd\xfd\x94\x8a\x9f\xc1\xd0\x06\xbc\x3e\x4b\x92\x8c\x99\x55\xb9\xb0\x60\x27\xda\xe7\xfc\x09\x15\xd4\x24\x34\x27\x27\x64\xad\x23\x3e\xb4\x5e\x39\x83\x61\xd7\x4d\x81\xe8\xde\xfe\x71\xff\xe0\x67\x83\x4a\x10\x3e\x4f\x25\xd5\x95\x72\xcf\xd9\x37\x45\x4d\x15\x73\xa8\x5a\x9b\xa4\x42\x20\x0b\x59\x1a\x78\x02\x68\xf7\x03\x00\x4d\x57\x98\xa3\x3e\x83\xf7\x77\x77\xb7\xb3\xf3\xf6\x1b\xfb\x82\x4a\xa1\x4b\xf7\x66\x18\x12\xd8\xee\x96\xfc\x5b\x4b\xe1\xc4\x14\x4a\xa6\x25\x3d\xb4\x7e\x7f\x3e\x18\x68\x54\x1b\x46\xb1\xd6\xc9\x9b\x6b\xf3\x92\x71\x6e\xf9\x37\xcc\x55\x3c\x02\xd4\x53\xb8\x75\x55\x50\x98\x28\x24\x06\x2b\xbe\xa3\xc6\xe3\x47\x9d\x1d\x83\x42\x53\x2a\xa1\x5b\x4b\x9f\xb0\xe0\xbb\xe3\xc8\xe7\x75\x7c\xba\xf8\x1f\x91\x82\x8d\x2c\xce\x55\xd4\xed\x3f\x45\x69\xe0\x0c\x86\x2e\x43\x36\x6f\x92\xa0\xcf\xb0\x41\xb3\x90\xe9\xce\x12\xfd\xff\xfe\xf5\x7d\x70\x70\xc3\x30\x85\x46\x31\xdc\xf8\x72\xa1\x0d\x31\xa5\xb6\x25\xb6\xb6\xd2\x96\x02\x60\x46\xc3\xba\x5c\x20\x95\x62\xc9\x32\x57\x4d\xa8\x14\x02\xa9\x61\x1b\x66\x76\x35\x12\xef\xd0\xd4\x30\xec\xbf\x37\x31\xd8\xbf\x7f\x3e\x00\x19\x3e\x0c\x40\xaf\xa5\x29\x72\x34\xd8\xe3\xbf\x4b\xb7\x50\x2b\xde\x78\x6c\xea\xde\x58\x7a\xbe\xfa\x41\x93\x3f\x6d\x41\xed\x2b\x02\x9c\x69\x63\xfd\x14\x18\x75\x8f\x0b\x3e\x58\x92\xa3\xe6\xf3\x21\x57\xd8\xb5\x97\x76\x47\x62\x75\x7c\xdc\xa2\x52\x89\xaa\x2e\xba\xc2\xaa\x72\x97\x9a\xa1\x42\x90\x82\x81\xcd\xcc\xc8\x5d\xef\xd0\x84\xee\x63\x1a\x91\x1f\xed\x5f\x77\x8c\x0c\xef\x5f\xcc\xc0\xa0\xee\x93\xbd\xb5\x21\x8c\xbb\x86\xa2\x2c\x32\x45\x52\x6c\x66\x58\x8f\xeb\x7e\xa9\xe8\x8e\xba\xef\x0e\xb9\xb0\x5a\x7f\x71\x37\x06\xa5\x1f\xb1\x36\x50\xf5\x98\x15\x14\xab\xf3\xab\xf9\xdc\x34\xa7\xb9\xf6\xd2\x15\xb2\x6b\x0a\x3c\xa7\x52\x0a\x99\x22\x50\x59\x0a\xd3\xe3\xba\x6b\x99\xe2\xc4\xae\xc5\xbe\xa9\x5f\x1e\x72\x5e\x4d\xf0\xe2\xde\xd3\x94\xf0\xc7\x7c\xe7\x68\xf6\x9e\xd3\x7d\x16\xce\x2c\x4d\xed\xc3\xf8\xa9\x69\x53\xbc\xf2\xe2\xfe\x6b\x19\xf3\x98\xf7\xee\x07\x83\x1c\xb5\xb6\x4d\x66\xfb\x50\xde\x1f\xef\xd7\x24\xc7\xea\x52\x51\x9d\x79\x46\xc2\x02\xf7\x67\x3e\xa6\x8e\xd8\xb6\xf0\x22\x73\xad\x19\x5c\xc0\x9b\xf3\x4a\xc2\xdd\x2a\xd0\xda\x06\xb9\xea\xb0\x5d\x55\x72\x14\x8d\xad\x6f\x03\xdd\xac\x40\xba\x67\xba\x80\xd3\xf3\x83\xda\x3a\x14\xa3\x76\x64\x85\xae\xf3\x97\xca\x5d\xae\x62\xb5\xb7\x44\xc7\x4a\xdb\xdb\x8c\xbb\x77\xd9\xeb\x0d\x6a\xef\xcb\x85\x94\x1c\xe4\xba\x63\x40\x8a\x86\x30\xae\xdb\x48\x04\x56\x50\xa8\x0b\x29\x34\x7a\x8b\xfc\xe2\xd4\x60\x5e\x13\xb6\x4d\x68\x1c\xff\x4f\x41\x9b\x4b\xb9\xb6\xd7\xa7\xe2\x41\xac\x27\x0a\x53\x14\x86\x11\xae\x2d\xdf\x1f\x25\xaa\x5d\x7d\xbb\x89\x2b\xcf\xf8\x4b\xa9\x30\xa6\xa6\xd1\xf7\xc3\xca\xb6\xc0\x9e\xea\x86\xa6\x4c\xf8\x36\x69\xa7\x0d\xe6\x5d\x38\x63\x70\x2e\x1d\x9e\x0f\x42\xd4\x6e\x34\x62\x1f\x13\x63\xaf\x8d\xd1\xde\xff\xa7\x3d\x18\x46\xda\x76\xda\x28\xb9\xfb\x33\x38\x85\x8e\xe3\x9b\x40\xea\x36\x3f\x7b\x85\x27\xb2\xe4\x69\x03\xaa\x05\x56\x7a\x86\xec\xe9\x0b\xbc\x59\xdd\x6f\x5a\xd6\x38\x4c\x83\x5d\xa1\x21\x3d\xec\xaf\xd0\xd4\x44\x9a\x34\x0d\xd7\x48\x14\x5d\x81\x2e\x17\xf5\x15\xc4\xb7\xaf\x71\xdf\xf4\xcc\x58\xa9\x9b\xa6\xe7\xc6\x4b\x60\xfa\xd0\xdb\xcb\x61\x61\x6b\x40\xda\x97\x6c\x5d\xa5\x62\xa2\xbd\x32\x97\xad\x4c\x8b\x91\x65\x69\x43\x87\x9e\xbc\xec\x89\xaf\xd3\xf3\xbe\x08\xd5\x0d\x2f\xf6\x70\xd7\x5e\x7c\xdb\xa7\x74\x94\x29\xdf\xb7\xea\x3d\xfc\xd1\xa5\xc8\xc8\xea\x4e\x64\xbf\x1e\x10\x17\xd1\x5f\xc0\x0f\x87\x6b\x7e\xe3\x98\xe8\x2d\x0b\xf5\xd9\x71\x02\x9c\xad\x11\xc8\x5a\x3f\x7a\x48\x55\x6d\xb6\x5c\xc2\x55\xb9\x40\x25\xd0\x60\x83\x6b\xfd\x93\x9e\x57\x44\x0e\xb2\x98\xdb\x5e\xce\x1f\x39\xdd\xc6\x57\x33\xa7\x31\xb1\x09\xe5\x41\x7b\xc2\xb1\xc5\x34\xbc\x1f\xef\xb3\x63\xc5\xb2\xd5\x3c\xf4\xcc\x8c\x33\xb3\xf3\x50\x45\x9a\x2c\xc9\x42\x31\x1a\xce\x8d\x52\xb7\x8e\x67\x34\x5b\xa9\xd6\xf3\x40\x74\x01\x3f\x9e\x0f\x2c\xce\x81\x97\x36\xeb\x43\x19\x86\x63\xd4\x9a\x61\xd9\x63\xc7\x55\xae\xe9\xd4\x87\xaf\x0d\x5c\x8a\x62\x9a\x3a\x21\xe3\xdb\x29\x8c\x29\x45\xdd\x00\x95\x14\xc5\xbc\x15\xb2\x96\xed\x0e\x05\x11\xa6\xe6\x23\x1d\x3e\xe3\x09\xe2\xd0\xb5\x7c\xb7\x44\xeb\xad\x54\xe9\x03\x9c\x45\x45\x12\x87\xad\xe5\x9d\xb5\xcb\x60\x3f\x7f\x5c\x2d\xbd\xea\x3e\x54\x93\xc4\xc1\x43\xa8\x6b\x0d\x1d\xf2\xbe\xc7\x68\x9c\xe5\x0e\x4a\x0c\x31\xa0\x50\xcb\x52\x51\x7b\x95\xc1\xcf\x67\xc0\x25\x49\x61\x41\x38\x11\x14\xd5\x71\x0b\x60\x2f\x62\xe6\xe7\x30\xe3\xb0\x49\x03\xea\x09\x67\x28\xcc\x34\x85\x23\xb2\x26\x67\x0e\xf9\xcb\xe3\x58\x73\xea\x08\xfa\xe0\xf6\xac\x33\xa4\x0a\x4d\x60\xaf\x60\xea\x93\xa0\x3d\x61\xa8\xb3\xbd\x39\x5a\x05\x7b\x33\x18\x9c\xd5\x97\xc4\x10\x98\xa0\x68\x65\x3f\x97\x3e\x71\x1e\x3a\xa9\x17\x25\x6b\x9e\xa4\x4f\x3c\xa1\x2a\x69\xc1\x0f\xd5\x34\xab\xe1\x2b\x5b\x97\x08\x5f\xdb\xbf\xde\x3b\xce\x27\x75\xe8\xb7\x9c\xb3\xdf\xb7\xd7\x31\x41\xbd\xea\x31\x0e\xb5\xa9\xd0\xc6\x8d\xf5\x33\x25\xcb\xa2\x75\x9e\x8d\xaf\x66\xd5\xfa\x3b\xbb\x0c\x2c\x3c\xcd\x3d\x75\x33\xdb\x49\xd6\x62\xb7\x6f\xc0\xd8\x7f\x7c\x66\xf7\x6f\x09\x29\x2e\x99\xb0\x77\x1a\xb3\x2b\xd0\xcd\xb0\x44\x99\x2f\x6c\xfd\x59\xd6\x1b\x7a\xc9\x75\x0c\xb6\xf5\xda\xdf\x48\x82\x6f\x45\x74\xd0\xb8\x6d\x6a\x82\xde\xa2\xdb\xd6\xcc\x69\x72\x34\x33\x44\xa4\x44\xa5\xf3\xcb\xd3\xf9\xe6\xf4\x15\xa0\xa1\xa3\xe3\xb6\x20\x47\x5a\xbb\x35\x08\xfa\xc8\x04\xcb\xcb\xbc\xcf\x10\x38\x4a\x71\x49\x4a\x6e\x5c\x08\x7d\x41\x25\xf7\x22\x99\x30\x6f\x4f\x21\x67\x62\xfe\x47\x49\x84\xf1\xf5\xf4\x6d\x75\x45\x8a\x81\x06\xa2\xbc\x91\xc9\x86\xf0\x12\xa1\x20\x4c\xd9\xc3\x86\x18\x40\xe1\xe6\x17\x3b\x59\xba\x0c\x27\x06\x33\xa9\xd8\x97\x38\xbf\x2d\xc6\x1b\x86\x5b\x37\x8a\x95\x9c\xa5\xce\x5d\x0b\xc6\x39\x13\x59\x03\x69\xb7\x57\x13\x5d\x92\xc1\x1a\x77\x6d\x18\xd6\xb8\xeb\xc0\x69\x49\x9d\x7a\x6d\x62\xaf\x73\x0d\xda\x7d\x28\x58\xef\xd0\xc4\xe7\x9e\x2d\x78\x33\x3f\x4f\x8a\x1a\xba\xfd\xe0\x08\xbe\x06\x3e\xdf\xd8\xd9\x1a\x59\x71\x57\xed\x69\x97\xaf\xdd\x04\x2e\x41\x16\xa8\x7c\xaa\xdb\x3b\xd9\xcd\xd5\x81\xbb\x42\x25\xaa\x67\x9e\xd5\x89\x3e\x43\x32\x90\xbe\x9f\xcc\x98\xbd\x90\x15\x52\x33\x23\x55\x07\xb5\x8c\x99\xe8\x10\x6f\xa1\xb7\x42\x58\x11\xbd\xaa\xc3\x98\x19\xa0\x32\xcf\x99\xe9\x93\xe2\x57\x3a\x81\xd8\x73\x94\x1b\x85\xe8\x4c\xa5\x1c\x89\x80\xed\x0a\x85\xab\x64\xbd\x62\x2d\xf1\xdc\x36\x56\xb8\x8f\xc4\x20\xfa\xd2\xbe\x94\x4b\x5f\x05\xdb\xbc\xee\xe5\x3c\xf5\x7c\x3f\x34\xf8\x7e\xdd\x7b\x38\x93\x75\xb1\xa3\x32\x2f\x18\xef\x44\x4a\x26\x23\x7c\x7e\x6c\xc8\x99\x78\x0e\xb5\xef\x2a\x22\x3e\x5a\x2d\x5e\xc0\x5f\x1a\x5c\xb7\x9c\x18\xeb\x39\x60\xc6\x83\xe0\x09\xfd\x11\x9d\x80\x2a\x85\xfb\x81\x2d\x74\x4c\x91\xc4\xa2\x62\xbc\x80\xbf\xb6\x33\xb2\x32\x29\x0a\x0a\xb7\xd4\x13\x2b\xc1\x9a\x79\x3c\x3e\xad\x6e\x08\x21\x05\xf6\x33\xc8\xea\xa4\xae\x66\x91\x3d\x17\x9b\x68\xd4\xf8\xbd\xde\xdc\xeb\x0c\x75\xbf\x1c\x77\x27\xac\x0f\x58\xf5\xed\x57\xfc\x90\x48\x3d\xbb\x42\x7c\x54\x85\x0d\xf7\x53\xdf\x48\xf9\x0e\x6f\xe5\xc4\x5a\xf1\x8a\xfb\x6b\x8c\x6a\x23\xaf\xa3\xcb\x43\x67\xa6\xfa\x14\xbf\x85\x9d\xbf\x69\xb8\xd5\xdc\xf8\x69\xd3\xad\x9e\x21\xef\x93\xc7\x5b\x15\x5a\xff\xcd\xd1\xd6\x03\x36\x7f\xd7\x57\xb5\xa6\xde\x3d\x77\xb5\xfb\x03\x26\x76\x3a\xdd\x97\xe8\x59\xdf\xf4\x97\xa7\x68\xf4\xdc\x4d\xe1\x78\x8e\xfe\xbf\x56\x99\x9e\x66\xd8\x4b\xcc\x93\x4c\xa3\x36\xb9\x7d\x0b\x4b\x66\x0d\x7f\x70\x32\x72\xd7\x65\xdc\xff\x08\xe0\xfb\xc8\xa8\xd9\x8f\x32\xa2\xf5\x73\x40\xd7\x35\x87\xe7\x32\x07\xdd\xf0\x42\x93\xbb\x20\xbc\xea\xdd\x6b\x34\x1a\xaa\xc8\x14\xe7\x0e\xa2\xf8\x16\x63\xa4\x21\x1c\x52\xd4\xee\x7f\x06\x59\x1a\xdd\x03\xc4\x0f\x07\x81\x68\xb9\x72\xbb\x42\xf2\x50\x65\x73\xbf\x6d\xbc\xd8\xa8\xf4\x3f\x01\x00\x00\xff\xff\xe9\x31\x13\x4b\x0c\x26\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9740, mode: os.FileMode(420), modTime: time.Unix(1537462965, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
