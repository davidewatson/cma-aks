// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x73\xdb\xb8\x11\x7f\xe7\xa7\xd8\xd1\x4b\xed\x4e\x22\x26\xce\x5d\x7b\x23\xd5\x9d\xaa\x72\x9a\x68\x9c\xd8\x9e\xd0\x97\x9b\x7b\xd2\xac\xc0\x15\x85\x8a\x04\x10\x00\x94\xac\x64\xf2\xdd\x3b\x00\x41\x8a\xa4\xe8\xfc\xbb\x7b\xa8\x1e\x6c\x11\xd8\x5d\xee\xfe\x76\xf1\xdb\x85\xe2\x18\xe6\x52\x1d\x34\xcf\x36\x16\x2e\x9e\x3d\xff\x05\x12\x2c\x4c\x29\x32\x48\xae\x12\x98\xe7\xb2\x4c\xe1\x06\x2d\xdf\x11\xcc\x65\xa1\x4a\xcb\x45\x06\xf7\x84\x05\x60\x69\x37\x52\x9b\x71\x14\xc7\x51\x1c\xc3\x1b\xce\x48\x18\x4a\xa1\x14\x29\x69\xb0\x1b\x82\x99\x42\xb6\xa1\x7a\xe7\x09\xbc\x27\x6d\xb8\x14\x70\x31\x7e\x06\x67\x4e\x60\x14\xb6\x46\xe7\x53\x67\xe2\x20\x4b\x28\xf0\x00\x42\x5a\x28\x0d\x81\xdd\x70\x03\x6b\x9e\x13\xd0\x03\x23\x65\x81\x0b\x60\xb2\x50\x39\x47\xc1\x08\xf6\xdc\x6e\xfc\x7b\x82\x15\xe7\x09\xfc\x1e\x6c\xc8\x95\x45\x2e\x00\x81\x49\x75\x00\xb9\x6e\x0b\x02\xda\xe0\xb4\xfb\x6c\xac\x55\x93\x38\xde\xef\xf7\x63\xf4\x0e\x8f\xa5\xce\xe2\xbc\x12\x35\xf1\x9b\xc5\xfc\xe5\x4d\xf2\xf2\xe9\xc5\xf8\x59\x50\xfa\x55\xe4\x64\x0c\x68\xfa\x50\x72\x4d\x29\xac\x0e\x80\x4a\xe5\x9c\xe1\x2a\x27\xc8\x71\x0f\x52\x03\x66\x9a\x28\x05\x2b\x9d\xd3\x7b\xcd\x1d\x6e\x4f\xc0\xc8\xb5\xdd\xa3\x26\x67\x26\xe5\xc6\x6a\xbe\x2a\x6d\x07\xb3\xda\x45\x6e\x3a\x02\x52\x00\x0a\x18\xcd\x12\x58\x24\x23\xf8\xf7\x2c\x59\x24\x4f\x9c\x91\xdf\x16\xf7\xaf\x6f\x7f\xbd\x87\xdf\x66\xef\xde\xcd\x6e\xee\x17\x2f\x13\xb8\x7d\x07\xf3\xdb\x9b\xab\xc5\xfd\xe2\xf6\x26\x81\xdb\xff\xc0\xec\xe6\x77\xb8\x5e\xdc\x5c\x3d\x01\xe2\x76\x43\x1a\xe8\x41\x69\x17\x81\xd4\xc0\x1d\x9a\x94\x7a\xe8\x12\xa2\x8e\x0b\x6b\x59\xb9\x64\x14\x31\xbe\xe6\x0c\x72\x14\x59\x89\x19\x41\x26\x77\xa4\x85\xab\x04\x45\xba\xe0\xc6\x65\xd5\x00\x8a\xd4\x99\xc9\x79\xc1\x2d\x5a\xbf\x74\x12\xd7\x38\x72\x22\x6f\x39\xdb\x20\xe5\xf0\x9e\x04\x7d\xe4\x08\xff\x28\x76\xd5\xb7\x7f\x65\x05\xf2\x7c\xcc\x64\xf1\xcf\x28\x32\x07\x61\xf1\x01\x2e\x61\xa4\xb4\xb4\xf2\xc5\x68\x1a\x45\x0a\xd9\xd6\x79\xc0\x0a\xc4\xad\x99\x46\x11\x2f\x94\xd4\x16\x46\x99\x94\x59\x4e\x31\x2a\x1e\xa3\x10\x32\x38\x30\xf6\x9a\xa3\x69\x23\xe6\x9f\xd9\xd3\x8c\xc4\x53\xb3\xc7\x2c\x23\x1d\x4b\xe5\x45\x07\xd5\xa2\xa8\xda\x85\xb3\x4c\x2b\x36\xce\xd0\xd2\x1e\x0f\xd5\x36\x5b\x66\x24\x96\xc1\xca\x38\x58\x19\x4b\x45\x02\x15\xdf\x5d\xd4\x3b\xe7\x70\x09\x9f\x22\x00\x2e\xd6\x72\xe2\xbf\x01\x58\x6e\x73\x9a\xc0\x68\x9e\x97\xc6\x92\x86\xb7\x28\x30\x23\x0d\xb3\xeb\x04\x5e\x53\xae\xdc\xd7\xbb\xc5\x68\xea\x85\x77\xd5\xa9\x99\xc0\x68\xf7\x6c\xfc\x7c\xfc\x2c\x2c\x33\x29\x2c\x32\x5b\x9b\x74\x1f\x81\x85\xb3\xda\x43\x37\xc8\xbb\x4f\xa9\xf3\x09\x8c\x5c\xc1\x9b\x49\x1c\x67\xdc\xe6\xb8\x72\x60\xc7\x35\xfe\x31\x2b\xf0\x29\x6e\x4d\x4b\x87\x5c\x46\x26\x30\x3a\x4d\x51\x10\xfa\xec\xfe\xf9\x3f\xf4\x60\x49\x0b\xcc\x97\xa9\x64\xa6\x76\xec\x7b\xdf\x99\x92\x61\x9a\x7b\x34\x5d\x2c\x52\x13\xe0\x4a\x96\x16\xbe\x01\xac\xcf\x11\x80\x61\x1b\x2a\xc8\x4c\xe0\xf5\xfd\xfd\x5d\x32\xed\xaf\xb8\x05\x26\x85\x29\xfd\xca\x28\x1c\x5c\xf7\xb6\xf8\xbf\x46\x0a\x6f\x46\x69\x99\x96\xec\xb1\xfd\xcf\xd3\x28\x32\xa4\x77\x9c\x51\xe3\x53\x15\xaa\x3b\x8f\x3c\xcf\x9d\xfe\x8e\x7b\xa6\x43\x60\x95\x84\xdf\xd7\x8a\xc1\x5c\x13\x5a\xaa\xf5\xce\x3a\x8f\x6f\x4d\x76\x0e\x9a\x6c\xa9\x85\xe9\x6d\xbd\x23\x95\x1f\xce\x5b\xb9\x6e\xea\xd2\xd7\xfd\x18\x15\x1f\x3b\x8c\xeb\x6a\x3b\x7e\x54\x69\x61\x02\x23\x7f\x32\x76\xcf\xe3\xe0\xcf\xa8\x23\xb3\x92\xe9\xc1\x09\xfd\xf5\xb8\xfc\x39\x24\xb7\x13\x98\x26\xab\x39\xed\x2a\x9a\x30\x16\x6d\x69\x1c\xb5\x36\x51\x3a\x0a\x00\x6e\x0d\x6c\xcb\x15\x31\x29\xd6\x3c\xf3\x2c\xc2\xa4\x10\xc4\x2c\xdf\x71\x7b\x68\x90\x78\x45\xb6\x81\xe1\xf8\xbd\x8b\xc1\x71\xfd\xc7\x01\xc8\xe8\xcb\x00\x0c\x46\x9a\x52\x4e\x96\x06\xf2\x77\xe5\x37\x1a\xc7\x3b\x8f\x5d\xdf\x3b\x5b\x3f\xee\x7e\xf0\xe4\xbb\x23\x68\x72\x85\x90\x73\x63\x5d\x9e\x82\xa2\x19\x48\xc1\x1b\x27\x72\xd6\x7d\x7e\x2c\x15\x6e\xef\xcf\x4e\x47\xec\x7c\xfc\x7a\x44\xa5\x16\x35\x1f\x7a\x42\xd5\x85\x3f\x9a\x81\x21\x50\x71\x70\x27\xb3\x95\xae\x57\x64\xc3\xd4\xb1\x68\x89\x9f\x1d\x97\x4f\x82\x0c\xeb\x7f\x5a\x80\xc1\xdd\x81\xd8\x3e\x47\x51\x41\xc6\xb8\x76\xd6\xa7\x81\x23\xa1\xdc\x60\x41\xf5\xf8\x52\x9f\x32\x2b\x61\x45\x47\x96\xa1\xd4\x0b\xbb\x61\x41\x64\xbe\x09\xc0\x25\x3c\x9f\xd6\x16\xee\x37\x41\xd6\xb5\xe2\xba\x97\x7b\x1c\xbc\x44\xe7\xd5\x77\x41\x2e\x51\xc4\x8e\x4a\x97\x70\x31\x7d\xd4\x5b\x0f\x54\x8b\x00\x37\xe4\x67\x0c\xa9\xfd\x18\xd7\x76\x7b\x8f\xa6\xed\xb4\x9b\x9b\xfc\x84\xe7\x06\x29\x32\x36\xaa\x98\x48\xe6\x20\xb7\x27\x01\xa4\x64\x91\xe7\xa6\x8f\x44\x50\x05\x4d\x46\x49\x61\xa8\x8a\xa8\xda\x5c\x58\x2a\x1a\xc1\x7e\x08\x1d\xc2\xf9\x16\xb4\x73\x29\xb7\x6e\x50\x53\x5f\xc4\x7a\xae\x29\x25\x61\x39\xe6\xc6\xe9\x7d\x28\x49\x1f\x9a\x39\xaa\x4d\x25\xb3\x8f\xa5\xa6\xb6\x34\x6b\x7d\x7f\xdc\xd9\x1e\xd8\x0b\xd3\xf1\x94\x8b\x8a\x98\x0f\xc6\x52\x71\x0a\x67\x1b\x9c\x2b\x8f\xe7\x17\x21\xea\x53\x5b\x3b\xc7\x68\xdd\x80\xda\x7a\xf7\x5f\x4c\x05\x86\x95\xae\x81\x5b\x2d\x0f\xdf\x83\x53\xe0\xb8\x3f\x04\xd2\x29\xdd\x1e\x1d\x9e\xcb\x32\x4f\x3b\x50\xad\xa8\xf6\x33\x9c\x9e\xa1\xc2\x4b\x9a\x0e\xe7\x54\xdb\x65\x1a\xe2\x0a\x2d\xf0\xf1\x7c\x05\x1a\x6d\x79\xd2\x0d\xdc\x10\x6a\xb6\x01\x53\xae\x9a\xa1\xa7\x6a\x98\x6d\xa6\xfe\xc1\x5a\x69\x68\xfa\x47\xeb\x25\x28\xbd\x19\xec\x1e\xa4\x1c\x07\xa4\x43\x87\xed\xd4\xa9\xb6\xd0\xd1\x99\xab\xde\x49\x6b\x23\xcb\xd3\x8e\x0f\x03\xe7\x72\xa0\xbe\x2e\xa6\x43\x15\x6a\x3a\x59\x1c\xd0\x6e\xb2\xf8\x62\xc8\xe9\xd6\x49\xf9\xff\x76\x7d\x40\xbf\x35\x86\x59\x59\x4f\x61\xee\xeb\x23\xe6\x5a\xf2\x97\xf0\xd3\xe3\x9c\xdf\x69\x13\x83\xb4\xd0\xf4\x8e\xa7\x90\xf3\x2d\x01\x6e\xcd\x57\x9b\x54\xdd\xd8\xe5\x1a\xae\xcb\x15\x69\x41\x96\x3a\x5a\xdb\x5f\xcc\xb2\x16\xf2\x90\xb5\xb5\xdd\x75\xe0\x2b\xdd\x6d\x76\x9d\x78\x8f\xd1\x1d\xa8\x0a\xb4\x6f\x68\x5b\xdc\xc0\xeb\xd9\xf1\x74\x6c\x78\xb6\x59\xe2\x0e\x79\x8e\x2b\x9e\x73\x7b\xa8\xa0\x6a\x79\xb2\xc6\x95\xe6\x2c\xf4\x8d\xd2\xf4\xda\x33\xd9\xbd\xd4\xdb\x65\x10\xba\x84\x9f\xa7\x91\xc3\x39\xe8\xb2\x2e\x3f\x94\xe1\x1a\xce\x5c\x18\x4e\xbd\x9d\xb8\x3a\x35\x27\xfc\xf0\xa9\x83\x8b\x52\x8b\xd4\x1b\x99\xdd\x2d\x60\xc6\x18\x99\x0e\xa8\xa8\xd4\xb2\x57\xb2\x4e\xed\x9e\x04\x0a\xdb\xe8\xe1\x89\x9e\xad\x04\xda\xa5\xeb\xf4\xee\xd0\x98\xbd\xd4\xe9\x17\x34\x55\x2d\xd2\x2e\x5b\xa7\x9b\xf4\x69\x70\x58\xbf\xcd\x96\x95\xeb\x55\xa9\xc6\xb1\x87\x07\x19\x93\xa5\xf0\xbf\x20\x85\x19\xa3\xd3\xcb\x3d\x94\x14\x6a\x40\x93\x91\xa5\x66\x64\xe0\x8c\x1e\x26\x90\x4b\x4c\x61\x85\x39\x0a\x46\xfa\xbc\x07\x70\x65\x22\xa9\x6e\x7e\xb3\xf0\x92\x0e\xd4\xf3\x9c\x93\xb0\x8b\x14\xce\x70\x8b\x13\x8f\xfc\xd5\x79\xdb\x73\xe6\x05\x86\xe0\xae\x54\x13\x62\x9a\x6c\x50\xaf\x61\x1a\xb2\x60\x2a\xc1\xc0\xb3\x83\x67\xb4\x2e\xf6\x6e\x31\xf8\xa8\xaf\xd0\x22\xcc\x49\xf4\x4e\x7f\x2e\xab\x83\xf3\xa5\x4e\xbd\x2a\x79\xb7\x93\x7e\x63\x87\xaa\xad\x85\x3c\xd4\xf7\xe7\x4e\xae\x1c\x2f\x61\xbe\x75\xff\xab\xec\xf8\x9c\x34\xa5\xdf\x4b\xce\xf1\xbd\x83\x89\x09\xee\xd5\x8f\xed\x52\x5b\x08\x63\xfd\x0f\x88\x99\x96\xa5\xea\xf5\xb3\xd9\x75\x52\xef\xbf\x72\xdb\xc0\xc3\xd3\xb2\x92\xae\xaa\xed\x11\x53\x90\xd2\x9a\x0b\x77\xe5\xb2\x07\x45\xfe\x36\x2c\xca\x62\xe5\x78\x65\xdd\x18\xaa\x5e\xd8\xd4\x56\xff\x7d\xc7\xcb\x44\xc8\x99\x68\x35\x10\xff\x9a\x46\x60\x90\x4c\xfb\x9e\x79\x4f\xce\x12\x8b\x22\x45\x9d\x2e\xaf\x2e\x96\xbb\x8b\x27\x40\x96\x8d\xcf\xfb\x86\xbc\x68\x93\xae\x60\xe8\x2d\x17\xbc\x28\x8b\xa1\x40\xe0\x2c\xa5\x35\x96\xb9\xf5\xa5\xf1\x91\xb4\x3c\x9a\xe4\xc2\xbe\xb8\x80\x82\x8b\xe5\x87\x12\x85\xad\x78\xf2\x45\xd7\x32\x3e\xfc\x01\xcb\xf8\xd0\xb6\xfc\x53\xeb\x52\x15\xc7\x6e\x0a\x6a\xb7\x13\xc7\x23\x49\x75\x31\x6c\xcd\x49\xc7\x1b\x20\x7c\x0a\x7a\xd5\xbc\xe4\xa8\xa7\xd6\xae\xa7\xbe\x53\xbd\xfe\x6c\xb5\x06\xa9\x48\x57\x27\xc8\x5d\x75\x6e\xaf\x1f\x19\xc1\x6b\x53\x03\x17\xd3\x93\xe4\x5b\xcc\x40\x56\x63\x5a\xc6\xdd\x3d\x47\x49\xc3\xad\xd4\x87\x7e\xee\x32\x6e\x5b\xbd\xb1\x5b\x0b\xce\xd0\x06\xcd\xa6\xa9\x22\x6e\x81\xc9\xa2\xe0\x76\xc8\x4a\xb5\x73\x52\x07\x03\x1d\xd2\x6a\x22\x1f\x2a\xcb\x09\x05\xec\x37\x24\x3c\x41\x0c\x9a\x75\xc2\x4b\x37\xaf\xd0\x49\x21\x5c\xb9\x45\xb9\xae\xc8\xa5\xaf\xeb\x17\x97\x69\xa5\xf7\x53\x47\xef\xfd\x31\xc3\x99\x6c\x38\x84\xc9\x42\xf1\x9c\x4e\x7c\x90\x2d\x7c\x7e\xee\xd8\x99\x57\x1a\xfa\xd8\xac\xdb\x8c\x5b\x6f\x5e\xc2\xdf\x3a\x5a\x77\x39\x5a\x97\x39\xe0\xb6\x02\xa1\x12\xac\x3a\x5f\x0c\xba\x14\xfe\x17\xf2\x30\x88\xb4\x2c\xaa\x5a\xf1\x12\xfe\x5e\x97\x6d\xd4\x0b\xa9\x55\x14\x7e\x6b\xa0\x56\x42\x34\xcb\xf6\xef\x20\xf5\xe0\x1d\xfd\x2f\x00\x00\xff\xff\xea\x96\x05\x1c\xd7\x19\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6615, mode: os.FileMode(420), modTime: time.Unix(1536260387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
