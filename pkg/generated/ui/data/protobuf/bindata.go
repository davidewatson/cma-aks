// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4d\x73\xdb\x38\xd2\xbe\xeb\x57\x74\xe9\xf2\xda\x6f\xc5\x62\xe2\xcc\xec\x4e\xd9\xeb\xad\xd5\xca\xd9\x44\xe5\xc4\x76\x45\x4e\xa6\xe6\xa4\x6a\x81\x2d\x0a\x2b\x12\x60\x00\x50\xb2\x92\xf2\x7f\xdf\xc2\x07\x29\x90\xa2\x9d\x4c\x92\xc3\xe8\x90\x48\x40\x77\xa3\xfb\xe9\x4f\xc0\x49\x02\x13\x59\xee\x14\xcf\x56\x06\x4e\x9f\xbf\xf8\x0d\x66\x58\xe8\x4a\x64\x30\xbb\x9c\xc1\x24\x97\x55\x0a\xd7\x68\xf8\x86\x60\x22\x8b\xb2\x32\x5c\x64\x70\x47\x58\x00\x56\x66\x25\x95\x1e\x0d\x92\x64\x90\x24\xf0\x96\x33\x12\x9a\x52\xa8\x44\x4a\x0a\xcc\x8a\x60\x5c\x22\x5b\x51\xbd\xf3\x0c\x3e\x92\xd2\x5c\x0a\x38\x1d\x3d\x87\x23\x4b\x30\x0c\x5b\xc3\xe3\x73\x2b\x62\x27\x2b\x28\x70\x07\x42\x1a\xa8\x34\x81\x59\x71\x0d\x4b\x9e\x13\xd0\x3d\xa3\xd2\x00\x17\xc0\x64\x51\xe6\x1c\x05\x23\xd8\x72\xb3\x72\xe7\x04\x29\x56\x13\xf8\x23\xc8\x90\x0b\x83\x5c\x00\x02\x93\xe5\x0e\xe4\x32\x26\x04\x34\x41\x69\xfb\x59\x19\x53\x9e\x25\xc9\x76\xbb\x1d\xa1\x53\x78\x24\x55\x96\xe4\x9e\x54\x27\x6f\xa7\x93\x57\xd7\xb3\x57\x27\xa7\xa3\xe7\x81\xe9\x83\xc8\x49\x6b\x50\xf4\xa9\xe2\x8a\x52\x58\xec\x00\xcb\x32\xe7\x0c\x17\x39\x41\x8e\x5b\x90\x0a\x30\x53\x44\x29\x18\x69\x95\xde\x2a\x6e\x71\x7b\x06\x5a\x2e\xcd\x16\x15\x59\x31\x29\xd7\x46\xf1\x45\x65\x5a\x98\xd5\x2a\x72\xdd\x22\x90\x02\x50\xc0\x70\x3c\x83\xe9\x6c\x08\xff\x1e\xcf\xa6\xb3\x67\x56\xc8\xef\xd3\xbb\x37\x37\x1f\xee\xe0\xf7\xf1\xfb\xf7\xe3\xeb\xbb\xe9\xab\x19\xdc\xbc\x87\xc9\xcd\xf5\xe5\xf4\x6e\x7a\x73\x3d\x83\x9b\xff\xc0\xf8\xfa\x0f\xb8\x9a\x5e\x5f\x3e\x03\xe2\x66\x45\x0a\xe8\xbe\x54\xd6\x02\xa9\x80\x5b\x34\x29\x75\xd0\xcd\x88\x5a\x2a\x2c\xa5\x57\x49\x97\xc4\xf8\x92\x33\xc8\x51\x64\x15\x66\x04\x99\xdc\x90\x12\x36\x12\x4a\x52\x05\xd7\xd6\xab\x1a\x50\xa4\x56\x4c\xce\x0b\x6e\xd0\xb8\xa5\x03\xbb\x46\x03\x4b\xf2\x8e\xb3\x15\x52\x0e\x1f\x49\xd0\x67\x8e\xf0\x8f\x62\xe3\xbf\xfd\x2b\x2b\x90\xe7\x23\x26\x8b\x7f\x0e\x06\x7a\x27\x0c\xde\xc3\x05\x0c\x4b\x25\x8d\x7c\x39\x3c\x1f\x0c\x4a\x64\x6b\xab\x01\x2b\x10\xd7\xfa\x7c\x30\xe0\x45\x29\x95\x81\x61\x26\x65\x96\x53\x82\x25\x4f\x50\x08\x19\x14\x18\x39\xce\xe1\x79\x43\xe6\x7e\xb3\x93\x8c\xc4\x89\xde\x62\x96\x91\x4a\x64\xe9\x48\x7b\xd9\x06\x03\xbf\x0b\x47\x99\x2a\xd9\x28\x43\x43\x5b\xdc\xf9\x6d\x36\xcf\x48\xcc\x83\x94\x51\x90\x32\x92\x25\x09\x2c\xf9\xe6\xb4\xde\x39\x86\x0b\xf8\x32\x00\xe0\x62\x29\xcf\xdc\x37\x00\xc3\x4d\x4e\x67\x30\x9c\xe4\x95\x36\xa4\xe0\x1d\x0a\xcc\x48\xc1\xf8\x6a\x06\x6f\x28\x2f\xed\xd7\xdb\xe9\xf0\xdc\x11\x6f\x7c\xd6\x9c\xc1\x70\xf3\x7c\xf4\x62\xf4\x3c\x2c\x33\x29\x0c\x32\x53\x8b\xb4\x1f\x81\x85\x95\xda\x41\x37\xd0\xdb\x4f\xa5\xf2\x33\x18\xda\x80\xd7\x67\x49\x92\x71\xb3\xaa\x16\x16\xec\x44\xfb\x9c\x3f\x61\x82\x99\x84\x15\x78\x82\x6b\x1d\xf1\x91\xf5\xca\x19\x0c\x0f\xdd\x14\x88\x1e\xec\x7f\xee\x1f\xba\x37\xa4\x04\xe6\xf3\x54\x32\x5d\x2b\xf7\x3d\xe7\xa6\xa4\x99\xe2\x0e\x55\x6b\x93\x54\x04\xb8\x90\x95\x81\x6f\x00\xed\x61\x00\xa0\xd9\x8a\x0a\xd2\x67\xf0\xe6\xee\xee\x76\x76\xde\x5d\xb1\x0b\x4c\x0a\x5d\xb9\x95\x61\x48\x60\x7b\x5a\xf2\x5f\x2d\x85\x13\x53\x2a\x99\x56\xec\xb1\xfd\x87\xf3\xc1\x40\x93\xda\x70\x46\x8d\x4e\xde\x5c\x9b\x97\x3c\xcf\x2d\xff\x86\xbb\x8a\x87\xc0\x3c\x85\xdb\x57\x25\x83\x89\x22\x34\x54\xf3\x1d\xb5\x7e\xbe\xd3\xd9\x31\x28\x32\x95\x12\xba\xb3\xf5\x9e\xca\x7c\x77\x1c\xf9\xbc\x89\x4f\x17\xff\x23\x2c\xf9\xc8\xe2\x5c\x47\xdd\xfe\x53\x56\x06\xce\x60\xe8\x32\x64\xf3\x22\x09\xfa\x0c\x5b\x34\x0b\x99\xee\x2c\xd1\xff\xef\x97\x1f\x82\x83\x5b\x86\x29\x32\x8a\xd3\xc6\x97\x0b\x6d\xd0\x54\xda\x96\xd8\xc6\x4a\x5b\x0a\x80\x1b\x0d\xeb\x6a\x41\x4c\x8a\x25\xcf\x5c\x35\x61\x52\x08\x62\x86\x6f\xb8\xd9\x35\x48\xbc\x26\xd3\xc0\xb0\xff\xde\xc6\x60\xbf\xfe\xfd\x00\x64\xf4\x34\x00\xbd\x96\xa6\x94\x93\xa1\x1e\xff\x5d\xba\x8d\x46\xf1\xd6\xcf\xb6\xee\xad\xad\xef\x57\x3f\x68\xf2\xa7\x2d\x68\x7c\x85\x90\x73\x6d\xac\x9f\x02\xa3\xee\x71\xc1\x5b\x4b\x72\xd4\xfe\xfd\x98\x2b\xec\xde\xcf\x76\x47\x62\x75\xfc\xba\x45\x95\x12\x75\x5d\x74\x85\x55\x15\x2e\x35\x43\x85\xc0\x92\x83\xcd\xcc\xc8\x5d\xaf\xc9\x84\xe9\x63\x1a\x91\x1f\xed\x97\x0f\x8c\x0c\xeb\x3f\xcd\xc0\xa0\xee\x37\x7b\x6b\x83\x3c\x77\x03\x45\x55\x66\x0a\x53\x6a\x67\x58\x8f\xeb\x3e\xd4\x74\x47\x87\x6b\x8f\xb9\xb0\xde\xff\xe9\x6e\x0c\x4a\xf7\x58\xfb\x30\x18\x14\xa4\xb5\x6d\xe2\xdd\xa2\xb7\x2f\x9f\xd7\x58\x50\x3d\xb4\xd5\x35\xc5\x48\x58\xd0\xbe\xa6\x52\xea\x88\xed\x88\x24\x32\xd7\xfa\xe0\x02\x5e\x9c\xd7\x12\xee\x56\x81\xd6\x0e\x20\xf5\x04\xe3\xbc\xee\x28\x5a\x47\xdf\x06\xba\x59\x49\x6c\xcf\x74\x01\xa7\xe7\x8f\x6a\xeb\x00\x8b\xca\xfd\x8a\xdc\x64\x25\x95\x1b\x5e\x63\xb5\xb7\xa8\x63\xa5\xed\xb4\xe8\xe6\x5a\x3b\x3e\x92\x36\x03\x5f\x77\x65\x0e\x72\x7d\x60\x40\x4a\x06\x79\xae\xbb\x48\x04\x56\x50\xa4\x4b\x29\x34\x79\x8b\xfc\xe6\xd4\x50\xd1\x10\x76\x4d\x68\x95\xd7\x6f\x41\x3b\x97\x72\x6d\xc7\xd3\xf2\x49\xac\x27\x8a\x52\x12\x86\x63\xae\x2d\xdf\xa7\x8a\xd4\xae\x99\x1e\xe3\x80\x1d\x7f\xae\x14\xc5\xd4\x2c\xfa\xfe\xb8\xb2\x1d\xb0\xa7\xba\xa5\x29\x17\xbe\x0d\xed\xb4\xa1\xe2\x10\xce\x18\x9c\x4b\x87\xe7\x93\x10\x75\x0b\x79\xec\x63\x34\x76\x2c\x8f\xce\xfe\x3f\xed\xc1\x30\xd2\x8e\x2b\x46\xc9\xdd\x9f\xc1\x29\x54\xf4\x1f\x02\xe9\xb0\xb9\xec\x15\x9e\xc8\x2a\x4f\x5b\x50\x2d\xa8\xd6\x33\x64\x4f\x5f\xe0\xcd\x9a\x7e\x6e\x59\xe3\x30\x0d\x76\x85\x86\xff\xb8\xbf\x42\xd3\x88\x34\x69\x1b\xae\x09\x15\x5b\x81\xae\x16\xcd\x88\xe7\xc7\x83\xb8\x2f\x7d\x67\xac\x34\x4d\xe9\x7b\xe3\x25\x30\xbd\xed\xed\x95\x54\xda\x1a\x90\xf6\x25\xdb\xa1\x52\x31\xd1\x5e\x99\xcb\x4e\xa6\xc5\xc8\xf2\xb4\xa5\x43\x4f\x5e\xf6\xc4\xd7\xe9\x79\x5f\x84\xea\x96\x17\x7b\xb8\x1b\x2f\xbe\xec\x53\x3a\xca\x94\xbf\xb6\xea\x3d\xfc\xd1\xd0\x69\x64\x3d\x73\xda\xaf\x8f\x88\x8b\xe8\x2f\xe0\x97\xc7\x6b\x7e\xab\x4d\xf4\x96\x85\xa6\x77\x9c\x40\xce\xd7\x04\xb8\xd6\x5f\x6d\x52\xf5\x18\x23\x97\x70\x55\x2d\x48\x09\x32\xd4\xe2\x5a\xff\xa6\xe7\x35\x91\x83\x2c\xe6\xb6\x97\x9f\xaf\x74\xb7\xf1\xd5\xcc\x69\x8c\x36\xa1\x3c\x68\xdf\xd0\xb6\xb8\x86\x37\xe3\x7d\x76\xac\x78\xb6\x9a\x87\x99\x84\xe7\xdc\xec\x3c\x54\x91\x26\x4b\x5c\x28\xce\x42\xdf\xa8\x74\xa7\x3d\x93\xd9\x4a\xb5\x9e\x07\xa2\x0b\xf8\xf5\x7c\x60\x71\x0e\xbc\xac\x5d\x1f\xaa\xf0\xf8\xc0\xac\x19\x96\x3d\x76\x5c\xed\x9a\x83\xfa\xf0\xa5\x85\x4b\x59\x4e\x53\x27\x64\x7c\x3b\x85\x31\x63\xa4\x5b\xa0\x62\x59\xce\x3b\x21\x6b\xd9\xee\x48\xa0\x30\x0d\x1f\x1e\xf0\x19\x4f\x10\x87\xae\xe5\xbb\x45\xad\xb7\x52\xa5\x4f\x70\x96\x35\x49\x1c\xb6\x96\x77\xd6\x2d\x83\xfd\xfc\x71\xb5\xf4\xaa\xfb\x50\x4d\x12\x07\x0f\x32\x26\x2b\xe1\xde\xcd\xc2\x8c\xd1\xea\xe5\x0e\x4a\x0a\x31\xa0\x48\xcb\x4a\x31\x3b\x2a\xd2\xfd\x19\xe4\x12\x53\x58\x60\x8e\x82\x91\x3a\xee\x00\xec\x45\xcc\xfc\x3d\x77\x1c\x0e\x69\x41\x3d\xc9\x39\x09\x33\x4d\xe1\x08\xd7\x78\xe6\x90\xbf\x3c\x8e\x35\x67\x8e\xa0\x0f\x6e\xcf\x3a\x23\xa6\xc8\x04\xf6\x1a\xa6\x3e\x09\xda\x13\x86\x3a\xdb\x9b\xa3\x75\xb0\xb7\x83\xc1\x59\x7d\x89\x06\x61\x42\xa2\x93\xfd\xb9\xf4\x89\xf3\x54\xa7\x5e\x54\xbc\xdd\x49\xbf\xb1\x43\xd5\xd2\x82\x1f\xea\xd7\x82\x96\xaf\x6c\x5d\xc2\x7c\x6d\xff\xf7\xde\x71\x3e\x69\x42\xbf\xe3\x9c\xfd\xb9\xbd\x8e\x09\xea\xd5\x3f\xe3\x50\x9b\x0a\x6d\xdc\xb3\x69\xa6\x64\x55\x76\xfa\xd9\xf8\x6a\x56\xef\xbf\xb6\xdb\xc0\xc3\xaf\xb9\xa7\x6e\x67\x3b\x66\x1d\x76\xbb\x02\xc6\xfe\xe3\x33\xbb\xff\x48\x48\x69\xc9\x85\xbd\x88\x9a\x5d\x49\xee\x8d\x40\x54\xc5\xc2\xd6\x9f\x65\x73\xa0\x97\xdc\xc4\x60\x57\xaf\xfd\xe5\x23\xf8\x56\x44\x8d\xc6\x1d\xd3\x10\xf4\x16\xdd\xae\x66\x4e\x93\xa3\x99\x41\x91\xa2\x4a\xe7\x97\xa7\xf3\xcd\xe9\x33\x20\xc3\x46\xc7\x5d\x41\x8e\xb4\x71\x6b\x10\xf4\x8e\x0b\x5e\x54\x45\x9f\x21\x70\x94\xd2\x12\xab\xdc\xb8\x10\xfa\x4c\x4a\xee\x45\x72\x61\x5e\x9e\x42\xc1\xc5\xfc\x53\x85\xc2\xf8\x7a\xfa\xb2\x2d\x19\xef\x7f\x40\x32\xde\xc7\x92\x7f\xa9\x2f\x5f\xb1\x0b\x01\x95\x87\x2f\xd9\x60\x5e\x11\x94\xc8\x95\x6d\x63\x68\x80\x84\xbb\x79\xee\x64\xe5\x6a\x07\x1a\xca\xa4\xe2\x9f\xe3\xca\x61\xbd\xb7\xe1\xb4\x75\x8f\x68\x32\xe7\xa9\x0b\x84\x05\xcf\x73\x2e\xb2\x96\x0f\xdd\x59\x6d\xbf\x61\x06\x6b\xda\x75\x01\x5e\xd3\xee\xc0\x51\x96\xd4\xa9\xd7\x25\xf6\x3a\x37\xee\x78\x08\xa5\xf0\x35\x99\xb8\xa3\xda\x52\x3a\xf3\x2f\x01\xd1\xa8\xb8\xbf\xf2\xc3\x97\xc0\xe7\x47\x46\x5b\x7d\x6b\xee\x7a\xf0\x3d\xe4\xeb\x8e\x97\x4b\x90\x25\x29\x5f\x44\xec\x6d\xef\xe6\xea\x91\x5b\x48\x2d\xaa\xe7\x25\xe2\x20\xae\x0d\x66\x20\xfd\xa4\x9a\x71\x7b\xd5\x2b\xa5\xe6\x46\xaa\x03\xd4\x32\x6e\xa2\xf1\xa0\x83\xde\x8a\x60\x85\x7a\xd5\x24\x08\x37\xc0\x64\x51\x70\xd3\x27\xc5\xef\x1c\x84\x78\xcf\x90\x60\x14\x91\x33\x95\xe5\x84\x02\xb6\x2b\x12\xae\x46\xf6\x8a\xb5\xc4\x73\x3b\xb2\xd1\x41\x8c\x5f\xda\x45\xb9\xf4\xf5\xb5\xcb\xeb\x16\xe7\xa9\xe7\xfb\xa5\xc5\xf7\x71\xef\xe1\x4c\x36\x65\x94\xc9\xa2\xe4\xf9\x41\xa4\x64\x32\xc2\xe7\xd7\x96\x9c\x89\xe7\x50\xfb\x79\x25\xe2\x63\xf5\xe6\x05\xfc\xad\xc5\x75\x9b\xa3\xb1\x9e\x03\x6e\x3c\x08\x9e\xd0\x37\xff\x04\x54\x25\xdc\x9f\x46\xc2\x2c\x16\x49\x2c\x6b\xc6\x0b\xf8\x7b\x37\x23\x6b\x93\xa2\xa0\x70\x5b\x3d\xb1\x12\xac\x99\xc7\x0f\x5f\xf5\xdd\x23\xa4\xc0\xfe\xf5\xa8\x9e\x01\xea\x57\xa4\x9e\x2b\x53\xf4\x48\xf4\x57\x7d\x13\x68\x32\xd4\xfd\xcd\xef\xf0\x6d\xec\x09\xab\x7e\xfc\xf1\x20\x24\x52\xcf\xa9\x10\x37\xc1\x70\xe0\xfe\xbd\x2e\x52\x3e\xac\xd5\xae\x6b\xd4\xad\x79\xbe\xc4\x58\xb6\xb2\xf9\xe1\x7f\x01\x00\x00\xff\xff\xfb\x83\x93\xa3\xa1\x1d\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 7585, mode: os.FileMode(420), modTime: time.Unix(1537290517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
