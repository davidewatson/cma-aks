// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdb\x6e\x1b\x39\xd2\xbe\xd7\x53\x14\x74\xf3\xdb\x3f\x62\x75\xe2\xcc\xec\x0e\xec\xf5\x62\xb5\xf2\x6c\x22\x38\xb1\x8d\xc8\x93\xc1\x5c\x09\x14\xbb\xd4\xe2\xaa\x9b\x64\x48\xb6\x14\x25\xf0\xbb\x2f\x78\xe8\x16\xfb\x20\xc7\xe3\x18\xd8\xac\x2e\x12\x89\xac\x2a\x56\x7d\x75\x24\x9d\x24\x30\x11\x72\xa7\x58\xb6\x32\x70\xfa\xf2\xd5\x2f\x30\x23\x85\x2e\x79\x06\xb3\xcb\x19\x4c\x72\x51\xa6\x70\x4d\x0c\xdb\x20\x4c\x44\x21\x4b\xc3\x78\x06\x77\x48\x0a\x20\xa5\x59\x09\xa5\x47\x83\x24\x19\x24\x09\xbc\x63\x14\xb9\xc6\x14\x4a\x9e\xa2\x02\xb3\x42\x18\x4b\x42\x57\x58\xed\xbc\x80\x8f\xa8\x34\x13\x1c\x4e\x47\x2f\xe1\xc8\x12\x0c\xc3\xd6\xf0\xf8\xdc\x8a\xd8\x89\x12\x0a\xb2\x03\x2e\x0c\x94\x1a\xc1\xac\x98\x86\x25\xcb\x11\xf0\x33\x45\x69\x80\x71\xa0\xa2\x90\x39\x23\x9c\x22\x6c\x99\x59\xb9\x73\x82\x14\xab\x09\xfc\x11\x64\x88\x85\x21\x8c\x03\x01\x2a\xe4\x0e\xc4\x32\x26\x04\x62\x82\xd2\xf6\xb3\x32\x46\x9e\x25\xc9\x76\xbb\x1d\x11\xa7\xf0\x48\xa8\x2c\xc9\x3d\xa9\x4e\xde\x4d\x27\xbf\x5e\xcf\x7e\x3d\x39\x1d\xbd\x0c\x4c\xbf\xf1\x1c\xb5\x06\x85\x9f\x4a\xa6\x30\x85\xc5\x0e\x88\x94\x39\xa3\x64\x91\x23\xe4\x64\x0b\x42\x01\xc9\x14\x62\x0a\x46\x58\xa5\xb7\x8a\x59\xdc\x5e\x80\x16\x4b\xb3\x25\x0a\xad\x98\x94\x69\xa3\xd8\xa2\x34\x0d\xcc\x2a\x15\x99\x6e\x10\x08\x0e\x84\xc3\x70\x3c\x83\xe9\x6c\x08\xff\x1c\xcf\xa6\xb3\x17\x56\xc8\xef\xd3\xbb\xb7\x37\xbf\xdd\xc1\xef\xe3\x0f\x1f\xc6\xd7\x77\xd3\x5f\x67\x70\xf3\x01\x26\x37\xd7\x97\xd3\xbb\xe9\xcd\xf5\x0c\x6e\xfe\x05\xe3\xeb\x3f\xe0\x6a\x7a\x7d\xf9\x02\x90\x99\x15\x2a\xc0\xcf\x52\x59\x0b\x84\x02\x66\xd1\xc4\xd4\x41\x37\x43\x6c\xa8\xb0\x14\x5e\x25\x2d\x91\xb2\x25\xa3\x90\x13\x9e\x95\x24\x43\xc8\xc4\x06\x15\xb7\x91\x20\x51\x15\x4c\x5b\xaf\x6a\x20\x3c\xb5\x62\x72\x56\x30\x43\x8c\x5b\xea\xd8\x35\x1a\x58\x92\xf7\x8c\xae\x08\xe6\xf0\x11\x39\x7e\x61\x04\xfe\x56\x6c\xfc\xb7\x7f\x64\x05\x61\xf9\x88\x8a\xe2\xef\x83\x81\xde\x71\x43\x3e\xc3\x05\x0c\xa5\x12\x46\xbc\x1e\x9e\x0f\x06\x92\xd0\xb5\xd5\x80\x16\x84\xac\xf5\xf9\x60\xc0\x0a\x29\x94\x81\x61\x26\x44\x96\x63\x42\x24\x4b\x08\xe7\x22\x28\x30\x72\x9c\xc3\xf3\x9a\xcc\xfd\xa6\x27\x19\xf2\x13\xbd\x25\x59\x86\x2a\x11\xd2\x91\xf6\xb2\x0d\x06\x7e\x17\x8e\x32\x25\xe9\x28\x23\x06\xb7\x64\xe7\xb7\xe9\x3c\x43\x3e\x0f\x52\x46\x41\xca\x48\x48\xe4\x44\xb2\xcd\x69\xb5\x73\x0c\x17\xf0\x75\x00\xc0\xf8\x52\x9c\xb9\x6f\x00\x86\x99\x1c\xcf\x60\x38\xc9\x4b\x6d\x50\xc1\x7b\xc2\x49\x86\x0a\xc6\x57\x33\x78\x8b\xb9\xb4\x5f\x6f\xa7\xc3\x73\x47\xbc\xf1\x59\x73\x06\xc3\xcd\xcb\xd1\xab\xd1\xcb\xb0\x4c\x05\x37\x84\x9a\x4a\xa4\xfd\x70\x52\x58\xa9\x2d\x74\x03\xbd\xfd\x94\x2a\x3f\x83\xa1\x0d\x78\x7d\x96\x24\x19\x33\xab\x72\x61\xc1\x4e\xb4\xcf\xf9\x13\xca\xa9\x49\x68\x41\x4e\xc8\x5a\x47\x7c\x68\xbd\x72\x06\xc3\xae\x9b\x02\xd1\xbd\xfd\xcf\xfd\x83\x9f\x0d\x2a\x4e\xf2\x79\x2a\xa8\xae\x94\x7b\xca\xb9\x29\x6a\xaa\x98\x43\xd5\xda\x24\x14\x02\x59\x88\xd2\xc0\x23\x40\xbb\x1f\x00\x68\xba\xc2\x02\xf5\x19\xbc\xbd\xbb\xbb\x9d\x9d\xb7\x57\xec\x02\x15\x5c\x97\x6e\x65\x18\x12\xd8\x9e\x96\xfc\x5b\x0b\xee\xc4\x48\x25\xd2\x92\x1e\xda\xbf\x3f\x1f\x0c\x34\xaa\x0d\xa3\x58\xeb\xe4\xcd\xb5\x79\xc9\xf2\xdc\xf2\x6f\x98\xab\x78\x04\xa8\xa7\x70\xfb\x4a\x52\x98\x28\x24\x06\x2b\xbe\xa3\xc6\xcf\xf7\x3a\x3b\x06\x85\xa6\x54\x5c\xb7\xb6\x3e\xa0\xcc\x77\xc7\x91\xcf\xeb\xf8\x74\xf1\x3f\x22\x92\x8d\x2c\xce\x55\xd4\xed\x3f\xb2\x34\x70\x06\x43\x97\x21\x9b\x57\x49\xd0\x67\xd8\xa0\x59\x88\x74\x67\x89\xfe\x7f\xbf\x7c\x1f\x1c\xdc\x30\x4c\xa1\x51\x0c\x37\xbe\x5c\x68\x43\x4c\xa9\x6d\x89\xad\xad\xb4\xa5\x00\x98\xd1\xb0\x2e\x17\x48\x05\x5f\xb2\xcc\x55\x13\x2a\x38\x47\x6a\xd8\x86\x99\x5d\x8d\xc4\x1b\x34\x35\x0c\xfb\xef\x4d\x0c\xf6\xeb\x4f\x07\x20\xc3\x87\x01\xe8\xb5\x34\xc5\x1c\x0d\xf6\xf8\xef\xd2\x6d\xd4\x8a\x37\x7e\x36\x75\x6f\x6c\x3d\x5d\xfd\xa0\xc9\x9f\xb6\xa0\xf6\x15\x81\x9c\x69\x63\xfd\x14\x18\x75\x8f\x0b\xde\x59\x92\xa3\xe6\xef\x43\xae\xb0\x7b\xcf\xed\x8e\xc4\xea\xf8\x6d\x8b\x4a\xc5\xab\xba\xe8\x0a\xab\x2a\x5c\x6a\x86\x0a\x41\x24\x03\x9b\x99\x91\xbb\xde\xa0\x09\xd3\xc7\x34\x22\x3f\xda\x2f\x77\x8c\x0c\xeb\xcf\x66\x60\x50\xf7\xd1\xde\xda\x10\x96\xbb\x81\xa2\x94\x99\x22\x29\x36\x33\xac\xc7\x75\xbf\x55\x74\x47\xdd\xb5\x43\x2e\xac\xf6\x9f\xdd\x8d\x41\xe9\x6f\x58\x1b\xa8\x7a\xcc\x0a\x8a\xd5\xf9\xd5\xfc\xdd\x34\xa7\xb9\xf7\xdc\x15\xb2\x6b\x0a\x3c\xa5\x52\x72\x91\x22\x50\x51\x72\xd3\xe3\xba\x6b\x91\xe2\xc4\xee\xc5\xbe\xa9\x17\x0f\x39\xaf\x26\x78\x76\xef\x69\x4a\xf2\x3e\xdf\xdd\x0f\x06\x05\x6a\x6d\x07\xb0\x76\xc3\xda\xb7\xbe\x6b\x52\x60\x35\x70\x57\xfd\xc0\x08\x58\xe0\xbe\x1f\x62\xea\x88\xed\x78\xcb\x33\x37\xb6\xc0\x05\xbc\x3a\xaf\x24\xdc\xad\x02\xad\x1d\x1e\xab\xe9\xd3\x65\xac\xa3\x68\x1c\x7d\x1b\xe8\x66\x12\xe9\x9e\xe9\x02\x4e\xcf\x0f\x6a\xeb\xe0\x8a\x5a\xf5\x0a\xdd\x54\x2c\x94\xbb\x78\xc4\x6a\x6f\x89\x8e\x95\xb6\x93\xbe\xbb\x93\xd8\xd1\x1f\xb5\xf7\xe4\x42\x88\x1c\xc4\xba\x63\x40\x8a\x86\xb0\x5c\xb7\x91\x08\xac\xa0\x50\x4b\xc1\x35\x7a\x8b\xfc\xe6\xd4\x60\x51\x13\xb6\x4d\x68\xb4\xc6\xc7\xa0\x9d\x0b\xb1\xb6\x57\x0b\xf9\x20\xd6\x13\x85\x29\x72\xc3\x48\xae\x2d\xdf\xa7\x12\xd5\xae\x9e\xfc\xe3\xac\x1c\x7f\x29\x15\xc6\xd4\x34\xfa\x7e\x58\xd9\x16\xd8\x53\xdd\xd0\x94\x71\x3f\x42\xec\xb4\xc1\xa2\x0b\x67\x0c\xce\xa5\xc3\xf3\x41\x88\xda\x4d\x38\xf6\x31\x31\xf6\x4a\x15\x9d\xfd\x7f\xda\x83\x61\x84\x1d\x35\x8d\x12\xbb\x3f\x83\x53\xe8\xc6\xdf\x05\x52\x77\x30\xd8\x2b\x3c\x11\x65\x9e\x36\xa0\x5a\x60\xa5\x67\xc8\x9e\xbe\xc0\x9b\xd5\xb3\x98\x65\x8d\xc3\x34\xd8\x15\x86\xb5\xc3\xfe\x0a\x0d\x3f\xd2\xa4\x69\xb8\x46\xa2\xe8\x0a\x74\xb9\xa8\xc7\x73\x3f\xda\xc5\x33\xc5\x13\x63\xa5\x1e\x28\x9e\x1a\x2f\x81\xe9\x5d\xef\x9c\x83\xd2\xd6\x80\xb4\x2f\xd9\xba\x4a\xc5\x44\x7b\x65\x2e\x5b\x99\x16\x23\xcb\xd2\x86\x0e\x3d\x79\xd9\x13\x5f\xa7\xe7\x7d\x11\xaa\x1b\x5e\xec\xe1\xae\xbd\xf8\xba\x4f\xe9\x28\x53\x7e\x6c\xd5\x7b\xf8\xa3\x0b\x83\x11\xd5\x7d\xc1\x7e\x3d\x20\x2e\xa2\xbf\x80\x9f\x0e\xd7\xfc\x46\x9b\xe8\x2d\x0b\x75\xef\x38\x81\x9c\xad\x11\xc8\x5a\x7f\xb3\x49\x55\x23\xa8\x58\xc2\x55\xb9\x40\xc5\xd1\x60\x83\x6b\xfd\x8b\x9e\x57\x44\x0e\xb2\x98\xdb\x5e\x5c\xbf\xd1\xdd\xc6\x57\x33\xa7\x31\xb1\x09\xe5\x41\x7b\x44\xdb\x62\x1a\xde\x8e\xf7\xd9\xb1\x62\xd9\x6a\x1e\xe6\x49\x96\x33\xb3\xf3\x50\x45\x9a\x2c\xc9\x42\x31\x1a\xfa\x46\xa9\x5b\xed\x19\xcd\x56\xa8\xf5\x3c\x10\x5d\xc0\xcf\xe7\x03\x8b\x73\xe0\xa5\xcd\xfa\x50\x86\x87\x23\x6a\xcd\xb0\xec\xb1\xe3\x2a\xd7\x74\xea\xc3\xd7\x06\x2e\x52\x4e\x53\x27\x64\x7c\x3b\x85\x31\xa5\xa8\x1b\xa0\x12\x29\xe7\xad\x90\xb5\x6c\x77\xc8\x09\x37\x35\x1f\xe9\xf0\x19\x4f\x10\x87\xae\xe5\xbb\x25\x5a\x6f\x85\x4a\x1f\xe0\x94\x15\x49\x1c\xb6\x96\x77\xd6\x2e\x83\xfd\xfc\x71\xb5\xf4\xaa\xfb\x50\x4d\x12\x07\x0f\xa1\x6e\x30\x74\xc8\xfb\x19\xa3\xd1\xcb\x1d\x94\x18\x62\x40\xa1\x16\xa5\xa2\x76\xcc\xc7\xcf\x67\x90\x0b\x92\xc2\x82\xe4\x84\x53\x54\xc7\x2d\x80\xbd\x88\x99\x7f\xa3\x18\x87\x43\x1a\x50\x4f\x72\x86\xdc\x4c\x53\x38\x22\x6b\x72\xe6\x90\xbf\x3c\x8e\x35\xa7\x8e\xa0\x0f\x6e\xcf\x3a\x43\xaa\xd0\x04\xf6\x0a\xa6\x3e\x09\xda\x13\x86\x3a\xdb\x9b\xa3\x55\xb0\x37\x83\xc1\x59\x7d\x49\x0c\x81\x09\xf2\x56\xf6\xe7\xc2\x27\xce\x43\x9d\x7a\x51\xb2\x66\x27\x7d\x64\x87\xaa\xa4\x05\x3f\x54\x2f\x3d\x0d\x5f\xd9\xba\x44\xf2\xb5\xfd\xdf\x7b\xc7\xf9\xa4\x0e\xfd\x96\x73\xf6\xe7\xf6\x3a\x26\xa8\x57\xfd\x8c\x43\x6d\xca\xb5\x71\x4f\xde\x99\x12\xa5\x6c\xf5\xb3\xf1\xd5\xac\xda\x7f\x63\xb7\x81\x85\x5f\x73\x4f\xdd\xcc\x76\x92\xb5\xd8\xed\x0a\x18\xfb\x8f\xcf\xec\xfe\x23\x21\xc5\x25\xe3\xf6\xa6\x66\x76\x12\xdd\xfb\x0e\x2f\x8b\x85\xad\x3f\xcb\xfa\x40\x2f\xb9\x8e\xc1\xb6\x5e\xfb\xab\x47\xf0\x2d\x8f\x1a\x8d\x3b\xa6\x26\xe8\x2d\xba\x6d\xcd\x9c\x26\x47\x33\x43\x78\x4a\x54\x3a\xbf\x3c\x9d\x6f\x4e\x5f\x00\x1a\x3a\x3a\x6e\x0b\x72\xa4\xb5\x5b\x83\xa0\xf7\x8c\xb3\xa2\x2c\xfa\x0c\x81\xa3\x14\x97\xa4\xcc\x8d\x0b\xa1\x2f\xa8\xc4\x5e\x24\xe3\xe6\xf5\x29\x14\x8c\xcf\x3f\x95\x84\x1b\x5f\x4f\x5f\x57\x57\xa4\x18\x68\x20\xca\x1b\x99\x6c\x48\x5e\x22\x48\xc2\x94\x6d\x36\xc4\x00\x72\x77\xb7\xdf\x89\xd2\x65\x38\x31\x98\x09\xc5\xbe\xc4\xf9\x6d\x31\xde\x30\xdc\xba\x67\x4a\x91\xb3\xd4\xb9\x6b\xc1\xf2\x9c\xf1\xac\x81\xb4\x3b\xab\x89\x2e\xc9\x60\x8d\xbb\x36\x0c\x6b\xdc\x75\xe0\xb4\xa4\x4e\xbd\x36\xb1\xd7\xb9\x06\xed\x3e\x14\xac\x37\x68\xe2\xbe\x67\x0b\xde\xcc\xbf\xb5\x44\x03\xdd\xfe\x51\x05\xbe\x06\x3e\x3f\xd8\xd9\x1a\x59\x71\x57\xe3\x69\x97\xaf\x3d\x04\x2e\x41\x48\x54\x3e\xd5\xed\x9d\xec\xe6\xea\xc0\x5d\xa1\x12\xd5\xf3\xd6\xd3\x89\x3e\x43\x32\x10\x7e\x9e\xcc\x98\xbd\x90\x49\xa1\x99\x11\xaa\x83\x5a\xc6\x4c\xd4\xc4\x5b\xe8\xad\x10\x56\x44\xaf\xea\x30\x66\x06\xa8\x28\x0a\x66\xfa\xa4\xf8\x9d\x4e\x20\xf6\xb4\x72\xa3\x10\x9d\xa9\x34\x47\xc2\x61\xbb\x42\xee\x2a\x59\xaf\x58\x4b\x3c\xb7\x83\x15\xee\x23\x31\x88\xbe\xb4\x8b\x62\xe9\xab\x60\x9b\xd7\x2d\xce\x53\xcf\xf7\x53\x83\xef\xe3\xde\xc3\x99\xa8\x8b\x1d\x15\x85\x64\x79\x27\x52\x32\x11\xe1\xf3\x73\x43\xce\xc4\x73\xa8\xfd\x54\x11\xf1\xd1\x6a\xf3\x02\xfe\xd2\xe0\xba\xcd\x89\xb1\x9e\x03\x66\x3c\x08\x9e\xd0\xb7\xe8\x04\x54\xc9\xdd\x1f\x9f\xc2\xc4\x14\x49\x94\x15\xe3\x05\xfc\xb5\x9d\x91\x95\x49\x51\x50\xb8\xad\x9e\x58\x09\xd6\xcc\xe3\xa7\xc5\xea\x86\x10\x52\x60\xff\x3e\x57\x75\xea\xea\x9d\xae\xe7\x62\x13\x3d\xc3\xfd\xa8\x37\xf7\x3a\x43\xdd\x5f\x55\xbb\xaf\x8f\x0f\x58\xf5\xfd\x57\xfc\x90\x48\x3d\xa7\x42\xdc\xaa\xc2\x81\xfb\x17\xd1\x48\xf9\x0e\x6f\xe5\xc4\x5a\xf1\x8a\xfb\x6b\x8c\x6a\x23\xaf\xa3\xcb\x43\xe7\xbd\xf1\x31\x7e\x0b\x27\x7f\xd7\xe3\x56\xf3\xe0\xc7\xbd\x6e\xf5\x3c\x80\x3e\xfa\x79\xab\x42\xeb\xbf\xf9\xb4\xf5\x80\xcd\x3f\xf4\x55\xad\xa9\x77\xcf\x5d\xed\xfe\x80\x89\x9d\x49\xf7\x39\x66\xd6\x57\xfd\xe5\x29\x7a\x78\xee\xa6\x70\xfc\xc6\xfc\xbf\x56\x99\x1e\x67\xd8\x73\xbc\x27\x99\x46\x6d\x72\xe7\x4a\x4b\x66\x0d\x7f\xf0\x65\xe4\xae\xcb\xb8\xff\x13\x80\x9f\x23\xa3\x61\xff\xfe\x3f\x01\x00\x00\xff\xff\x2a\x83\xb8\x37\x8c\x23\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9100, mode: os.FileMode(420), modTime: time.Unix(1537418755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
