// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x18\xe8\xa5\x76\x11\x6b\x13\xe7\xae\x3d\xd8\x75\x51\x55\xbe\x26\x82\x13\xdb\x88\x7c\x39\xdc\x93\x40\x71\x47\x2b\x56\x5c\x92\x21\xb9\x52\x94\xc0\xdf\xbd\xe0\x9f\x5d\x71\x57\x6b\xc7\x97\x04\x68\xf4\x90\x48\xe4\xcc\x70\xe6\x37\x7f\x49\x67\x19\x4c\xa4\xda\x69\x56\xac\x2c\x9c\x3e\x7f\xf1\x0b\xcc\x48\x69\x2a\x51\xc0\xec\x72\x06\x13\x2e\xab\x1c\xae\x89\x65\x1b\x84\x89\x2c\x55\x65\x99\x28\xe0\x0e\x49\x09\xa4\xb2\x2b\xa9\xcd\x68\x90\x65\x83\x2c\x83\x37\x8c\xa2\x30\x98\x43\x25\x72\xd4\x60\x57\x08\x63\x45\xe8\x0a\xeb\x9d\x67\xf0\x1e\xb5\x61\x52\xc0\xe9\xe8\x39\x1c\x39\x82\x61\xdc\x1a\x1e\x9f\x3b\x11\x3b\x59\x41\x49\x76\x20\xa4\x85\xca\x20\xd8\x15\x33\xb0\x64\x1c\x01\x3f\x52\x54\x16\x98\x00\x2a\x4b\xc5\x19\x11\x14\x61\xcb\xec\xca\x9f\x13\xa5\x38\x4d\xe0\x8f\x28\x43\x2e\x2c\x61\x02\x08\x50\xa9\x76\x20\x97\x29\x21\x10\x1b\x95\x76\x9f\x95\xb5\xea\x2c\xcb\xb6\xdb\xed\x88\x78\x85\x47\x52\x17\x19\x0f\xa4\x26\x7b\x33\x9d\xfc\x7a\x3d\xfb\xf5\xe4\x74\xf4\x3c\x32\xfd\x26\x38\x1a\x03\x1a\x3f\x54\x4c\x63\x0e\x8b\x1d\x10\xa5\x38\xa3\x64\xc1\x11\x38\xd9\x82\xd4\x40\x0a\x8d\x98\x83\x95\x4e\xe9\xad\x66\x0e\xb7\x67\x60\xe4\xd2\x6e\x89\x46\x27\x26\x67\xc6\x6a\xb6\xa8\x6c\x0b\xb3\x5a\x45\x66\x5a\x04\x52\x00\x11\x30\x1c\xcf\x60\x3a\x1b\xc2\xbf\xc7\xb3\xe9\xec\x99\x13\xf2\xfb\xf4\xee\xf5\xcd\x6f\x77\xf0\xfb\xf8\xdd\xbb\xf1\xf5\xdd\xf4\xd7\x19\xdc\xbc\x83\xc9\xcd\xf5\xe5\xf4\x6e\x7a\x73\x3d\x83\x9b\xff\xc0\xf8\xfa\x0f\xb8\x9a\x5e\x5f\x3e\x03\x64\x76\x85\x1a\xf0\xa3\xd2\xce\x02\xa9\x81\x39\x34\x31\xf7\xd0\xcd\x10\x5b\x2a\x2c\x65\x50\xc9\x28\xa4\x6c\xc9\x28\x70\x22\x8a\x8a\x14\x08\x85\xdc\xa0\x16\x2e\x12\x14\xea\x92\x19\xe7\x55\x03\x44\xe4\x4e\x0c\x67\x25\xb3\xc4\xfa\xa5\x03\xbb\x46\x03\x47\xf2\x96\xd1\x15\x41\x0e\xef\x51\xe0\x27\x46\xe0\x1f\xe5\x26\x7c\xfb\x57\x51\x12\xc6\x47\x54\x96\xff\x1c\x0c\xcc\x4e\x58\xf2\x11\x2e\x60\xa8\xb4\xb4\xf2\xe5\xf0\x7c\x30\x50\x84\xae\x9d\x06\xb4\x24\x64\x6d\xce\x07\x03\x56\x2a\xa9\x2d\x0c\x0b\x29\x0b\x8e\x19\x51\x2c\x23\x42\xc8\xa8\xc0\xc8\x73\x0e\xcf\x1b\x32\xff\x9b\x9e\x14\x28\x4e\xcc\x96\x14\x05\xea\x4c\x2a\x4f\xda\xcb\x36\x18\x84\x5d\x38\x2a\xb4\xa2\xa3\x82\x58\xdc\x92\x5d\xd8\xa6\xf3\x02\xc5\x3c\x4a\x19\x45\x29\x23\xa9\x50\x10\xc5\x36\xa7\xf5\xce\x31\x5c\xc0\xe7\x01\x00\x13\x4b\x79\xe6\xbf\x01\x58\x66\x39\x9e\xc1\x70\xc2\x2b\x63\x51\xc3\x5b\x22\x48\x81\x1a\xc6\x57\x33\x78\x8d\x5c\xb9\xaf\xb7\xd3\xe1\xb9\x27\xde\x84\xac\x39\x83\xe1\xe6\xf9\xe8\xc5\xe8\x79\x5c\xa6\x52\x58\x42\x6d\x2d\xd2\x7d\x04\x29\x9d\xd4\x0e\xba\x91\xde\x7d\x2a\xcd\xcf\x60\xe8\x02\xde\x9c\x65\x59\xc1\xec\xaa\x5a\x38\xb0\x33\x13\x72\xfe\x84\x0a\x6a\x33\x5a\x92\x13\xb2\x36\x09\x1f\x3a\xaf\x9c\xc1\xf0\xd0\x4d\x91\xe8\xde\xfd\xe7\xff\xc1\x8f\x16\xb5\x20\x7c\x9e\x4b\x6a\x6a\xe5\xbe\xe6\xdc\x1c\x0d\xd5\xcc\xa3\xea\x6c\x92\x1a\x81\x2c\x64\x65\xe1\x09\xa0\xdd\x0f\x00\x0c\x5d\x61\x89\xe6\x0c\x5e\xdf\xdd\xdd\xce\xce\xbb\x2b\x6e\x81\x4a\x61\x2a\xbf\x32\x8c\x09\xec\x4e\xcb\xfe\x6b\xa4\xf0\x62\x94\x96\x79\x45\x1f\xda\xbf\x3f\x1f\x0c\x0c\xea\x0d\xa3\xd8\xe8\x14\xcc\x75\x79\xc9\x38\x77\xfc\x1b\xe6\x2b\x1e\x01\x1a\x28\xfc\xbe\x56\x14\x26\x1a\x89\xc5\x9a\xef\xa8\xf5\xf3\xad\x29\x8e\x41\xa3\xad\xb4\x30\x9d\xad\x77\xa8\xf8\xee\x38\xf1\x79\x13\x9f\x3e\xfe\x47\x44\xb1\x91\xc3\xb9\x8e\xba\xfd\x47\x55\x16\xce\x60\xe8\x33\x64\xf3\x22\x8b\xfa\x0c\x5b\x34\x0b\x99\xef\x1c\xd1\x5f\xf7\xcb\xf7\xd1\xc1\x2d\xc3\x34\x5a\xcd\x70\x13\xca\x85\xb1\xc4\x56\xc6\x95\xd8\xc6\x4a\x57\x0a\x80\x59\x03\xeb\x6a\x81\x54\x8a\x25\x2b\x7c\x35\xa1\x52\x08\xa4\x96\x6d\x98\xdd\x35\x48\xbc\x42\xdb\xc0\xb0\xff\xde\xc6\x60\xbf\xfe\xf5\x00\x14\xf8\x38\x00\xbd\x96\xe6\xc8\xd1\x62\x8f\xff\x2e\xfd\x46\xa3\x78\xeb\x67\x5b\xf7\xd6\xd6\xd7\xab\x1f\x35\xf9\xd3\x16\x34\xbe\x22\xc0\x99\xb1\xce\x4f\x91\xd1\xf4\xb8\xe0\x8d\x23\x39\x6a\xff\x7e\xc8\x15\x6e\xef\x7b\xbb\x23\x73\x3a\x7e\xd9\xa2\x4a\x8b\xba\x2e\xfa\xc2\xaa\x4b\x9f\x9a\xb1\x42\x10\xc5\xc0\x65\x66\xe2\xae\x57\x68\xe3\xf4\x31\x4d\xc8\x8f\xf6\xcb\x07\x46\xc6\xf5\xef\x66\x60\x54\xf7\xc9\xde\xda\x10\xc6\xfd\x40\x51\xa9\x42\x93\x1c\xdb\x19\xd6\xe3\xba\xdf\x6a\xba\xa3\xc3\xb5\x87\x5c\x58\xef\x7f\x77\x37\x46\xa5\xbf\x60\x6d\xa4\xea\x31\x2b\x2a\xd6\xe4\x57\xfb\x77\xdb\x9c\xf6\xde\xf7\xae\x90\x87\xa6\xc0\x17\x2a\xe5\xfd\x60\x50\xa2\x31\x6e\x4c\xe9\x96\xf5\x7d\x83\xb8\x26\x25\xd6\x63\x69\x5d\x35\xad\x84\x05\xee\xbb\x06\xe6\x9e\xd8\x0d\x81\xa2\xf0\xcd\x1d\x2e\xe0\xc5\x79\x2d\xe1\x6e\x15\x69\xdd\x88\x55\xcf\x68\x3e\xae\x3d\x45\xeb\xe8\xdb\x48\x37\x53\x48\xf7\x4c\x17\x70\x7a\xfe\xa0\xb6\x1e\xc7\xa4\xa1\xad\xd0\xcf\x8e\x52\xfb\xf1\x3c\x55\x7b\x4b\x4c\xaa\xb4\x9b\x87\xfd\xe4\xee\x06\x64\x34\x76\x10\xf0\x92\x1c\xe4\xfa\xc0\x80\x1c\x2d\x61\xdc\x74\x91\x88\xac\xa0\xd1\x28\x29\x0c\x06\x8b\xc2\xe6\xd4\x62\xd9\x10\x76\x4d\x68\x35\x90\xa7\xa0\xcd\xa5\x5c\xbb\x01\x5c\x3d\x8a\xf5\x44\x63\x8e\xc2\x32\xc2\x8d\xe3\xfb\x50\xa1\xde\x35\xf3\x71\x1a\xbb\xe3\x4f\x95\xc6\x94\x9a\x26\xdf\x1f\x56\xb6\x03\xf6\xd4\xb4\x34\x65\x22\x34\xda\x9d\xb1\x58\x1e\xc2\x99\x82\x73\xe9\xf1\x7c\x14\xa2\x6e\xab\x4a\x7d\x4c\xac\xbb\x78\x24\x67\xff\xc5\x04\x30\xac\x74\x03\x99\xd5\x72\xf7\x67\x70\x8a\x3d\xeb\x9b\x40\x3a\x6c\x9f\x7b\x85\x27\xb2\xe2\x79\x0b\xaa\x05\xd6\x7a\xc6\xec\xe9\x0b\xbc\x59\x33\xb1\x38\xd6\x34\x4c\xa3\x5d\x71\xa4\x79\xd8\x5f\xb1\x2d\x26\x9a\xb4\x0d\x37\x48\x34\x5d\x81\xa9\x16\xcd\x10\x1b\x06\xa0\xb4\xf3\x7e\x65\xac\x34\x6d\xf7\x6b\xe3\x25\x32\xbd\xe9\x9d\x06\x50\xb9\x1a\x90\xf7\x25\xdb\xa1\x52\x29\xd1\x5e\x99\xcb\x4e\xa6\xa5\xc8\xb2\xbc\xa5\x43\x4f\x5e\xf6\xc4\xd7\xe9\x79\x5f\x84\x9a\x96\x17\x7b\xb8\x1b\x2f\xbe\xec\x53\x3a\xc9\x94\x1f\x5b\xf5\x1e\xfe\x64\xac\xb6\xb2\x9e\xaa\xdd\xd7\x07\xc4\x25\xf4\x17\xf0\xd3\xc3\x35\xbf\xd5\x26\x7a\xcb\x42\xd3\x3b\x4e\x80\xb3\x35\x02\x59\x9b\x2f\x36\xa9\x7a\x50\x93\x4b\xb8\xaa\x16\xa8\x05\x5a\x6c\x71\xad\x7f\x31\xf3\x9a\xc8\x43\x96\x72\xbb\xeb\xdd\x17\xba\xdb\xf8\x6a\xe6\x35\x26\x2e\xa1\x02\x68\x4f\x68\x5b\xcc\xc0\xeb\xf1\x3e\x3b\x56\xac\x58\xcd\xe3\xd4\xc5\x38\xb3\xbb\x00\x55\xa2\xc9\x92\x2c\x34\xa3\xb1\x6f\x54\xa6\xd3\x9e\xd1\x6e\xa5\x5e\xcf\x23\xd1\x05\xfc\x7c\x3e\x70\x38\x47\x5e\xda\xae\x0f\x55\x7c\x5e\xa1\xce\x0c\xc7\x9e\x3a\xae\x76\xcd\x41\x7d\xf8\xdc\xc2\x45\xa9\x69\xee\x85\x8c\x6f\xa7\x30\xa6\x14\x4d\x0b\x54\xa2\xd4\xbc\x13\xb2\x8e\xed\x0e\x05\x11\xb6\xe1\x23\x07\x7c\x36\x10\xa4\xa1\xeb\xf8\x6e\x89\x31\x5b\xa9\xf3\x47\x38\x55\x4d\x92\x86\xad\xe3\x9d\x75\xcb\x60\x3f\x7f\x5a\x2d\x83\xea\x21\x54\xb3\xcc\xc3\x43\x28\x95\x95\xf0\x2f\x83\x71\xc6\x68\xf5\x72\x0f\x25\xc6\x18\xd0\x68\x64\xa5\xa9\x1b\x86\xf1\xe3\x19\x70\x49\x72\x58\x10\x4e\x04\x45\x7d\xdc\x01\x38\x88\x98\x85\x9b\xfc\x38\x1e\xd2\x82\x7a\xc2\x19\x0a\x3b\xcd\xe1\x88\xac\xc9\x99\x47\xfe\xf2\x38\xd5\x9c\x7a\x82\x3e\xb8\x03\xeb\x0c\xa9\x46\x1b\xd9\x6b\x98\xfa\x24\x98\x40\x18\xeb\x6c\x6f\x8e\xd6\xc1\xde\x0e\x06\x6f\xf5\x25\xb1\x04\x26\x28\x3a\xd9\xcf\x65\x48\x9c\xc7\x3a\xf5\xa2\x62\xed\x4e\xfa\xc4\x0e\x55\x4b\x8b\x7e\xa8\xdf\x43\x5a\xbe\x72\x75\x89\xf0\xb5\xfb\x3f\x78\xc7\xfb\xa4\x09\xfd\x8e\x73\xf6\xe7\xf6\x3a\x26\xaa\x57\xff\x4c\x43\x6d\x2a\x8c\xf5\x0f\xc3\x85\x96\x95\xea\xf4\xb3\xf1\xd5\xac\xde\x7f\xe5\xb6\x81\xc5\x5f\xf3\x40\xdd\xce\x76\x52\x74\xd8\xdd\x0a\x58\xf7\x4f\xc8\xec\xfe\x23\x21\xc7\x25\x13\xee\x3e\x63\x77\x0a\xfd\x2b\x88\xa8\xca\x85\xab\x3f\xcb\xe6\xc0\x20\xb9\x89\xc1\xae\x5e\xfb\x3b\x49\xf4\xad\x48\x1a\x8d\x3f\xa6\x21\xe8\x2d\xba\x5d\xcd\xbc\x26\x47\x33\x4b\x44\x4e\x74\x3e\xbf\x3c\x9d\x6f\x4e\x9f\x01\x5a\x3a\x3a\xee\x0a\xf2\xa4\x8d\x5b\xa3\xa0\xb7\x4c\xb0\xb2\x2a\xfb\x0c\x81\xa3\x1c\x97\xa4\xe2\xd6\x87\xd0\x27\xd4\x72\x2f\x92\x09\xfb\xf2\x14\x4a\x26\xe6\x1f\x2a\x22\x6c\xa8\xa7\x2f\xeb\x2b\x52\x0a\x34\x10\x1d\x8c\xcc\x36\x84\x57\x08\x8a\x30\xed\x9a\x0d\xb1\x80\xc2\xdf\x80\x77\xb2\xf2\x19\x4e\x2c\x16\x52\xb3\x4f\x69\x7e\x3b\x8c\x37\x0c\xb7\xfe\x31\x4f\x72\x96\x7b\x77\x2d\x18\xe7\x4c\x14\x2d\xa4\xfd\x59\x6d\x74\x49\x01\x6b\xdc\x75\x61\x58\xe3\xee\x00\x4e\x47\xea\xd5\xeb\x12\x07\x9d\x1b\xd0\xee\x63\xc1\x7a\x85\x36\xed\x7b\xae\xe0\xcd\xc2\x8b\x44\x32\xd0\xed\x9f\x1e\xe0\x73\xe4\x0b\x83\x9d\xab\x91\x35\x77\x3d\x9e\x1e\xf2\x75\x87\xc0\x25\x48\x85\x3a\xa4\xba\xbb\x93\xdd\x5c\x3d\x70\x57\xa8\x45\xf5\xbc\x88\x1c\x44\x9f\x25\x05\xc8\x30\x4f\x16\xcc\x5d\xc8\x94\x34\xcc\x4a\x7d\x80\x5a\xc1\x6c\xd2\xc4\x3b\xe8\xad\x10\x56\xc4\xac\x9a\x30\x66\x16\xa8\x2c\x4b\x66\xfb\xa4\x84\x9d\x83\x40\xec\x69\xe5\x56\x23\x7a\x53\x29\x47\x22\x60\xbb\x42\xe1\x2b\x59\xaf\x58\x47\x3c\x77\x83\x15\xee\x23\x31\x8a\xbe\x74\x8b\x72\x19\xaa\x60\x97\xd7\x2f\xce\xf3\xc0\xf7\x53\x8b\xef\xfd\xde\xc3\x85\x6c\x8a\x1d\x95\xa5\x62\xfc\x20\x52\x0a\x99\xe0\xf3\x73\x4b\xce\x24\x70\xe8\xfd\x54\x91\xf0\xd1\x7a\xf3\x02\xfe\xd6\xe2\xba\xe5\xc4\x3a\xcf\x01\xb3\x01\x84\x40\x18\x5a\x74\x06\xba\x12\xfe\x4f\x34\x71\x62\x4a\x24\xaa\x9a\xf1\x02\xfe\xde\xcd\xc8\xda\xa4\x24\x28\xfc\x56\x4f\xac\x44\x6b\xe6\xe9\x03\x5c\x7d\x43\x88\x29\xb0\x7f\xc5\xaa\x3b\x75\xfd\x9a\xd5\x73\xb1\x49\x1e\xab\x7e\xd4\x9b\x7b\x93\xa1\xfe\x6f\x8f\x87\x6f\x74\x8f\x58\xf5\xed\x57\xfc\x98\x48\x3d\xa7\x42\xda\xaa\xe2\x81\xfb\x77\xc3\x44\xf9\x03\xde\xda\x89\x8d\xe2\x35\xf7\xe7\x14\xd5\x56\x5e\x27\x97\x87\x83\x57\xb9\xa7\xf8\x2d\x9e\xfc\x4d\x8f\x5b\xed\x83\x9f\xf6\xba\xd5\xf3\x4c\xf8\xe4\xe7\xad\x1a\xad\xff\xe7\xd3\xd6\x23\x36\xff\xd0\x57\xb5\xb6\xde\x3d\x77\xb5\xfb\x07\x4c\x3c\x98\x74\xbf\xc7\xcc\xea\x02\xf8\x7f\x01\x00\x00\xff\xff\x28\x9c\x2d\x26\xf4\x20\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8436, mode: os.FileMode(420), modTime: time.Unix(1537333556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
