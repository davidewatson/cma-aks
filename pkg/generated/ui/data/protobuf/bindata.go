// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x1a\x5d\x73\xda\x48\xf2\x9d\x5f\xd1\xc5\xcb\xd9\x57\x0e\x24\x4e\xf6\x6e\xcb\x3e\x5f\x1d\x07\x5e\x87\x72\x82\x5d\x16\xc9\xd6\x3e\x51\x83\xd4\x88\x39\xa4\x19\xed\xcc\x08\x4c\x52\xfe\xef\x57\xf3\x21\x31\xfa\x80\x10\xc7\x57\xb7\xcb\x83\x8d\x34\xdd\x3d\xfd\x3d\xdd\x3d\xf4\xfb\x30\xe4\xd9\x56\xd0\x78\xa9\xe0\xfc\xf5\x9b\x9f\x21\x20\xa9\xcc\x59\x0c\xc1\x28\x80\x61\xc2\xf3\x08\x26\x44\xd1\x35\xc2\x90\xa7\x59\xae\x28\x8b\x61\x8a\x24\x05\x92\xab\x25\x17\xb2\xd7\xe9\xf7\x3b\xfd\x3e\x7c\xa0\x21\x32\x89\x11\xe4\x2c\x42\x01\x6a\x89\x30\xc8\x48\xb8\xc4\x62\xe5\x0c\x3e\xa3\x90\x94\x33\x38\xef\xbd\x86\x13\x0d\xd0\x75\x4b\xdd\xd3\x4b\x4d\x62\xcb\x73\x48\xc9\x16\x18\x57\x90\x4b\x04\xb5\xa4\x12\x16\x34\x41\xc0\xc7\x10\x33\x05\x94\x41\xc8\xd3\x2c\xa1\x84\x85\x08\x1b\xaa\x96\x66\x1f\x47\x45\x73\x02\xbf\x39\x1a\x7c\xae\x08\x65\x40\x20\xe4\xd9\x16\xf8\xc2\x07\x04\xa2\x1c\xd3\xfa\xb3\x54\x2a\xbb\xe8\xf7\x37\x9b\x4d\x8f\x18\x86\x7b\x5c\xc4\xfd\xc4\x82\xca\xfe\x87\xf1\xf0\x7a\x12\x5c\xbf\x3a\xef\xbd\x76\x48\x9f\x58\x82\x52\x82\xc0\xdf\x73\x2a\x30\x82\xf9\x16\x48\x96\x25\x34\x24\xf3\x04\x21\x21\x1b\xe0\x02\x48\x2c\x10\x23\x50\x5c\x33\xbd\x11\x54\xeb\xed\x0c\x24\x5f\xa8\x0d\x11\xa8\xc9\x44\x54\x2a\x41\xe7\xb9\xaa\xe8\xac\x60\x91\xca\x0a\x00\x67\x40\x18\x74\x07\x01\x8c\x83\x2e\xfc\x7b\x10\x8c\x83\x33\x4d\xe4\xd7\xf1\xf4\xfd\xdd\xa7\x29\xfc\x3a\x78\x78\x18\x4c\xa6\xe3\xeb\x00\xee\x1e\x60\x78\x37\x19\x8d\xa7\xe3\xbb\x49\x00\x77\xbf\xc0\x60\xf2\x1b\xdc\x8e\x27\xa3\x33\x40\xaa\x96\x28\x00\x1f\x33\xa1\x25\xe0\x02\xa8\xd6\x26\x46\x46\x75\x01\x62\x85\x85\x05\xb7\x2c\xc9\x0c\x43\xba\xa0\x21\x24\x84\xc5\x39\x89\x11\x62\xbe\x46\xc1\xb4\x27\x64\x28\x52\x2a\xb5\x55\x25\x10\x16\x69\x32\x09\x4d\xa9\x22\xca\xbc\x6a\xc8\xd5\xeb\x68\x90\x8f\x34\x5c\x12\x4c\xe0\x33\x32\xfc\x42\x09\xfc\x23\x5d\xdb\x6f\xff\x8a\x53\x42\x93\x5e\xc8\xd3\x7f\x76\x3a\x72\xcb\x14\x79\x84\x2b\xe8\x66\x82\x2b\xfe\xb6\x7b\xd9\xe9\x64\x24\x5c\x69\x0e\xc2\x94\x90\x95\xbc\xec\x74\x68\x9a\x71\xa1\xa0\x1b\x73\x1e\x27\xd8\x27\x19\xed\x13\xc6\xb8\x63\xa0\x67\x30\xbb\x97\x25\x98\x79\x0e\x5f\xc5\xc8\x5e\xc9\x0d\x89\x63\x14\x7d\x9e\x19\xd0\x56\xb4\x4e\xc7\xae\xc2\x49\x2c\xb2\xb0\x17\x13\x85\x1b\xb2\xb5\xcb\xe1\x2c\x46\x36\x73\x54\x7a\x8e\x4a\x8f\x67\xc8\x48\x46\xd7\xe7\xc5\xca\x29\x5c\xc1\xd7\x0e\x00\x65\x0b\x7e\x61\xbe\x01\x28\xaa\x12\xbc\x80\xee\x30\xc9\xa5\x42\x01\x1f\x09\x23\x31\x0a\x18\xdc\x06\xf0\x1e\x93\x4c\x7f\xbd\x1f\x77\x2f\x0d\xf0\xda\x46\xcd\x05\x74\xd7\xaf\x7b\x6f\x7a\xaf\xdd\xeb\x90\x33\x45\x42\x55\x90\xd4\x1f\x46\x52\x4d\xb5\xa6\x5d\x07\xaf\x3f\xb9\x48\x2e\xa0\xab\x1d\x5e\x5e\xf4\xfb\x31\x55\xcb\x7c\xae\x95\xdd\x97\x36\xe6\x5f\x85\x2c\x54\xfd\x30\x25\xaf\xc8\x4a\x7a\x78\xa8\xad\x72\x01\xdd\xa6\x99\x1c\xd0\x93\xfe\x67\xfe\xe0\xa3\x42\xc1\x48\x32\x8b\x78\x28\x0b\xe6\x9e\xb3\x6f\x84\x32\x14\xd4\x68\x55\xcb\xc4\x05\x02\x99\xf3\x5c\xc1\x11\x4a\x7b\xea\x00\xc8\x70\x89\x29\xca\x0b\x78\x3f\x9d\xde\x07\x97\xf5\x37\xfa\x45\xc8\x99\xcc\xcd\x9b\xae\x0b\x60\xbd\x5b\xff\x3f\x92\x33\x43\x26\x13\x3c\xca\xc3\x7d\xeb\x4f\x97\x9d\x8e\x44\xb1\xa6\x21\x96\x3c\x59\x71\x75\x5c\xd2\x24\xd1\xf8\x6b\x6a\x32\x1e\x81\xd0\x42\x98\x75\x91\x85\x30\x14\x48\x14\x16\x78\x27\x95\xc7\x8f\x32\x3e\x05\x81\x2a\x17\x4c\xd6\x96\x1e\x30\x4b\xb6\xa7\x9e\xcd\x4b\xff\x34\xfe\xdf\x23\x19\xed\x69\x3d\x17\x5e\xb7\xfb\x64\xb9\x82\x0b\xe8\x9a\x08\x59\xbf\xe9\x3b\x7e\xba\x15\x98\x39\x8f\xb6\x1a\xe8\xaf\xbb\xd7\x4f\xce\xc0\x15\xc1\x04\x2a\x41\x71\x6d\xd3\x85\x54\x44\xe5\x52\xa7\xd8\x52\x4a\x9d\x0a\x80\x2a\x09\xab\x7c\x8e\x21\x67\x0b\x1a\x9b\x6c\x12\x72\xc6\x30\x54\x74\x4d\xd5\xb6\xd4\xc4\x0d\xaa\x52\x0d\xbb\xef\x55\x1d\xec\xde\x3f\x5f\x01\x31\x1e\x56\x40\xab\xa4\x11\x26\xa8\xb0\xc5\x7e\x23\xb3\x50\x32\x5e\x79\xac\xf2\x5e\x59\x7a\x3e\xfb\x8e\x93\xef\x96\xa0\xb4\x15\x81\x84\x4a\xa5\xed\xe4\x10\x65\x8b\x09\x3e\x68\x90\x93\xea\xf3\x3e\x53\xe8\xb5\x97\x36\x47\x5f\xf3\xf8\x6d\x89\x72\xc1\x8a\xbc\x68\x12\xab\x48\x4d\x68\xba\x0c\x41\x32\x0a\x3a\x32\x3d\x73\xdd\xa0\x72\xd5\xc7\xd8\x03\x3f\xd9\xbd\x6e\x08\xe9\xde\xbf\x98\x80\x8e\xdd\xa3\xad\xb5\x26\x34\x31\x05\x45\x9e\xc5\x82\x44\x58\x8d\xb0\x16\xd3\x7d\x2a\xe0\x4e\x9a\xef\xf6\x99\xb0\x58\x7f\x71\x33\x3a\xa6\xbf\x21\xad\x83\x6a\x11\xcb\x31\x56\xc6\x57\xf5\xb9\x2a\x4e\x75\xed\xa5\x33\x64\x53\x14\x78\x4e\xa6\x64\x3c\x42\x08\x79\xce\x54\x8b\xe9\x26\x3c\xc2\xa1\x5e\xf3\x6d\x53\xbe\xdc\x67\xbc\x12\xe0\xc5\xad\x27\x43\x92\x7c\xcb\x76\x06\x66\x67\x39\xd9\x26\x61\xa0\x61\x4a\x1b\xfa\x4f\x55\x99\xfc\x95\x17\xb7\x5f\x4d\x98\xc2\x7a\x47\x18\x0f\x99\x09\xc0\xf2\x50\xcb\x15\xd7\xc4\x28\x8b\x4b\x09\xaf\x0d\x88\x63\x7d\xb0\x03\x80\x93\x7d\x2b\x55\xc9\xf7\x41\xbd\xb8\x16\x3c\xe6\x8f\xf7\xe4\xa7\x4e\x07\x59\x9e\x16\xe5\x4d\x60\x4f\xfa\xb2\xc8\x99\x70\x05\x12\xad\xb9\x83\xe9\x60\xfa\x29\x98\x7d\x9a\x04\xf7\xd7\xc3\xf1\x2f\xe3\xeb\x11\x5c\xc1\xeb\xcb\x02\x74\xba\x44\xb8\x7f\xb8\xfb\x3c\x0e\xc6\x77\x93\xf1\xe4\xc6\x54\x0d\x08\x94\x45\xba\xaa\x42\x69\x2a\x89\x42\xd1\x54\xc2\x1c\xb5\x12\x43\x53\xfa\x44\x3d\x43\xa5\x82\x7e\x05\x6f\x2a\xb4\x1f\x3e\x4d\xbe\x49\x76\x49\x34\x5d\x64\x05\x59\x5b\xa5\x48\x58\xe4\x49\xb2\x85\x5c\x6a\x4b\xd8\xad\x0a\x6a\x57\x70\x5e\xdd\xe5\x7a\x78\x37\x19\x8e\x3f\xb4\xef\x44\x14\x48\x9e\x22\x6c\xb8\x58\x69\xba\x44\x57\x3a\x98\x6c\x9d\x30\x11\x67\xa8\xfb\x38\x8f\xa5\x33\x90\x79\xb8\x04\x22\x5d\x26\xd4\x60\x7a\x39\x25\x86\x61\x2e\x6c\x50\x15\x5d\xa3\x63\xce\x63\xe2\x0a\xde\x56\x18\x0c\xa6\x77\xf7\xf7\x47\xab\xd7\x96\x14\x91\xb3\x9f\xc3\xbc\x82\x77\x15\x92\xd7\x0f\x0f\x77\x0f\x07\xe9\xe9\x76\x7b\x8e\x90\x33\xab\x42\x83\x6c\xb1\xae\xe0\xa7\x0a\xad\xd1\xf5\xcd\xc3\x60\x74\x3d\x3a\x48\xce\xf5\xd5\x12\x72\xa9\x83\x2e\x34\x7e\xaf\x38\x08\x94\x4a\x77\x01\xda\x5c\xb0\xc8\x99\x59\x20\x49\x51\x4a\x96\xb4\xaf\xe0\x6f\x97\xda\x73\x53\x94\x52\xb7\x8a\xf5\xd2\xda\xf3\x5f\x92\x62\x31\x1a\x28\x76\x57\x5c\xcb\x52\x56\xee\x4e\x3b\xba\x11\x67\xb1\x69\xb0\x1a\xae\x67\x60\x75\x9b\x5b\xf4\xc9\xa6\xb6\x30\x10\x95\xad\xef\x1d\x5c\x90\x61\xb8\x43\x32\x2e\xb6\x8f\x5b\x93\x05\xbc\xa6\x62\x89\xa6\x7f\x37\x7e\xa1\x2a\x6c\x6f\x88\xf4\x99\x86\xf9\xd6\x4e\x4f\xb4\x32\x51\xda\x10\x9d\x73\x9e\x00\x5f\x35\x04\x88\x50\x11\x9a\xc8\xba\x26\x1c\xaa\xd6\x7b\xc6\x99\xb4\x76\x75\x8c\x8d\x15\xa6\x25\x60\x5d\x84\x4a\x11\x7f\x8c\xb6\x13\xce\x57\x18\x41\x9e\x1d\xd4\xf5\x50\x60\x84\x4c\x51\x92\x48\x8d\xf7\x7b\x8e\x62\x5b\xce\x28\xfc\xfa\x61\xf0\x25\x17\xe8\x43\x87\xde\xf7\xfd\xcc\xd6\x94\x3d\xae\x05\x8d\x0d\x5c\xb9\x95\x0a\xd3\xa6\x3a\x7d\xe5\x8c\x8c\x3e\x0f\xaa\xa8\xde\x2e\xf8\x36\x26\x4a\x47\xa8\xb7\xf7\x5f\xa4\x55\x86\xe2\xba\x29\x56\x82\x6f\xbf\x47\x4f\xae\x6f\xf8\x21\x25\x35\x5b\x98\x1d\xc3\x43\x9e\x27\x51\x45\x55\x73\x2c\xf8\x74\xd1\xd3\xe6\x78\x41\xd9\x35\x6a\x54\xdf\x4d\xab\x87\x8d\xeb\x2e\xf7\x9b\xcd\x75\x28\x1e\x43\x55\xf9\x25\x12\x11\x2e\x41\xe6\xf3\x72\x9e\x60\x7b\x51\xbf\x09\x7a\xa6\xcb\x94\x1d\xd0\x73\xdd\xc6\x21\x7d\x68\x6d\xcc\x30\xb3\xc7\x54\x4b\xcc\x35\x99\xf2\x81\x76\xcc\x8c\x6a\x01\xe7\x3b\x0e\x8d\x2a\x3c\xb4\x84\x67\x8b\x9b\xed\xce\xc3\x41\x14\x51\x9b\x81\x5b\x3a\xb0\xea\x5c\x60\x0f\x49\x0b\x30\x2b\x24\xa8\x9f\x65\xfb\xf1\xf7\x78\xc8\xbb\x36\x85\x78\xc1\xf8\xe7\x57\x8b\x9f\x1c\xbc\xd1\x8a\xe2\xc5\x64\x45\x7f\xdd\x43\xd6\x83\xaf\x1f\xf1\xdf\xad\xe9\x9f\xf6\x1f\x59\x95\x53\xae\x35\xab\x95\x47\xdf\x2b\x48\xe8\x0a\x81\xac\xe4\x37\xcf\xd8\xa2\xd7\xe7\x0b\xb8\xcd\xe7\x28\x18\x2a\xac\x60\xad\x7e\x96\xb3\x02\xc8\x98\xc3\xc7\x1e\xdc\x06\xdf\x3a\x9c\x07\xb7\x81\xe1\x98\xe8\x44\x60\x75\x7e\xc4\xa9\x4b\x25\xbc\x1f\xec\xa2\x7a\x49\xe3\xe5\xcc\x35\xee\x54\x17\x26\x0d\x4d\x2f\xc8\x5c\xd0\xd0\x1d\x7b\xb9\xac\x55\x17\xa8\x74\xe9\x38\x73\x40\x46\xcd\x5a\xcf\x0e\x37\xac\xe6\xb5\xdc\x4d\xe8\x4d\x31\x5b\x14\x8e\x85\xed\x0a\xd3\x34\xf2\xda\xd7\x8a\x5e\xb2\x6c\x1c\x19\x22\x83\xfb\x31\x0c\xc2\x10\x65\x45\xa9\x24\xcb\x66\xb5\x70\xd0\x68\x53\x64\x84\xa9\x12\x8f\x34\xf0\x94\x05\xa8\x57\xcf\xf7\x44\xca\x0d\x17\xd1\x01\xcc\xac\x00\x69\x14\xb6\xf5\xf4\xdd\x8e\xef\x67\x79\xcb\xba\x4d\x0a\xfd\xbe\x51\x0f\x09\x4d\x7f\x6a\x34\x6f\x4b\xa4\x4a\x29\x62\xfb\x02\xe7\x03\x02\x25\xcf\x45\x88\x12\x4e\xf0\xf1\x02\x12\x4e\x22\x98\x93\x84\xb0\x10\xc5\x69\x4d\xc1\x2e\x4a\xec\x30\x78\xe0\x36\xa9\xa8\x7a\x98\x50\x64\x6a\x1c\xc1\x09\x59\x91\x0b\xa3\xf9\xd1\xa9\xcf\x79\x68\x00\xda\xd4\x6d\x51\x03\x0c\x05\x2a\x87\x5e\xa8\xa9\x8d\x82\xb4\x80\xee\x7c\x68\x8d\xd1\xc2\xd9\xab\xce\x60\xa4\x1e\x11\x45\x60\x88\xac\x96\x3c\x12\x6e\x03\xe7\x50\xa1\x31\xcf\x69\xb5\x10\x38\xf2\x64\x2d\xa8\x39\x3b\x14\x23\xf5\x8a\xad\x74\x5a\x23\xc9\x4a\xff\xb7\xd6\x31\x36\x29\x5d\xbf\x66\x9c\xdd\xbe\xad\x86\x71\xec\x15\x8f\xbe\xab\x8d\x99\x54\xe6\x6e\x31\x16\x3c\xcf\x6a\xe7\xf0\xe0\x36\x28\xd6\x6f\xf4\x32\x50\xf7\x34\xb3\xd0\xd5\x68\x27\x71\x0d\x5d\xbf\x01\xa5\xff\xd8\xc8\x6e\xdf\x12\x22\x5c\x50\x86\x40\x40\x6d\x33\x34\x2d\x2a\xcb\xd3\xb9\xce\x3f\x8b\x72\x43\x4b\xb9\xf4\xc1\x3a\x5f\xbb\x81\x80\xb3\x2d\xf3\x0e\x31\xb3\x4d\x09\xd0\x9a\x74\xeb\x9c\x19\x4e\x4e\x02\x45\x58\x44\x44\x34\x1b\x9d\xcf\xd6\xe7\x67\x80\x2a\xec\x9d\xd6\x09\x19\xd0\xd2\xac\x8e\xd0\x47\xca\x68\x9a\xa7\x6d\x82\xc0\x49\x84\x0b\x92\x27\xca\xb8\xd0\x17\x14\x7c\x47\x92\x32\xf5\xf6\x1c\x52\xca\x66\xbf\xe7\x84\x29\x9b\x4f\xdf\x16\xb3\x09\x5f\xd1\x40\x84\x15\xb2\xbf\x26\x49\x8e\x90\x11\x2a\x5c\x47\xee\x66\x38\x5b\x9e\x9b\x08\x27\x0a\x63\x2e\xe8\x17\x3f\xbe\xb5\x8e\xd7\x14\x37\xe6\x3e\x88\x27\x34\x32\xe6\x9a\xd3\xa4\x9c\xf4\x14\x9a\x36\x7b\x55\xb5\x4b\x62\x58\xe1\xb6\xae\x86\x15\x6e\x1b\xea\xd4\xa0\x86\xbd\x3a\xb0\xe5\xb9\x54\xda\x93\x4b\x58\x37\xa8\xfc\x73\x4f\x27\xbc\xc0\x0e\xb5\xbd\x42\x74\x37\xbd\x86\xaf\x0e\xcf\x16\xa4\x3a\x47\x16\xd8\x45\x75\xdd\xc4\xab\x17\xaf\x0b\xe0\x19\x0a\x1b\xea\xba\xa5\xbc\xbb\xdd\xd3\xea\x14\xa4\x5a\x86\xea\x0d\xef\x53\x24\x2e\xe6\x1e\x31\xd5\xfd\x64\xc6\x25\x55\x5c\x34\xb4\x16\x53\xe5\x1d\xe2\x35\xed\x2d\x11\x96\x44\x2e\x4b\x37\xa6\x0a\x42\x9e\xa6\x54\xb5\x51\xb1\x2b\x0d\x47\x6c\x39\xca\x95\x40\x34\xa2\x86\x09\x12\x06\x9b\x25\x32\x93\xc9\x5a\xc9\x6a\xe0\x99\x9d\x5d\x94\x9e\xe8\x48\x8f\xf4\x4b\xbe\xb0\x59\xb0\x8e\x6b\x5e\xce\x22\x8b\xf7\xae\x82\xf7\x79\x67\xe1\x98\x97\xc9\x2e\xe4\x69\x46\x93\x86\xa7\xc4\xdc\xd3\xcf\x4f\x15\x3a\x43\x8b\x21\x76\x55\x85\x87\x17\x16\x8b\x66\x36\xe2\x61\xdd\x27\x44\x69\xcb\x01\x55\x56\x09\x16\xd0\x1e\xd1\x7d\x10\x39\x33\xb7\xfc\xae\x62\xf2\x28\x66\x05\xe2\x15\xfc\xbd\x1e\x91\x85\x48\x9e\x53\x98\xa5\x16\x5f\x71\xd2\xcc\xfc\x52\xb9\xe8\x6c\x5c\x08\xec\x2e\x42\x8a\x93\xba\xb8\x10\x69\x69\xc8\xbc\xfb\x8e\x3f\xea\xe0\xa1\x8c\x50\xf3\xf3\x95\xe6\x35\xcf\x01\xa9\x7e\x7c\x42\xe1\x02\xa9\x65\x57\xf0\x8f\x2a\xb7\xe1\xee\xea\xc9\x63\xbe\x81\x5b\x18\xb1\x64\xbc\xc0\xfe\xea\x6b\xb5\x12\xd7\x5e\xf3\xd0\xb8\xd8\x39\xc6\x6e\x6e\xe7\x1f\x9a\xcd\x55\x37\x3e\x6e\x38\xd7\x72\xd3\x74\xf4\x74\xae\xd0\xd6\xff\x73\x32\x77\x40\xe6\x3f\x74\xab\x56\xe5\xbb\xa5\x57\x7b\xda\x23\x62\xa3\xd2\x7d\x89\x9a\xf5\x4d\x7b\x7a\xf2\xee\xbf\x9a\x21\xec\x5f\xe6\xfd\xd9\x32\xd3\x71\x82\xbd\xc4\x1c\x4c\x55\x72\x93\xd9\x37\xd3\x60\x5a\xf0\x83\x53\x97\x69\x13\x71\x77\x13\x69\xeb\x48\xaf\xd8\xf7\x22\xa2\x76\x27\xd9\x34\xcd\xfe\x99\xcf\x5e\x33\xbc\xd0\xc4\xd1\x11\x2f\x6a\xf7\x52\x1b\x15\x56\x78\x84\x33\xa3\x22\xbf\x8b\x51\x5c\x91\x04\x22\x94\xe6\xe7\x89\x1a\x46\xb6\x28\xe2\xdd\x5e\x45\xd4\x4c\xb9\x59\x22\x39\x94\xd9\xcc\x05\xeb\xff\x6c\xd2\x7b\xe0\x1e\xf5\x60\x20\x1d\xb4\xd8\x8d\xed\xb5\x74\x3b\x19\x45\xfe\xc5\x6e\x51\xea\x68\xab\xe6\x42\x20\x53\xc9\x16\x38\x33\x7f\x9c\x63\xc5\xb6\xf7\x93\x40\x92\x84\x6f\x30\xd2\xbe\x3d\xb8\x0d\xce\x60\x43\x93\xc4\x5e\xfe\x99\x00\x4a\xb9\x40\xdd\x83\x30\x78\x03\xc8\x94\xd8\x42\x42\xca\x9f\x38\x94\x3d\xa5\x76\x03\x4f\x2a\x1d\x4e\xb6\x89\xd3\x7b\x95\x7d\xe5\xf9\x3e\x5f\xb3\x23\x90\xef\x8d\x77\x57\x82\x56\x86\x18\xad\x4c\x54\x6a\xf9\x89\xef\x89\xc7\xb7\x91\xcd\xee\xcf\x78\xa4\x09\x89\xfa\x95\x3a\xec\x6b\xfb\x6a\x0d\x25\x79\x7c\x0e\x49\xf2\xd8\xda\x49\x1e\xe1\x6c\x87\x8f\xfa\x96\x1f\x08\x98\xc0\xb0\xbd\xe7\x11\x97\x71\x4f\x9d\xff\x06\x00\x00\xff\xff\x72\x6f\xcc\x68\x87\x2d\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 11655, mode: os.FileMode(420), modTime: time.Unix(1539210973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
